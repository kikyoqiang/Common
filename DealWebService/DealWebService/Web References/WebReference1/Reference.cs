//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

// 
// 此源代码是由 Microsoft.VSDesigner 4.0.30319.42000 版自动生成。
// 
#pragma warning disable 1591

namespace DealWebService.WebReference1 {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="ServiceSoap", Namespace="http://hemodialysis.org/")]
    public partial class Service : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback RunThrombolysisAdviceOperationCompleted;
        
        private System.Threading.SendOrPostCallback CancelThrombolysisAdviceOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateSignatureForAllAdviceOperationCompleted;
        
        private System.Threading.SendOrPostCallback InsertThromRecordOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateThromRecordOperationCompleted;
        
        private System.Threading.SendOrPostCallback DelThromRecordOperationCompleted;
        
        private System.Threading.SendOrPostCallback InsertThromMaterialOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateThromMaterialOperationCompleted;
        
        private System.Threading.SendOrPostCallback DelThromMaterialOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPlasmapheresisPatientListOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetNoPlasmapheresisPatientListOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDefaultPlasmapheresisDataByQrcodeOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDefaultPlasmapheresisDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetspecifiedPlasmapheresisDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback InsertAddPlasmapheresisDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdatePlasmapheresisRecordInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteAllPlasmapheresisInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback CancelPlasmapheresisArchiveOperationCompleted;
        
        private System.Threading.SendOrPostCallback InsertPlasmapheresisAdviceOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpPlasmapheresisAdviceOperationCompleted;
        
        private System.Threading.SendOrPostCallback DelPlasmapheresisAdviceOperationCompleted;
        
        private System.Threading.SendOrPostCallback RunPlasmapheresisAdviceOperationCompleted;
        
        private System.Threading.SendOrPostCallback CancelPlasmapheresisAdviceOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateSignatureForAllPlasmapheresisAdviceOperationCompleted;
        
        private System.Threading.SendOrPostCallback InsertPlasmapheresisRecordOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdatePlasmapheresisRecordOperationCompleted;
        
        private System.Threading.SendOrPostCallback DelPlasmapheresisRecordOperationCompleted;
        
        private System.Threading.SendOrPostCallback InsertPlasmapheresisMaterialOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdatePlasmapheresisMaterialOperationCompleted;
        
        private System.Threading.SendOrPostCallback DelPlasmapheresisMaterialOperationCompleted;
        
        private System.Threading.SendOrPostCallback UploadFilesOperationCompleted;
        
        private System.Threading.SendOrPostCallback UploadFilesForPCUpgradingOperationCompleted;
        
        private System.Threading.SendOrPostCallback UploadCommonFilesOperationCompleted;
        
        private System.Threading.SendOrPostCallback UploadLogFileFromAndroidOperationCompleted;
        
        private System.Threading.SendOrPostCallback UploadLogFromAndroidOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetApkVersionsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetApkVersionsByApktoolOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPCVersionsOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckFileMD5OperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckFileMD5ForPCOperationCompleted;
        
        private System.Threading.SendOrPostCallback UploadPatientImageOperationCompleted;
        
        private System.Threading.SendOrPostCallback UploadVesselRoutePictureOperationCompleted;
        
        private System.Threading.SendOrPostCallback UploadDocumentFileOperationCompleted;
        
        private System.Threading.SendOrPostCallback UploadCommonPictureOperationCompleted;
        
        private System.Threading.SendOrPostCallback UploadCommonPictureForPCOperationCompleted;
        
        private System.Threading.SendOrPostCallback UploadProductUserSignatureImageOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCurrentWebServiceVersionOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCurrentWebServiceVersionForPCOperationCompleted;
        
        private System.Threading.SendOrPostCallback UploadPartFilesForPCUpgradingOperationCompleted;
        
        private System.Threading.SendOrPostCallback UploadDocumentFileWithReturnOperationCompleted;
        
        private System.Threading.SendOrPostCallback UploadLogFromPCOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetServerFileNamesOperationCompleted;
        
        private System.Threading.SendOrPostCallback UploadCommonAudioOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetFlagForUpdateConfigFileOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateConfigFileOperationCompleted;
        
        private System.Threading.SendOrPostCallback OnlineSessionStartOperationCompleted;
        
        private System.Threading.SendOrPostCallback OnlineSessionStopOperationCompleted;
        
        private System.Threading.SendOrPostCallback OnlineGetCurrentOnlineDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback DoCalcOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDateTimeNowOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDateTimeNow2OperationCompleted;
        
        private System.Threading.SendOrPostCallback xxlOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckProductUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckProductUserForSchemeOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckProductUserByUserNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckUserForNursingOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckUserForHeadNurseOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckProductUserPasswordOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetProductUserForModifySchemeOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPatientBeforeTodayOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPatientOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPatientListByNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetThrombolysisPatientOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDialyseDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDialyseDataByQrcodeOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDictionaryDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetEquipmentListOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSpecifiedDialyseRecordOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTestInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetLastTestInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetBPInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDialysisCostsInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDetailDialysisCostsInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDialyseSchemeOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSpecifiedDialyseDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDeepVeinCatheterizationOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetScoreAssessmentInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPublicityAndEducationContentOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAssessFeverOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDialyseRecordHistoryListOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPublicityAndEducationByPatientIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPublicityAndEducationHistoryListOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDisinfectionRecordInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDisinfectionRecordEndTimeOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPatientInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetHtmlInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetShiftInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback QueryShiftInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPatientMedicineStockOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAccessoryCheckInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback UploadAccessoryCheckImageOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetVesselRoutePictureListOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetProgressNoteListOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetProgressNoteInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetBodySurfaceDisinfectionRecordInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetedicalUserInfoStatisticsInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPatMonthSummaryInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPatMonthSummaryhtmlInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDialysisMachineRunningRecordInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDialysisPrepareInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetNurseScheduleInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetNurseScheduleInfoCallOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDialysisReportListOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPatientEquipmentStockInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDialyseRecordRemindOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSub2PictureListOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSub2AudioListOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetLaboratoryInfoLisOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetLaboratorySmallInfoLisOperationCompleted;
        
        private System.Threading.SendOrPostCallback DelDoctorAdviceOperationCompleted;
        
        private System.Threading.SendOrPostCallback DelLongTermDialyseAdviceRecordOperationCompleted;
        
        private System.Threading.SendOrPostCallback DelDialyseInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback DelAllDialyseDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback DelDialyseMaterialOperationCompleted;
        
        private System.Threading.SendOrPostCallback DelDialyseMaterialDetailOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteAccessoryCheckImageOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteAccessoryCheckInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteExecutionPublicityAndEducationOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteSub2DetailOperationCompleted;
        
        private System.Threading.SendOrPostCallback InsertDialyseAdviceRecordOperationCompleted;
        
        private System.Threading.SendOrPostCallback InsertLongTermDialyseAdviceRecordOperationCompleted;
        
        private System.Threading.SendOrPostCallback InsertDialyseTimeRecordOperationCompleted;
        
        private System.Threading.SendOrPostCallback InsertDialyseMaterialOperationCompleted;
        
        private System.Threading.SendOrPostCallback InsertDialyseMaterialDetailOperationCompleted;
        
        private System.Threading.SendOrPostCallback InsertDialyseDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddNewGroupForPublicityAndEducationOperationCompleted;
        
        private System.Threading.SendOrPostCallback SaveNurseTsjsOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddSub2PictureOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddSub2AudioOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpDateDialyseDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateSingleFieldOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpDateDialyseAdviceRecordOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpDateCollateDialyseAdviceRecordOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpDateDialyseTimeRecordOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateDialyseMaterialOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpDateDialyseMaterialDetailOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpDateForJietaiOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpDateSignatureForAllAdviceOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpDateSumForDialyseTimeRecordOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateDialyseMaterialForMergeOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpDateDialyseSchemeOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpDateLongTermDialyseAdviceRecordOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpDateAdviceRecordZXTimeOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateDeepVeinCatheterizationOperationCompleted;
        
        private System.Threading.SendOrPostCallback InsertOrUpdateScoreAssessmentInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback InsertOrUpdateAssessFeverOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateAssessDisinfectionFlagOperationCompleted;
        
        private System.Threading.SendOrPostCallback ExecutionPublicityAndEducationOperationCompleted;
        
        private System.Threading.SendOrPostCallback DisinfectionRecordInfoOperationOperationCompleted;
        
        private System.Threading.SendOrPostCallback ModifyHospitalizationFlagOperationCompleted;
        
        private System.Threading.SendOrPostCallback ShiftInfoOperationOperationCompleted;
        
        private System.Threading.SendOrPostCallback SaveAccessoryCheckInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback BodySurfaceDisinfectionRecordInfoOperationOperationCompleted;
        
        private System.Threading.SendOrPostCallback DialysisMachineRunningRecordOperationOperationCompleted;
        
        private System.Threading.SendOrPostCallback CancelArchiveOperationCompleted;
        
        private System.Threading.SendOrPostCallback StopLongTermDialyseAdviceRecordOperationCompleted;
        
        private System.Threading.SendOrPostCallback RunDoctorAdviceOperationCompleted;
        
        private System.Threading.SendOrPostCallback RunDoctorAdviceByCodeIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback CancelDoctorAdviceOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAdviceUpdateNotifyOperationCompleted;
        
        private System.Threading.SendOrPostCallback CancelAdviceUpdateOperationCompleted;
        
        private System.Threading.SendOrPostCallback SaveMonthlySettlementOperationCompleted;
        
        private System.Threading.SendOrPostCallback StopDialyseSchemeOperationCompleted;
        
        private System.Threading.SendOrPostCallback CallForwardingOperationCompleted;
        
        private System.Threading.SendOrPostCallback AutomaticallyUploadPdfOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetThrombolysisPatientListOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetNoThrombolysisPatientListOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDefaultThrombolysisDataByQrcodeOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDefaultThrombolysisDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetspecifiedThrombolysisDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback InsertAddThrombolysisDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateThrombolysisRecordInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteAllThrombolysisInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback CancelThrombolysisArchiveOperationCompleted;
        
        private System.Threading.SendOrPostCallback InsertThrombolysisAdviceOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpThrombolysisAdviceOperationCompleted;
        
        private System.Threading.SendOrPostCallback DelThrombolysisAdviceOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public Service() {
            this.Url = global::DealWebService.Properties.Settings.Default.DealWebService_WebReference1_Service;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event RunThrombolysisAdviceCompletedEventHandler RunThrombolysisAdviceCompleted;
        
        /// <remarks/>
        public event CancelThrombolysisAdviceCompletedEventHandler CancelThrombolysisAdviceCompleted;
        
        /// <remarks/>
        public event UpdateSignatureForAllAdviceCompletedEventHandler UpdateSignatureForAllAdviceCompleted;
        
        /// <remarks/>
        public event InsertThromRecordCompletedEventHandler InsertThromRecordCompleted;
        
        /// <remarks/>
        public event UpdateThromRecordCompletedEventHandler UpdateThromRecordCompleted;
        
        /// <remarks/>
        public event DelThromRecordCompletedEventHandler DelThromRecordCompleted;
        
        /// <remarks/>
        public event InsertThromMaterialCompletedEventHandler InsertThromMaterialCompleted;
        
        /// <remarks/>
        public event UpdateThromMaterialCompletedEventHandler UpdateThromMaterialCompleted;
        
        /// <remarks/>
        public event DelThromMaterialCompletedEventHandler DelThromMaterialCompleted;
        
        /// <remarks/>
        public event GetPlasmapheresisPatientListCompletedEventHandler GetPlasmapheresisPatientListCompleted;
        
        /// <remarks/>
        public event GetNoPlasmapheresisPatientListCompletedEventHandler GetNoPlasmapheresisPatientListCompleted;
        
        /// <remarks/>
        public event GetDefaultPlasmapheresisDataByQrcodeCompletedEventHandler GetDefaultPlasmapheresisDataByQrcodeCompleted;
        
        /// <remarks/>
        public event GetDefaultPlasmapheresisDataCompletedEventHandler GetDefaultPlasmapheresisDataCompleted;
        
        /// <remarks/>
        public event GetspecifiedPlasmapheresisDataCompletedEventHandler GetspecifiedPlasmapheresisDataCompleted;
        
        /// <remarks/>
        public event InsertAddPlasmapheresisDataCompletedEventHandler InsertAddPlasmapheresisDataCompleted;
        
        /// <remarks/>
        public event UpdatePlasmapheresisRecordInfoCompletedEventHandler UpdatePlasmapheresisRecordInfoCompleted;
        
        /// <remarks/>
        public event DeleteAllPlasmapheresisInfoCompletedEventHandler DeleteAllPlasmapheresisInfoCompleted;
        
        /// <remarks/>
        public event CancelPlasmapheresisArchiveCompletedEventHandler CancelPlasmapheresisArchiveCompleted;
        
        /// <remarks/>
        public event InsertPlasmapheresisAdviceCompletedEventHandler InsertPlasmapheresisAdviceCompleted;
        
        /// <remarks/>
        public event UpPlasmapheresisAdviceCompletedEventHandler UpPlasmapheresisAdviceCompleted;
        
        /// <remarks/>
        public event DelPlasmapheresisAdviceCompletedEventHandler DelPlasmapheresisAdviceCompleted;
        
        /// <remarks/>
        public event RunPlasmapheresisAdviceCompletedEventHandler RunPlasmapheresisAdviceCompleted;
        
        /// <remarks/>
        public event CancelPlasmapheresisAdviceCompletedEventHandler CancelPlasmapheresisAdviceCompleted;
        
        /// <remarks/>
        public event UpdateSignatureForAllPlasmapheresisAdviceCompletedEventHandler UpdateSignatureForAllPlasmapheresisAdviceCompleted;
        
        /// <remarks/>
        public event InsertPlasmapheresisRecordCompletedEventHandler InsertPlasmapheresisRecordCompleted;
        
        /// <remarks/>
        public event UpdatePlasmapheresisRecordCompletedEventHandler UpdatePlasmapheresisRecordCompleted;
        
        /// <remarks/>
        public event DelPlasmapheresisRecordCompletedEventHandler DelPlasmapheresisRecordCompleted;
        
        /// <remarks/>
        public event InsertPlasmapheresisMaterialCompletedEventHandler InsertPlasmapheresisMaterialCompleted;
        
        /// <remarks/>
        public event UpdatePlasmapheresisMaterialCompletedEventHandler UpdatePlasmapheresisMaterialCompleted;
        
        /// <remarks/>
        public event DelPlasmapheresisMaterialCompletedEventHandler DelPlasmapheresisMaterialCompleted;
        
        /// <remarks/>
        public event UploadFilesCompletedEventHandler UploadFilesCompleted;
        
        /// <remarks/>
        public event UploadFilesForPCUpgradingCompletedEventHandler UploadFilesForPCUpgradingCompleted;
        
        /// <remarks/>
        public event UploadCommonFilesCompletedEventHandler UploadCommonFilesCompleted;
        
        /// <remarks/>
        public event UploadLogFileFromAndroidCompletedEventHandler UploadLogFileFromAndroidCompleted;
        
        /// <remarks/>
        public event UploadLogFromAndroidCompletedEventHandler UploadLogFromAndroidCompleted;
        
        /// <remarks/>
        public event GetApkVersionsCompletedEventHandler GetApkVersionsCompleted;
        
        /// <remarks/>
        public event GetApkVersionsByApktoolCompletedEventHandler GetApkVersionsByApktoolCompleted;
        
        /// <remarks/>
        public event GetPCVersionsCompletedEventHandler GetPCVersionsCompleted;
        
        /// <remarks/>
        public event CheckFileMD5CompletedEventHandler CheckFileMD5Completed;
        
        /// <remarks/>
        public event CheckFileMD5ForPCCompletedEventHandler CheckFileMD5ForPCCompleted;
        
        /// <remarks/>
        public event UploadPatientImageCompletedEventHandler UploadPatientImageCompleted;
        
        /// <remarks/>
        public event UploadVesselRoutePictureCompletedEventHandler UploadVesselRoutePictureCompleted;
        
        /// <remarks/>
        public event UploadDocumentFileCompletedEventHandler UploadDocumentFileCompleted;
        
        /// <remarks/>
        public event UploadCommonPictureCompletedEventHandler UploadCommonPictureCompleted;
        
        /// <remarks/>
        public event UploadCommonPictureForPCCompletedEventHandler UploadCommonPictureForPCCompleted;
        
        /// <remarks/>
        public event UploadProductUserSignatureImageCompletedEventHandler UploadProductUserSignatureImageCompleted;
        
        /// <remarks/>
        public event GetCurrentWebServiceVersionCompletedEventHandler GetCurrentWebServiceVersionCompleted;
        
        /// <remarks/>
        public event GetCurrentWebServiceVersionForPCCompletedEventHandler GetCurrentWebServiceVersionForPCCompleted;
        
        /// <remarks/>
        public event UploadPartFilesForPCUpgradingCompletedEventHandler UploadPartFilesForPCUpgradingCompleted;
        
        /// <remarks/>
        public event UploadDocumentFileWithReturnCompletedEventHandler UploadDocumentFileWithReturnCompleted;
        
        /// <remarks/>
        public event UploadLogFromPCCompletedEventHandler UploadLogFromPCCompleted;
        
        /// <remarks/>
        public event GetServerFileNamesCompletedEventHandler GetServerFileNamesCompleted;
        
        /// <remarks/>
        public event UploadCommonAudioCompletedEventHandler UploadCommonAudioCompleted;
        
        /// <remarks/>
        public event GetFlagForUpdateConfigFileCompletedEventHandler GetFlagForUpdateConfigFileCompleted;
        
        /// <remarks/>
        public event UpdateConfigFileCompletedEventHandler UpdateConfigFileCompleted;
        
        /// <remarks/>
        public event OnlineSessionStartCompletedEventHandler OnlineSessionStartCompleted;
        
        /// <remarks/>
        public event OnlineSessionStopCompletedEventHandler OnlineSessionStopCompleted;
        
        /// <remarks/>
        public event OnlineGetCurrentOnlineDataCompletedEventHandler OnlineGetCurrentOnlineDataCompleted;
        
        /// <remarks/>
        public event DoCalcCompletedEventHandler DoCalcCompleted;
        
        /// <remarks/>
        public event GetDateTimeNowCompletedEventHandler GetDateTimeNowCompleted;
        
        /// <remarks/>
        public event GetDateTimeNow2CompletedEventHandler GetDateTimeNow2Completed;
        
        /// <remarks/>
        public event xxlCompletedEventHandler xxlCompleted;
        
        /// <remarks/>
        public event CheckProductUserCompletedEventHandler CheckProductUserCompleted;
        
        /// <remarks/>
        public event CheckProductUserForSchemeCompletedEventHandler CheckProductUserForSchemeCompleted;
        
        /// <remarks/>
        public event CheckProductUserByUserNameCompletedEventHandler CheckProductUserByUserNameCompleted;
        
        /// <remarks/>
        public event CheckUserForNursingCompletedEventHandler CheckUserForNursingCompleted;
        
        /// <remarks/>
        public event CheckUserForHeadNurseCompletedEventHandler CheckUserForHeadNurseCompleted;
        
        /// <remarks/>
        public event CheckProductUserPasswordCompletedEventHandler CheckProductUserPasswordCompleted;
        
        /// <remarks/>
        public event GetProductUserForModifySchemeCompletedEventHandler GetProductUserForModifySchemeCompleted;
        
        /// <remarks/>
        public event GetPatientBeforeTodayCompletedEventHandler GetPatientBeforeTodayCompleted;
        
        /// <remarks/>
        public event GetPatientCompletedEventHandler GetPatientCompleted;
        
        /// <remarks/>
        public event GetPatientListByNameCompletedEventHandler GetPatientListByNameCompleted;
        
        /// <remarks/>
        public event GetThrombolysisPatientCompletedEventHandler GetThrombolysisPatientCompleted;
        
        /// <remarks/>
        public event GetDialyseDataCompletedEventHandler GetDialyseDataCompleted;
        
        /// <remarks/>
        public event GetDialyseDataByQrcodeCompletedEventHandler GetDialyseDataByQrcodeCompleted;
        
        /// <remarks/>
        public event GetDictionaryDataCompletedEventHandler GetDictionaryDataCompleted;
        
        /// <remarks/>
        public event GetEquipmentListCompletedEventHandler GetEquipmentListCompleted;
        
        /// <remarks/>
        public event GetSpecifiedDialyseRecordCompletedEventHandler GetSpecifiedDialyseRecordCompleted;
        
        /// <remarks/>
        public event GetTestInfoCompletedEventHandler GetTestInfoCompleted;
        
        /// <remarks/>
        public event GetLastTestInfoCompletedEventHandler GetLastTestInfoCompleted;
        
        /// <remarks/>
        public event GetBPInfoCompletedEventHandler GetBPInfoCompleted;
        
        /// <remarks/>
        public event GetDialysisCostsInfoCompletedEventHandler GetDialysisCostsInfoCompleted;
        
        /// <remarks/>
        public event GetDetailDialysisCostsInfoCompletedEventHandler GetDetailDialysisCostsInfoCompleted;
        
        /// <remarks/>
        public event GetDialyseSchemeCompletedEventHandler GetDialyseSchemeCompleted;
        
        /// <remarks/>
        public event GetSpecifiedDialyseDataCompletedEventHandler GetSpecifiedDialyseDataCompleted;
        
        /// <remarks/>
        public event GetDeepVeinCatheterizationCompletedEventHandler GetDeepVeinCatheterizationCompleted;
        
        /// <remarks/>
        public event GetScoreAssessmentInfoCompletedEventHandler GetScoreAssessmentInfoCompleted;
        
        /// <remarks/>
        public event GetPublicityAndEducationContentCompletedEventHandler GetPublicityAndEducationContentCompleted;
        
        /// <remarks/>
        public event GetAssessFeverCompletedEventHandler GetAssessFeverCompleted;
        
        /// <remarks/>
        public event GetDialyseRecordHistoryListCompletedEventHandler GetDialyseRecordHistoryListCompleted;
        
        /// <remarks/>
        public event GetPublicityAndEducationByPatientIDCompletedEventHandler GetPublicityAndEducationByPatientIDCompleted;
        
        /// <remarks/>
        public event GetPublicityAndEducationHistoryListCompletedEventHandler GetPublicityAndEducationHistoryListCompleted;
        
        /// <remarks/>
        public event GetDisinfectionRecordInfoCompletedEventHandler GetDisinfectionRecordInfoCompleted;
        
        /// <remarks/>
        public event GetDisinfectionRecordEndTimeCompletedEventHandler GetDisinfectionRecordEndTimeCompleted;
        
        /// <remarks/>
        public event GetPatientInfoCompletedEventHandler GetPatientInfoCompleted;
        
        /// <remarks/>
        public event GetHtmlInfoCompletedEventHandler GetHtmlInfoCompleted;
        
        /// <remarks/>
        public event GetShiftInfoCompletedEventHandler GetShiftInfoCompleted;
        
        /// <remarks/>
        public event QueryShiftInfoCompletedEventHandler QueryShiftInfoCompleted;
        
        /// <remarks/>
        public event GetPatientMedicineStockCompletedEventHandler GetPatientMedicineStockCompleted;
        
        /// <remarks/>
        public event GetAccessoryCheckInfoCompletedEventHandler GetAccessoryCheckInfoCompleted;
        
        /// <remarks/>
        public event UploadAccessoryCheckImageCompletedEventHandler UploadAccessoryCheckImageCompleted;
        
        /// <remarks/>
        public event GetVesselRoutePictureListCompletedEventHandler GetVesselRoutePictureListCompleted;
        
        /// <remarks/>
        public event GetProgressNoteListCompletedEventHandler GetProgressNoteListCompleted;
        
        /// <remarks/>
        public event GetProgressNoteInfoCompletedEventHandler GetProgressNoteInfoCompleted;
        
        /// <remarks/>
        public event GetBodySurfaceDisinfectionRecordInfoCompletedEventHandler GetBodySurfaceDisinfectionRecordInfoCompleted;
        
        /// <remarks/>
        public event GetedicalUserInfoStatisticsInfoCompletedEventHandler GetedicalUserInfoStatisticsInfoCompleted;
        
        /// <remarks/>
        public event GetPatMonthSummaryInfoCompletedEventHandler GetPatMonthSummaryInfoCompleted;
        
        /// <remarks/>
        public event GetPatMonthSummaryhtmlInfoCompletedEventHandler GetPatMonthSummaryhtmlInfoCompleted;
        
        /// <remarks/>
        public event GetDialysisMachineRunningRecordInfoCompletedEventHandler GetDialysisMachineRunningRecordInfoCompleted;
        
        /// <remarks/>
        public event GetDialysisPrepareInfoCompletedEventHandler GetDialysisPrepareInfoCompleted;
        
        /// <remarks/>
        public event GetNurseScheduleInfoCompletedEventHandler GetNurseScheduleInfoCompleted;
        
        /// <remarks/>
        public event GetNurseScheduleInfoCallCompletedEventHandler GetNurseScheduleInfoCallCompleted;
        
        /// <remarks/>
        public event GetDialysisReportListCompletedEventHandler GetDialysisReportListCompleted;
        
        /// <remarks/>
        public event GetPatientEquipmentStockInfoCompletedEventHandler GetPatientEquipmentStockInfoCompleted;
        
        /// <remarks/>
        public event GetDialyseRecordRemindCompletedEventHandler GetDialyseRecordRemindCompleted;
        
        /// <remarks/>
        public event GetSub2PictureListCompletedEventHandler GetSub2PictureListCompleted;
        
        /// <remarks/>
        public event GetSub2AudioListCompletedEventHandler GetSub2AudioListCompleted;
        
        /// <remarks/>
        public event GetLaboratoryInfoLisCompletedEventHandler GetLaboratoryInfoLisCompleted;
        
        /// <remarks/>
        public event GetLaboratorySmallInfoLisCompletedEventHandler GetLaboratorySmallInfoLisCompleted;
        
        /// <remarks/>
        public event DelDoctorAdviceCompletedEventHandler DelDoctorAdviceCompleted;
        
        /// <remarks/>
        public event DelLongTermDialyseAdviceRecordCompletedEventHandler DelLongTermDialyseAdviceRecordCompleted;
        
        /// <remarks/>
        public event DelDialyseInfoCompletedEventHandler DelDialyseInfoCompleted;
        
        /// <remarks/>
        public event DelAllDialyseDataCompletedEventHandler DelAllDialyseDataCompleted;
        
        /// <remarks/>
        public event DelDialyseMaterialCompletedEventHandler DelDialyseMaterialCompleted;
        
        /// <remarks/>
        public event DelDialyseMaterialDetailCompletedEventHandler DelDialyseMaterialDetailCompleted;
        
        /// <remarks/>
        public event DeleteAccessoryCheckImageCompletedEventHandler DeleteAccessoryCheckImageCompleted;
        
        /// <remarks/>
        public event DeleteAccessoryCheckInfoCompletedEventHandler DeleteAccessoryCheckInfoCompleted;
        
        /// <remarks/>
        public event DeleteExecutionPublicityAndEducationCompletedEventHandler DeleteExecutionPublicityAndEducationCompleted;
        
        /// <remarks/>
        public event DeleteSub2DetailCompletedEventHandler DeleteSub2DetailCompleted;
        
        /// <remarks/>
        public event InsertDialyseAdviceRecordCompletedEventHandler InsertDialyseAdviceRecordCompleted;
        
        /// <remarks/>
        public event InsertLongTermDialyseAdviceRecordCompletedEventHandler InsertLongTermDialyseAdviceRecordCompleted;
        
        /// <remarks/>
        public event InsertDialyseTimeRecordCompletedEventHandler InsertDialyseTimeRecordCompleted;
        
        /// <remarks/>
        public event InsertDialyseMaterialCompletedEventHandler InsertDialyseMaterialCompleted;
        
        /// <remarks/>
        public event InsertDialyseMaterialDetailCompletedEventHandler InsertDialyseMaterialDetailCompleted;
        
        /// <remarks/>
        public event InsertDialyseDataCompletedEventHandler InsertDialyseDataCompleted;
        
        /// <remarks/>
        public event AddNewGroupForPublicityAndEducationCompletedEventHandler AddNewGroupForPublicityAndEducationCompleted;
        
        /// <remarks/>
        public event SaveNurseTsjsCompletedEventHandler SaveNurseTsjsCompleted;
        
        /// <remarks/>
        public event AddSub2PictureCompletedEventHandler AddSub2PictureCompleted;
        
        /// <remarks/>
        public event AddSub2AudioCompletedEventHandler AddSub2AudioCompleted;
        
        /// <remarks/>
        public event UpDateDialyseDataCompletedEventHandler UpDateDialyseDataCompleted;
        
        /// <remarks/>
        public event UpdateSingleFieldCompletedEventHandler UpdateSingleFieldCompleted;
        
        /// <remarks/>
        public event UpDateDialyseAdviceRecordCompletedEventHandler UpDateDialyseAdviceRecordCompleted;
        
        /// <remarks/>
        public event UpDateCollateDialyseAdviceRecordCompletedEventHandler UpDateCollateDialyseAdviceRecordCompleted;
        
        /// <remarks/>
        public event UpDateDialyseTimeRecordCompletedEventHandler UpDateDialyseTimeRecordCompleted;
        
        /// <remarks/>
        public event UpdateDialyseMaterialCompletedEventHandler UpdateDialyseMaterialCompleted;
        
        /// <remarks/>
        public event UpDateDialyseMaterialDetailCompletedEventHandler UpDateDialyseMaterialDetailCompleted;
        
        /// <remarks/>
        public event UpDateForJietaiCompletedEventHandler UpDateForJietaiCompleted;
        
        /// <remarks/>
        public event UpDateSignatureForAllAdviceCompletedEventHandler UpDateSignatureForAllAdviceCompleted;
        
        /// <remarks/>
        public event UpDateSumForDialyseTimeRecordCompletedEventHandler UpDateSumForDialyseTimeRecordCompleted;
        
        /// <remarks/>
        public event UpdateDialyseMaterialForMergeCompletedEventHandler UpdateDialyseMaterialForMergeCompleted;
        
        /// <remarks/>
        public event UpDateDialyseSchemeCompletedEventHandler UpDateDialyseSchemeCompleted;
        
        /// <remarks/>
        public event UpDateLongTermDialyseAdviceRecordCompletedEventHandler UpDateLongTermDialyseAdviceRecordCompleted;
        
        /// <remarks/>
        public event UpDateAdviceRecordZXTimeCompletedEventHandler UpDateAdviceRecordZXTimeCompleted;
        
        /// <remarks/>
        public event UpdateDeepVeinCatheterizationCompletedEventHandler UpdateDeepVeinCatheterizationCompleted;
        
        /// <remarks/>
        public event InsertOrUpdateScoreAssessmentInfoCompletedEventHandler InsertOrUpdateScoreAssessmentInfoCompleted;
        
        /// <remarks/>
        public event InsertOrUpdateAssessFeverCompletedEventHandler InsertOrUpdateAssessFeverCompleted;
        
        /// <remarks/>
        public event UpdateAssessDisinfectionFlagCompletedEventHandler UpdateAssessDisinfectionFlagCompleted;
        
        /// <remarks/>
        public event ExecutionPublicityAndEducationCompletedEventHandler ExecutionPublicityAndEducationCompleted;
        
        /// <remarks/>
        public event DisinfectionRecordInfoOperationCompletedEventHandler DisinfectionRecordInfoOperationCompleted;
        
        /// <remarks/>
        public event ModifyHospitalizationFlagCompletedEventHandler ModifyHospitalizationFlagCompleted;
        
        /// <remarks/>
        public event ShiftInfoOperationCompletedEventHandler ShiftInfoOperationCompleted;
        
        /// <remarks/>
        public event SaveAccessoryCheckInfoCompletedEventHandler SaveAccessoryCheckInfoCompleted;
        
        /// <remarks/>
        public event BodySurfaceDisinfectionRecordInfoOperationCompletedEventHandler BodySurfaceDisinfectionRecordInfoOperationCompleted;
        
        /// <remarks/>
        public event DialysisMachineRunningRecordOperationCompletedEventHandler DialysisMachineRunningRecordOperationCompleted;
        
        /// <remarks/>
        public event CancelArchiveCompletedEventHandler CancelArchiveCompleted;
        
        /// <remarks/>
        public event StopLongTermDialyseAdviceRecordCompletedEventHandler StopLongTermDialyseAdviceRecordCompleted;
        
        /// <remarks/>
        public event RunDoctorAdviceCompletedEventHandler RunDoctorAdviceCompleted;
        
        /// <remarks/>
        public event RunDoctorAdviceByCodeIDCompletedEventHandler RunDoctorAdviceByCodeIDCompleted;
        
        /// <remarks/>
        public event CancelDoctorAdviceCompletedEventHandler CancelDoctorAdviceCompleted;
        
        /// <remarks/>
        public event GetAdviceUpdateNotifyCompletedEventHandler GetAdviceUpdateNotifyCompleted;
        
        /// <remarks/>
        public event CancelAdviceUpdateCompletedEventHandler CancelAdviceUpdateCompleted;
        
        /// <remarks/>
        public event SaveMonthlySettlementCompletedEventHandler SaveMonthlySettlementCompleted;
        
        /// <remarks/>
        public event StopDialyseSchemeCompletedEventHandler StopDialyseSchemeCompleted;
        
        /// <remarks/>
        public event CallForwardingCompletedEventHandler CallForwardingCompleted;
        
        /// <remarks/>
        public event AutomaticallyUploadPdfCompletedEventHandler AutomaticallyUploadPdfCompleted;
        
        /// <remarks/>
        public event GetThrombolysisPatientListCompletedEventHandler GetThrombolysisPatientListCompleted;
        
        /// <remarks/>
        public event GetNoThrombolysisPatientListCompletedEventHandler GetNoThrombolysisPatientListCompleted;
        
        /// <remarks/>
        public event GetDefaultThrombolysisDataByQrcodeCompletedEventHandler GetDefaultThrombolysisDataByQrcodeCompleted;
        
        /// <remarks/>
        public event GetDefaultThrombolysisDataCompletedEventHandler GetDefaultThrombolysisDataCompleted;
        
        /// <remarks/>
        public event GetspecifiedThrombolysisDataCompletedEventHandler GetspecifiedThrombolysisDataCompleted;
        
        /// <remarks/>
        public event InsertAddThrombolysisDataCompletedEventHandler InsertAddThrombolysisDataCompleted;
        
        /// <remarks/>
        public event UpdateThrombolysisRecordInfoCompletedEventHandler UpdateThrombolysisRecordInfoCompleted;
        
        /// <remarks/>
        public event DeleteAllThrombolysisInfoCompletedEventHandler DeleteAllThrombolysisInfoCompleted;
        
        /// <remarks/>
        public event CancelThrombolysisArchiveCompletedEventHandler CancelThrombolysisArchiveCompleted;
        
        /// <remarks/>
        public event InsertThrombolysisAdviceCompletedEventHandler InsertThrombolysisAdviceCompleted;
        
        /// <remarks/>
        public event UpThrombolysisAdviceCompletedEventHandler UpThrombolysisAdviceCompleted;
        
        /// <remarks/>
        public event DelThrombolysisAdviceCompletedEventHandler DelThrombolysisAdviceCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://hemodialysis.org/RunThrombolysisAdvice", RequestNamespace="http://hemodialysis.org/", ResponseNamespace="http://hemodialysis.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void RunThrombolysisAdvice(string strUserID, string strThrombolysisNo, string strRelevantSubjectID, string strUserName, string strNurserName, string strDate, string strModifyTime) {
            this.Invoke("RunThrombolysisAdvice", new object[] {
                        strUserID,
                        strThrombolysisNo,
                        strRelevantSubjectID,
                        strUserName,
                        strNurserName,
                        strDate,
                        strModifyTime});
        }
        
        /// <remarks/>
        public void RunThrombolysisAdviceAsync(string strUserID, string strThrombolysisNo, string strRelevantSubjectID, string strUserName, string strNurserName, string strDate, string strModifyTime) {
            this.RunThrombolysisAdviceAsync(strUserID, strThrombolysisNo, strRelevantSubjectID, strUserName, strNurserName, strDate, strModifyTime, null);
        }
        
        /// <remarks/>
        public void RunThrombolysisAdviceAsync(string strUserID, string strThrombolysisNo, string strRelevantSubjectID, string strUserName, string strNurserName, string strDate, string strModifyTime, object userState) {
            if ((this.RunThrombolysisAdviceOperationCompleted == null)) {
                this.RunThrombolysisAdviceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRunThrombolysisAdviceOperationCompleted);
            }
            this.InvokeAsync("RunThrombolysisAdvice", new object[] {
                        strUserID,
                        strThrombolysisNo,
                        strRelevantSubjectID,
                        strUserName,
                        strNurserName,
                        strDate,
                        strModifyTime}, this.RunThrombolysisAdviceOperationCompleted, userState);
        }
        
        private void OnRunThrombolysisAdviceOperationCompleted(object arg) {
            if ((this.RunThrombolysisAdviceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RunThrombolysisAdviceCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://hemodialysis.org/CancelThrombolysisAdvice", RequestNamespace="http://hemodialysis.org/", ResponseNamespace="http://hemodialysis.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void CancelThrombolysisAdvice(string strUserID, string strThrombolysisNo, string strRelevantSubjectID, string strModifyTime) {
            this.Invoke("CancelThrombolysisAdvice", new object[] {
                        strUserID,
                        strThrombolysisNo,
                        strRelevantSubjectID,
                        strModifyTime});
        }
        
        /// <remarks/>
        public void CancelThrombolysisAdviceAsync(string strUserID, string strThrombolysisNo, string strRelevantSubjectID, string strModifyTime) {
            this.CancelThrombolysisAdviceAsync(strUserID, strThrombolysisNo, strRelevantSubjectID, strModifyTime, null);
        }
        
        /// <remarks/>
        public void CancelThrombolysisAdviceAsync(string strUserID, string strThrombolysisNo, string strRelevantSubjectID, string strModifyTime, object userState) {
            if ((this.CancelThrombolysisAdviceOperationCompleted == null)) {
                this.CancelThrombolysisAdviceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCancelThrombolysisAdviceOperationCompleted);
            }
            this.InvokeAsync("CancelThrombolysisAdvice", new object[] {
                        strUserID,
                        strThrombolysisNo,
                        strRelevantSubjectID,
                        strModifyTime}, this.CancelThrombolysisAdviceOperationCompleted, userState);
        }
        
        private void OnCancelThrombolysisAdviceOperationCompleted(object arg) {
            if ((this.CancelThrombolysisAdviceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CancelThrombolysisAdviceCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://hemodialysis.org/UpdateSignatureForAllAdvice", RequestNamespace="http://hemodialysis.org/", ResponseNamespace="http://hemodialysis.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpdateSignatureForAllAdvice(string strUserID, string strThrombolysisNo, string strDoctorName, string strModifyTime) {
            this.Invoke("UpdateSignatureForAllAdvice", new object[] {
                        strUserID,
                        strThrombolysisNo,
                        strDoctorName,
                        strModifyTime});
        }
        
        /// <remarks/>
        public void UpdateSignatureForAllAdviceAsync(string strUserID, string strThrombolysisNo, string strDoctorName, string strModifyTime) {
            this.UpdateSignatureForAllAdviceAsync(strUserID, strThrombolysisNo, strDoctorName, strModifyTime, null);
        }
        
        /// <remarks/>
        public void UpdateSignatureForAllAdviceAsync(string strUserID, string strThrombolysisNo, string strDoctorName, string strModifyTime, object userState) {
            if ((this.UpdateSignatureForAllAdviceOperationCompleted == null)) {
                this.UpdateSignatureForAllAdviceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateSignatureForAllAdviceOperationCompleted);
            }
            this.InvokeAsync("UpdateSignatureForAllAdvice", new object[] {
                        strUserID,
                        strThrombolysisNo,
                        strDoctorName,
                        strModifyTime}, this.UpdateSignatureForAllAdviceOperationCompleted, userState);
        }
        
        private void OnUpdateSignatureForAllAdviceOperationCompleted(object arg) {
            if ((this.UpdateSignatureForAllAdviceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateSignatureForAllAdviceCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://hemodialysis.org/InsertThromRecord", RequestNamespace="http://hemodialysis.org/", ResponseNamespace="http://hemodialysis.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void InsertThromRecord(string strUserID, string strJson, string strModifyTime) {
            this.Invoke("InsertThromRecord", new object[] {
                        strUserID,
                        strJson,
                        strModifyTime});
        }
        
        /// <remarks/>
        public void InsertThromRecordAsync(string strUserID, string strJson, string strModifyTime) {
            this.InsertThromRecordAsync(strUserID, strJson, strModifyTime, null);
        }
        
        /// <remarks/>
        public void InsertThromRecordAsync(string strUserID, string strJson, string strModifyTime, object userState) {
            if ((this.InsertThromRecordOperationCompleted == null)) {
                this.InsertThromRecordOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertThromRecordOperationCompleted);
            }
            this.InvokeAsync("InsertThromRecord", new object[] {
                        strUserID,
                        strJson,
                        strModifyTime}, this.InsertThromRecordOperationCompleted, userState);
        }
        
        private void OnInsertThromRecordOperationCompleted(object arg) {
            if ((this.InsertThromRecordCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertThromRecordCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://hemodialysis.org/UpdateThromRecord", RequestNamespace="http://hemodialysis.org/", ResponseNamespace="http://hemodialysis.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpdateThromRecord(string strUserID, string strJson, string strModifyTime) {
            this.Invoke("UpdateThromRecord", new object[] {
                        strUserID,
                        strJson,
                        strModifyTime});
        }
        
        /// <remarks/>
        public void UpdateThromRecordAsync(string strUserID, string strJson, string strModifyTime) {
            this.UpdateThromRecordAsync(strUserID, strJson, strModifyTime, null);
        }
        
        /// <remarks/>
        public void UpdateThromRecordAsync(string strUserID, string strJson, string strModifyTime, object userState) {
            if ((this.UpdateThromRecordOperationCompleted == null)) {
                this.UpdateThromRecordOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateThromRecordOperationCompleted);
            }
            this.InvokeAsync("UpdateThromRecord", new object[] {
                        strUserID,
                        strJson,
                        strModifyTime}, this.UpdateThromRecordOperationCompleted, userState);
        }
        
        private void OnUpdateThromRecordOperationCompleted(object arg) {
            if ((this.UpdateThromRecordCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateThromRecordCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://hemodialysis.org/DelThromRecord", RequestNamespace="http://hemodialysis.org/", ResponseNamespace="http://hemodialysis.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DelThromRecord(string strUserID, string strThrombolysisNo, string strSub2ID, string strModifyTime) {
            this.Invoke("DelThromRecord", new object[] {
                        strUserID,
                        strThrombolysisNo,
                        strSub2ID,
                        strModifyTime});
        }
        
        /// <remarks/>
        public void DelThromRecordAsync(string strUserID, string strThrombolysisNo, string strSub2ID, string strModifyTime) {
            this.DelThromRecordAsync(strUserID, strThrombolysisNo, strSub2ID, strModifyTime, null);
        }
        
        /// <remarks/>
        public void DelThromRecordAsync(string strUserID, string strThrombolysisNo, string strSub2ID, string strModifyTime, object userState) {
            if ((this.DelThromRecordOperationCompleted == null)) {
                this.DelThromRecordOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDelThromRecordOperationCompleted);
            }
            this.InvokeAsync("DelThromRecord", new object[] {
                        strUserID,
                        strThrombolysisNo,
                        strSub2ID,
                        strModifyTime}, this.DelThromRecordOperationCompleted, userState);
        }
        
        private void OnDelThromRecordOperationCompleted(object arg) {
            if ((this.DelThromRecordCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DelThromRecordCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://hemodialysis.org/InsertThromMaterial", RequestNamespace="http://hemodialysis.org/", ResponseNamespace="http://hemodialysis.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void InsertThromMaterial(string strUserID, string strThrombolysisNo, string strMaterialID, string strItemClass, string strDutyNurse, string strModifyTime) {
            this.Invoke("InsertThromMaterial", new object[] {
                        strUserID,
                        strThrombolysisNo,
                        strMaterialID,
                        strItemClass,
                        strDutyNurse,
                        strModifyTime});
        }
        
        /// <remarks/>
        public void InsertThromMaterialAsync(string strUserID, string strThrombolysisNo, string strMaterialID, string strItemClass, string strDutyNurse, string strModifyTime) {
            this.InsertThromMaterialAsync(strUserID, strThrombolysisNo, strMaterialID, strItemClass, strDutyNurse, strModifyTime, null);
        }
        
        /// <remarks/>
        public void InsertThromMaterialAsync(string strUserID, string strThrombolysisNo, string strMaterialID, string strItemClass, string strDutyNurse, string strModifyTime, object userState) {
            if ((this.InsertThromMaterialOperationCompleted == null)) {
                this.InsertThromMaterialOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertThromMaterialOperationCompleted);
            }
            this.InvokeAsync("InsertThromMaterial", new object[] {
                        strUserID,
                        strThrombolysisNo,
                        strMaterialID,
                        strItemClass,
                        strDutyNurse,
                        strModifyTime}, this.InsertThromMaterialOperationCompleted, userState);
        }
        
        private void OnInsertThromMaterialOperationCompleted(object arg) {
            if ((this.InsertThromMaterialCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertThromMaterialCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://hemodialysis.org/UpdateThromMaterial", RequestNamespace="http://hemodialysis.org/", ResponseNamespace="http://hemodialysis.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpdateThromMaterial(string strUserID, string strJson, string strModifyTime) {
            this.Invoke("UpdateThromMaterial", new object[] {
                        strUserID,
                        strJson,
                        strModifyTime});
        }
        
        /// <remarks/>
        public void UpdateThromMaterialAsync(string strUserID, string strJson, string strModifyTime) {
            this.UpdateThromMaterialAsync(strUserID, strJson, strModifyTime, null);
        }
        
        /// <remarks/>
        public void UpdateThromMaterialAsync(string strUserID, string strJson, string strModifyTime, object userState) {
            if ((this.UpdateThromMaterialOperationCompleted == null)) {
                this.UpdateThromMaterialOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateThromMaterialOperationCompleted);
            }
            this.InvokeAsync("UpdateThromMaterial", new object[] {
                        strUserID,
                        strJson,
                        strModifyTime}, this.UpdateThromMaterialOperationCompleted, userState);
        }
        
        private void OnUpdateThromMaterialOperationCompleted(object arg) {
            if ((this.UpdateThromMaterialCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateThromMaterialCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://hemodialysis.org/DelThromMaterial", RequestNamespace="http://hemodialysis.org/", ResponseNamespace="http://hemodialysis.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DelThromMaterial(string strUserID, string strThrombolysisNo, string strSub3ID, string strModifyTime) {
            this.Invoke("DelThromMaterial", new object[] {
                        strUserID,
                        strThrombolysisNo,
                        strSub3ID,
                        strModifyTime});
        }
        
        /// <remarks/>
        public void DelThromMaterialAsync(string strUserID, string strThrombolysisNo, string strSub3ID, string strModifyTime) {
            this.DelThromMaterialAsync(strUserID, strThrombolysisNo, strSub3ID, strModifyTime, null);
        }
        
        /// <remarks/>
        public void DelThromMaterialAsync(string strUserID, string strThrombolysisNo, string strSub3ID, string strModifyTime, object userState) {
            if ((this.DelThromMaterialOperationCompleted == null)) {
                this.DelThromMaterialOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDelThromMaterialOperationCompleted);
            }
            this.InvokeAsync("DelThromMaterial", new object[] {
                        strUserID,
                        strThrombolysisNo,
                        strSub3ID,
                        strModifyTime}, this.DelThromMaterialOperationCompleted, userState);
        }
        
        private void OnDelThromMaterialOperationCompleted(object arg) {
            if ((this.DelThromMaterialCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DelThromMaterialCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://hemodialysis.org/GetPlasmapheresisPatientList", RequestNamespace="http://hemodialysis.org/", ResponseNamespace="http://hemodialysis.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void GetPlasmapheresisPatientList(string strUserID, string strDate) {
            this.Invoke("GetPlasmapheresisPatientList", new object[] {
                        strUserID,
                        strDate});
        }
        
        /// <remarks/>
        public void GetPlasmapheresisPatientListAsync(string strUserID, string strDate) {
            this.GetPlasmapheresisPatientListAsync(strUserID, strDate, null);
        }
        
        /// <remarks/>
        public void GetPlasmapheresisPatientListAsync(string strUserID, string strDate, object userState) {
            if ((this.GetPlasmapheresisPatientListOperationCompleted == null)) {
                this.GetPlasmapheresisPatientListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPlasmapheresisPatientListOperationCompleted);
            }
            this.InvokeAsync("GetPlasmapheresisPatientList", new object[] {
                        strUserID,
                        strDate}, this.GetPlasmapheresisPatientListOperationCompleted, userState);
        }
        
        private void OnGetPlasmapheresisPatientListOperationCompleted(object arg) {
            if ((this.GetPlasmapheresisPatientListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPlasmapheresisPatientListCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://hemodialysis.org/GetNoPlasmapheresisPatientList", RequestNamespace="http://hemodialysis.org/", ResponseNamespace="http://hemodialysis.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void GetNoPlasmapheresisPatientList(string strUserID, string strDate, string strPatientName, string strPatientCaseNo) {
            this.Invoke("GetNoPlasmapheresisPatientList", new object[] {
                        strUserID,
                        strDate,
                        strPatientName,
                        strPatientCaseNo});
        }
        
        /// <remarks/>
        public void GetNoPlasmapheresisPatientListAsync(string strUserID, string strDate, string strPatientName, string strPatientCaseNo) {
            this.GetNoPlasmapheresisPatientListAsync(strUserID, strDate, strPatientName, strPatientCaseNo, null);
        }
        
        /// <remarks/>
        public void GetNoPlasmapheresisPatientListAsync(string strUserID, string strDate, string strPatientName, string strPatientCaseNo, object userState) {
            if ((this.GetNoPlasmapheresisPatientListOperationCompleted == null)) {
                this.GetNoPlasmapheresisPatientListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetNoPlasmapheresisPatientListOperationCompleted);
            }
            this.InvokeAsync("GetNoPlasmapheresisPatientList", new object[] {
                        strUserID,
                        strDate,
                        strPatientName,
                        strPatientCaseNo}, this.GetNoPlasmapheresisPatientListOperationCompleted, userState);
        }
        
        private void OnGetNoPlasmapheresisPatientListOperationCompleted(object arg) {
            if ((this.GetNoPlasmapheresisPatientListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetNoPlasmapheresisPatientListCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://hemodialysis.org/GetDefaultPlasmapheresisDataByQrcode", RequestNamespace="http://hemodialysis.org/", ResponseNamespace="http://hemodialysis.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void GetDefaultPlasmapheresisDataByQrcode(string strUserID, string strDate, string strCardNo) {
            this.Invoke("GetDefaultPlasmapheresisDataByQrcode", new object[] {
                        strUserID,
                        strDate,
                        strCardNo});
        }
        
        /// <remarks/>
        public void GetDefaultPlasmapheresisDataByQrcodeAsync(string strUserID, string strDate, string strCardNo) {
            this.GetDefaultPlasmapheresisDataByQrcodeAsync(strUserID, strDate, strCardNo, null);
        }
        
        /// <remarks/>
        public void GetDefaultPlasmapheresisDataByQrcodeAsync(string strUserID, string strDate, string strCardNo, object userState) {
            if ((this.GetDefaultPlasmapheresisDataByQrcodeOperationCompleted == null)) {
                this.GetDefaultPlasmapheresisDataByQrcodeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDefaultPlasmapheresisDataByQrcodeOperationCompleted);
            }
            this.InvokeAsync("GetDefaultPlasmapheresisDataByQrcode", new object[] {
                        strUserID,
                        strDate,
                        strCardNo}, this.GetDefaultPlasmapheresisDataByQrcodeOperationCompleted, userState);
        }
        
        private void OnGetDefaultPlasmapheresisDataByQrcodeOperationCompleted(object arg) {
            if ((this.GetDefaultPlasmapheresisDataByQrcodeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDefaultPlasmapheresisDataByQrcodeCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://hemodialysis.org/GetDefaultPlasmapheresisData", RequestNamespace="http://hemodialysis.org/", ResponseNamespace="http://hemodialysis.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void GetDefaultPlasmapheresisData(string strUserID, string strPatientID, string strDate) {
            this.Invoke("GetDefaultPlasmapheresisData", new object[] {
                        strUserID,
                        strPatientID,
                        strDate});
        }
        
        /// <remarks/>
        public void GetDefaultPlasmapheresisDataAsync(string strUserID, string strPatientID, string strDate) {
            this.GetDefaultPlasmapheresisDataAsync(strUserID, strPatientID, strDate, null);
        }
        
        /// <remarks/>
        public void GetDefaultPlasmapheresisDataAsync(string strUserID, string strPatientID, string strDate, object userState) {
            if ((this.GetDefaultPlasmapheresisDataOperationCompleted == null)) {
                this.GetDefaultPlasmapheresisDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDefaultPlasmapheresisDataOperationCompleted);
            }
            this.InvokeAsync("GetDefaultPlasmapheresisData", new object[] {
                        strUserID,
                        strPatientID,
                        strDate}, this.GetDefaultPlasmapheresisDataOperationCompleted, userState);
        }
        
        private void OnGetDefaultPlasmapheresisDataOperationCompleted(object arg) {
            if ((this.GetDefaultPlasmapheresisDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDefaultPlasmapheresisDataCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://hemodialysis.org/GetspecifiedPlasmapheresisData", RequestNamespace="http://hemodialysis.org/", ResponseNamespace="http://hemodialysis.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void GetspecifiedPlasmapheresisData(string strUserID, string strPatientID, string strDate, string strPlasmapheresisNo) {
            this.Invoke("GetspecifiedPlasmapheresisData", new object[] {
                        strUserID,
                        strPatientID,
                        strDate,
                        strPlasmapheresisNo});
        }
        
        /// <remarks/>
        public void GetspecifiedPlasmapheresisDataAsync(string strUserID, string strPatientID, string strDate, string strPlasmapheresisNo) {
            this.GetspecifiedPlasmapheresisDataAsync(strUserID, strPatientID, strDate, strPlasmapheresisNo, null);
        }
        
        /// <remarks/>
        public void GetspecifiedPlasmapheresisDataAsync(string strUserID, string strPatientID, string strDate, string strPlasmapheresisNo, object userState) {
            if ((this.GetspecifiedPlasmapheresisDataOperationCompleted == null)) {
                this.GetspecifiedPlasmapheresisDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetspecifiedPlasmapheresisDataOperationCompleted);
            }
            this.InvokeAsync("GetspecifiedPlasmapheresisData", new object[] {
                        strUserID,
                        strPatientID,
                        strDate,
                        strPlasmapheresisNo}, this.GetspecifiedPlasmapheresisDataOperationCompleted, userState);
        }
        
        private void OnGetspecifiedPlasmapheresisDataOperationCompleted(object arg) {
            if ((this.GetspecifiedPlasmapheresisDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetspecifiedPlasmapheresisDataCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://hemodialysis.org/InsertAddPlasmapheresisData", RequestNamespace="http://hemodialysis.org/", ResponseNamespace="http://hemodialysis.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void InsertAddPlasmapheresisData(string strUserID, string strPatientID, string strDate) {
            this.Invoke("InsertAddPlasmapheresisData", new object[] {
                        strUserID,
                        strPatientID,
                        strDate});
        }
        
        /// <remarks/>
        public void InsertAddPlasmapheresisDataAsync(string strUserID, string strPatientID, string strDate) {
            this.InsertAddPlasmapheresisDataAsync(strUserID, strPatientID, strDate, null);
        }
        
        /// <remarks/>
        public void InsertAddPlasmapheresisDataAsync(string strUserID, string strPatientID, string strDate, object userState) {
            if ((this.InsertAddPlasmapheresisDataOperationCompleted == null)) {
                this.InsertAddPlasmapheresisDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertAddPlasmapheresisDataOperationCompleted);
            }
            this.InvokeAsync("InsertAddPlasmapheresisData", new object[] {
                        strUserID,
                        strPatientID,
                        strDate}, this.InsertAddPlasmapheresisDataOperationCompleted, userState);
        }
        
        private void OnInsertAddPlasmapheresisDataOperationCompleted(object arg) {
            if ((this.InsertAddPlasmapheresisDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertAddPlasmapheresisDataCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://hemodialysis.org/UpdatePlasmapheresisRecordInfo", RequestNamespace="http://hemodialysis.org/", ResponseNamespace="http://hemodialysis.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpdatePlasmapheresisRecordInfo(string strUserID, string strJson) {
            this.Invoke("UpdatePlasmapheresisRecordInfo", new object[] {
                        strUserID,
                        strJson});
        }
        
        /// <remarks/>
        public void UpdatePlasmapheresisRecordInfoAsync(string strUserID, string strJson) {
            this.UpdatePlasmapheresisRecordInfoAsync(strUserID, strJson, null);
        }
        
        /// <remarks/>
        public void UpdatePlasmapheresisRecordInfoAsync(string strUserID, string strJson, object userState) {
            if ((this.UpdatePlasmapheresisRecordInfoOperationCompleted == null)) {
                this.UpdatePlasmapheresisRecordInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdatePlasmapheresisRecordInfoOperationCompleted);
            }
            this.InvokeAsync("UpdatePlasmapheresisRecordInfo", new object[] {
                        strUserID,
                        strJson}, this.UpdatePlasmapheresisRecordInfoOperationCompleted, userState);
        }
        
        private void OnUpdatePlasmapheresisRecordInfoOperationCompleted(object arg) {
            if ((this.UpdatePlasmapheresisRecordInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdatePlasmapheresisRecordInfoCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://hemodialysis.org/DeleteAllPlasmapheresisInfo", RequestNamespace="http://hemodialysis.org/", ResponseNamespace="http://hemodialysis.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteAllPlasmapheresisInfo(string strUserId, string strPlasmapheresisNo, string strModifyTime) {
            this.Invoke("DeleteAllPlasmapheresisInfo", new object[] {
                        strUserId,
                        strPlasmapheresisNo,
                        strModifyTime});
        }
        
        /// <remarks/>
        public void DeleteAllPlasmapheresisInfoAsync(string strUserId, string strPlasmapheresisNo, string strModifyTime) {
            this.DeleteAllPlasmapheresisInfoAsync(strUserId, strPlasmapheresisNo, strModifyTime, null);
        }
        
        /// <remarks/>
        public void DeleteAllPlasmapheresisInfoAsync(string strUserId, string strPlasmapheresisNo, string strModifyTime, object userState) {
            if ((this.DeleteAllPlasmapheresisInfoOperationCompleted == null)) {
                this.DeleteAllPlasmapheresisInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteAllPlasmapheresisInfoOperationCompleted);
            }
            this.InvokeAsync("DeleteAllPlasmapheresisInfo", new object[] {
                        strUserId,
                        strPlasmapheresisNo,
                        strModifyTime}, this.DeleteAllPlasmapheresisInfoOperationCompleted, userState);
        }
        
        private void OnDeleteAllPlasmapheresisInfoOperationCompleted(object arg) {
            if ((this.DeleteAllPlasmapheresisInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteAllPlasmapheresisInfoCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://hemodialysis.org/CancelPlasmapheresisArchive", RequestNamespace="http://hemodialysis.org/", ResponseNamespace="http://hemodialysis.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void CancelPlasmapheresisArchive(string strUserID, string strPlasmapheresisNo, string strModifyTime) {
            this.Invoke("CancelPlasmapheresisArchive", new object[] {
                        strUserID,
                        strPlasmapheresisNo,
                        strModifyTime});
        }
        
        /// <remarks/>
        public void CancelPlasmapheresisArchiveAsync(string strUserID, string strPlasmapheresisNo, string strModifyTime) {
            this.CancelPlasmapheresisArchiveAsync(strUserID, strPlasmapheresisNo, strModifyTime, null);
        }
        
        /// <remarks/>
        public void CancelPlasmapheresisArchiveAsync(string strUserID, string strPlasmapheresisNo, string strModifyTime, object userState) {
            if ((this.CancelPlasmapheresisArchiveOperationCompleted == null)) {
                this.CancelPlasmapheresisArchiveOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCancelPlasmapheresisArchiveOperationCompleted);
            }
            this.InvokeAsync("CancelPlasmapheresisArchive", new object[] {
                        strUserID,
                        strPlasmapheresisNo,
                        strModifyTime}, this.CancelPlasmapheresisArchiveOperationCompleted, userState);
        }
        
        private void OnCancelPlasmapheresisArchiveOperationCompleted(object arg) {
            if ((this.CancelPlasmapheresisArchiveCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CancelPlasmapheresisArchiveCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://hemodialysis.org/InsertPlasmapheresisAdvice", RequestNamespace="http://hemodialysis.org/", ResponseNamespace="http://hemodialysis.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void InsertPlasmapheresisAdvice(string strUserID, string strJson, string strModifyTime) {
            this.Invoke("InsertPlasmapheresisAdvice", new object[] {
                        strUserID,
                        strJson,
                        strModifyTime});
        }
        
        /// <remarks/>
        public void InsertPlasmapheresisAdviceAsync(string strUserID, string strJson, string strModifyTime) {
            this.InsertPlasmapheresisAdviceAsync(strUserID, strJson, strModifyTime, null);
        }
        
        /// <remarks/>
        public void InsertPlasmapheresisAdviceAsync(string strUserID, string strJson, string strModifyTime, object userState) {
            if ((this.InsertPlasmapheresisAdviceOperationCompleted == null)) {
                this.InsertPlasmapheresisAdviceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertPlasmapheresisAdviceOperationCompleted);
            }
            this.InvokeAsync("InsertPlasmapheresisAdvice", new object[] {
                        strUserID,
                        strJson,
                        strModifyTime}, this.InsertPlasmapheresisAdviceOperationCompleted, userState);
        }
        
        private void OnInsertPlasmapheresisAdviceOperationCompleted(object arg) {
            if ((this.InsertPlasmapheresisAdviceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertPlasmapheresisAdviceCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://hemodialysis.org/UpPlasmapheresisAdvice", RequestNamespace="http://hemodialysis.org/", ResponseNamespace="http://hemodialysis.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpPlasmapheresisAdvice(string strUserID, string strJson, string strModifyTime) {
            this.Invoke("UpPlasmapheresisAdvice", new object[] {
                        strUserID,
                        strJson,
                        strModifyTime});
        }
        
        /// <remarks/>
        public void UpPlasmapheresisAdviceAsync(string strUserID, string strJson, string strModifyTime) {
            this.UpPlasmapheresisAdviceAsync(strUserID, strJson, strModifyTime, null);
        }
        
        /// <remarks/>
        public void UpPlasmapheresisAdviceAsync(string strUserID, string strJson, string strModifyTime, object userState) {
            if ((this.UpPlasmapheresisAdviceOperationCompleted == null)) {
                this.UpPlasmapheresisAdviceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpPlasmapheresisAdviceOperationCompleted);
            }
            this.InvokeAsync("UpPlasmapheresisAdvice", new object[] {
                        strUserID,
                        strJson,
                        strModifyTime}, this.UpPlasmapheresisAdviceOperationCompleted, userState);
        }
        
        private void OnUpPlasmapheresisAdviceOperationCompleted(object arg) {
            if ((this.UpPlasmapheresisAdviceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpPlasmapheresisAdviceCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://hemodialysis.org/DelPlasmapheresisAdvice", RequestNamespace="http://hemodialysis.org/", ResponseNamespace="http://hemodialysis.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DelPlasmapheresisAdvice(string strUserID, string strPlasmapheresisNo, string strSub1ID, string strModifyTime) {
            this.Invoke("DelPlasmapheresisAdvice", new object[] {
                        strUserID,
                        strPlasmapheresisNo,
                        strSub1ID,
                        strModifyTime});
        }
        
        /// <remarks/>
        public void DelPlasmapheresisAdviceAsync(string strUserID, string strPlasmapheresisNo, string strSub1ID, string strModifyTime) {
            this.DelPlasmapheresisAdviceAsync(strUserID, strPlasmapheresisNo, strSub1ID, strModifyTime, null);
        }
        
        /// <remarks/>
        public void DelPlasmapheresisAdviceAsync(string strUserID, string strPlasmapheresisNo, string strSub1ID, string strModifyTime, object userState) {
            if ((this.DelPlasmapheresisAdviceOperationCompleted == null)) {
                this.DelPlasmapheresisAdviceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDelPlasmapheresisAdviceOperationCompleted);
            }
            this.InvokeAsync("DelPlasmapheresisAdvice", new object[] {
                        strUserID,
                        strPlasmapheresisNo,
                        strSub1ID,
                        strModifyTime}, this.DelPlasmapheresisAdviceOperationCompleted, userState);
        }
        
        private void OnDelPlasmapheresisAdviceOperationCompleted(object arg) {
            if ((this.DelPlasmapheresisAdviceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DelPlasmapheresisAdviceCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://hemodialysis.org/RunPlasmapheresisAdvice", RequestNamespace="http://hemodialysis.org/", ResponseNamespace="http://hemodialysis.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void RunPlasmapheresisAdvice(string strUserID, string strPlasmapheresisNo, string strRelevantSubjectID, string strUserName, string strNurserName, string strDate, string strModifyTime) {
            this.Invoke("RunPlasmapheresisAdvice", new object[] {
                        strUserID,
                        strPlasmapheresisNo,
                        strRelevantSubjectID,
                        strUserName,
                        strNurserName,
                        strDate,
                        strModifyTime});
        }
        
        /// <remarks/>
        public void RunPlasmapheresisAdviceAsync(string strUserID, string strPlasmapheresisNo, string strRelevantSubjectID, string strUserName, string strNurserName, string strDate, string strModifyTime) {
            this.RunPlasmapheresisAdviceAsync(strUserID, strPlasmapheresisNo, strRelevantSubjectID, strUserName, strNurserName, strDate, strModifyTime, null);
        }
        
        /// <remarks/>
        public void RunPlasmapheresisAdviceAsync(string strUserID, string strPlasmapheresisNo, string strRelevantSubjectID, string strUserName, string strNurserName, string strDate, string strModifyTime, object userState) {
            if ((this.RunPlasmapheresisAdviceOperationCompleted == null)) {
                this.RunPlasmapheresisAdviceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRunPlasmapheresisAdviceOperationCompleted);
            }
            this.InvokeAsync("RunPlasmapheresisAdvice", new object[] {
                        strUserID,
                        strPlasmapheresisNo,
                        strRelevantSubjectID,
                        strUserName,
                        strNurserName,
                        strDate,
                        strModifyTime}, this.RunPlasmapheresisAdviceOperationCompleted, userState);
        }
        
        private void OnRunPlasmapheresisAdviceOperationCompleted(object arg) {
            if ((this.RunPlasmapheresisAdviceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RunPlasmapheresisAdviceCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://hemodialysis.org/CancelPlasmapheresisAdvice", RequestNamespace="http://hemodialysis.org/", ResponseNamespace="http://hemodialysis.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void CancelPlasmapheresisAdvice(string strUserID, string strPlasmapheresisNo, string strRelevantSubjectID, string strModifyTime) {
            this.Invoke("CancelPlasmapheresisAdvice", new object[] {
                        strUserID,
                        strPlasmapheresisNo,
                        strRelevantSubjectID,
                        strModifyTime});
        }
        
        /// <remarks/>
        public void CancelPlasmapheresisAdviceAsync(string strUserID, string strPlasmapheresisNo, string strRelevantSubjectID, string strModifyTime) {
            this.CancelPlasmapheresisAdviceAsync(strUserID, strPlasmapheresisNo, strRelevantSubjectID, strModifyTime, null);
        }
        
        /// <remarks/>
        public void CancelPlasmapheresisAdviceAsync(string strUserID, string strPlasmapheresisNo, string strRelevantSubjectID, string strModifyTime, object userState) {
            if ((this.CancelPlasmapheresisAdviceOperationCompleted == null)) {
                this.CancelPlasmapheresisAdviceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCancelPlasmapheresisAdviceOperationCompleted);
            }
            this.InvokeAsync("CancelPlasmapheresisAdvice", new object[] {
                        strUserID,
                        strPlasmapheresisNo,
                        strRelevantSubjectID,
                        strModifyTime}, this.CancelPlasmapheresisAdviceOperationCompleted, userState);
        }
        
        private void OnCancelPlasmapheresisAdviceOperationCompleted(object arg) {
            if ((this.CancelPlasmapheresisAdviceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CancelPlasmapheresisAdviceCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://hemodialysis.org/UpdateSignatureForAllPlasmapheresisAdvice", RequestNamespace="http://hemodialysis.org/", ResponseNamespace="http://hemodialysis.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpdateSignatureForAllPlasmapheresisAdvice(string strUserID, string strPlasmapheresisNo, string strDoctorName, string strModifyTime) {
            this.Invoke("UpdateSignatureForAllPlasmapheresisAdvice", new object[] {
                        strUserID,
                        strPlasmapheresisNo,
                        strDoctorName,
                        strModifyTime});
        }
        
        /// <remarks/>
        public void UpdateSignatureForAllPlasmapheresisAdviceAsync(string strUserID, string strPlasmapheresisNo, string strDoctorName, string strModifyTime) {
            this.UpdateSignatureForAllPlasmapheresisAdviceAsync(strUserID, strPlasmapheresisNo, strDoctorName, strModifyTime, null);
        }
        
        /// <remarks/>
        public void UpdateSignatureForAllPlasmapheresisAdviceAsync(string strUserID, string strPlasmapheresisNo, string strDoctorName, string strModifyTime, object userState) {
            if ((this.UpdateSignatureForAllPlasmapheresisAdviceOperationCompleted == null)) {
                this.UpdateSignatureForAllPlasmapheresisAdviceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateSignatureForAllPlasmapheresisAdviceOperationCompleted);
            }
            this.InvokeAsync("UpdateSignatureForAllPlasmapheresisAdvice", new object[] {
                        strUserID,
                        strPlasmapheresisNo,
                        strDoctorName,
                        strModifyTime}, this.UpdateSignatureForAllPlasmapheresisAdviceOperationCompleted, userState);
        }
        
        private void OnUpdateSignatureForAllPlasmapheresisAdviceOperationCompleted(object arg) {
            if ((this.UpdateSignatureForAllPlasmapheresisAdviceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateSignatureForAllPlasmapheresisAdviceCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://hemodialysis.org/InsertPlasmapheresisRecord", RequestNamespace="http://hemodialysis.org/", ResponseNamespace="http://hemodialysis.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void InsertPlasmapheresisRecord(string strUserID, string strJson, string strModifyTime) {
            this.Invoke("InsertPlasmapheresisRecord", new object[] {
                        strUserID,
                        strJson,
                        strModifyTime});
        }
        
        /// <remarks/>
        public void InsertPlasmapheresisRecordAsync(string strUserID, string strJson, string strModifyTime) {
            this.InsertPlasmapheresisRecordAsync(strUserID, strJson, strModifyTime, null);
        }
        
        /// <remarks/>
        public void InsertPlasmapheresisRecordAsync(string strUserID, string strJson, string strModifyTime, object userState) {
            if ((this.InsertPlasmapheresisRecordOperationCompleted == null)) {
                this.InsertPlasmapheresisRecordOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertPlasmapheresisRecordOperationCompleted);
            }
            this.InvokeAsync("InsertPlasmapheresisRecord", new object[] {
                        strUserID,
                        strJson,
                        strModifyTime}, this.InsertPlasmapheresisRecordOperationCompleted, userState);
        }
        
        private void OnInsertPlasmapheresisRecordOperationCompleted(object arg) {
            if ((this.InsertPlasmapheresisRecordCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertPlasmapheresisRecordCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://hemodialysis.org/UpdatePlasmapheresisRecord", RequestNamespace="http://hemodialysis.org/", ResponseNamespace="http://hemodialysis.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpdatePlasmapheresisRecord(string strUserID, string strJson, string strModifyTime) {
            this.Invoke("UpdatePlasmapheresisRecord", new object[] {
                        strUserID,
                        strJson,
                        strModifyTime});
        }
        
        /// <remarks/>
        public void UpdatePlasmapheresisRecordAsync(string strUserID, string strJson, string strModifyTime) {
            this.UpdatePlasmapheresisRecordAsync(strUserID, strJson, strModifyTime, null);
        }
        
        /// <remarks/>
        public void UpdatePlasmapheresisRecordAsync(string strUserID, string strJson, string strModifyTime, object userState) {
            if ((this.UpdatePlasmapheresisRecordOperationCompleted == null)) {
                this.UpdatePlasmapheresisRecordOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdatePlasmapheresisRecordOperationCompleted);
            }
            this.InvokeAsync("UpdatePlasmapheresisRecord", new object[] {
                        strUserID,
                        strJson,
                        strModifyTime}, this.UpdatePlasmapheresisRecordOperationCompleted, userState);
        }
        
        private void OnUpdatePlasmapheresisRecordOperationCompleted(object arg) {
            if ((this.UpdatePlasmapheresisRecordCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdatePlasmapheresisRecordCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://hemodialysis.org/DelPlasmapheresisRecord", RequestNamespace="http://hemodialysis.org/", ResponseNamespace="http://hemodialysis.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DelPlasmapheresisRecord(string strUserID, string strPlasmapheresisNo, string strSub2ID, string strModifyTime) {
            this.Invoke("DelPlasmapheresisRecord", new object[] {
                        strUserID,
                        strPlasmapheresisNo,
                        strSub2ID,
                        strModifyTime});
        }
        
        /// <remarks/>
        public void DelPlasmapheresisRecordAsync(string strUserID, string strPlasmapheresisNo, string strSub2ID, string strModifyTime) {
            this.DelPlasmapheresisRecordAsync(strUserID, strPlasmapheresisNo, strSub2ID, strModifyTime, null);
        }
        
        /// <remarks/>
        public void DelPlasmapheresisRecordAsync(string strUserID, string strPlasmapheresisNo, string strSub2ID, string strModifyTime, object userState) {
            if ((this.DelPlasmapheresisRecordOperationCompleted == null)) {
                this.DelPlasmapheresisRecordOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDelPlasmapheresisRecordOperationCompleted);
            }
            this.InvokeAsync("DelPlasmapheresisRecord", new object[] {
                        strUserID,
                        strPlasmapheresisNo,
                        strSub2ID,
                        strModifyTime}, this.DelPlasmapheresisRecordOperationCompleted, userState);
        }
        
        private void OnDelPlasmapheresisRecordOperationCompleted(object arg) {
            if ((this.DelPlasmapheresisRecordCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DelPlasmapheresisRecordCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://hemodialysis.org/InsertPlasmapheresisMaterial", RequestNamespace="http://hemodialysis.org/", ResponseNamespace="http://hemodialysis.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void InsertPlasmapheresisMaterial(string strUserID, string strPlasmapheresisNo, string strMaterialID, string strItemClass, string strDutyNurse, string strModifyTime) {
            this.Invoke("InsertPlasmapheresisMaterial", new object[] {
                        strUserID,
                        strPlasmapheresisNo,
                        strMaterialID,
                        strItemClass,
                        strDutyNurse,
                        strModifyTime});
        }
        
        /// <remarks/>
        public void InsertPlasmapheresisMaterialAsync(string strUserID, string strPlasmapheresisNo, string strMaterialID, string strItemClass, string strDutyNurse, string strModifyTime) {
            this.InsertPlasmapheresisMaterialAsync(strUserID, strPlasmapheresisNo, strMaterialID, strItemClass, strDutyNurse, strModifyTime, null);
        }
        
        /// <remarks/>
        public void InsertPlasmapheresisMaterialAsync(string strUserID, string strPlasmapheresisNo, string strMaterialID, string strItemClass, string strDutyNurse, string strModifyTime, object userState) {
            if ((this.InsertPlasmapheresisMaterialOperationCompleted == null)) {
                this.InsertPlasmapheresisMaterialOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertPlasmapheresisMaterialOperationCompleted);
            }
            this.InvokeAsync("InsertPlasmapheresisMaterial", new object[] {
                        strUserID,
                        strPlasmapheresisNo,
                        strMaterialID,
                        strItemClass,
                        strDutyNurse,
                        strModifyTime}, this.InsertPlasmapheresisMaterialOperationCompleted, userState);
        }
        
        private void OnInsertPlasmapheresisMaterialOperationCompleted(object arg) {
            if ((this.InsertPlasmapheresisMaterialCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertPlasmapheresisMaterialCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://hemodialysis.org/UpdatePlasmapheresisMaterial", RequestNamespace="http://hemodialysis.org/", ResponseNamespace="http://hemodialysis.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpdatePlasmapheresisMaterial(string strUserID, string strJson, string strModifyTime) {
            this.Invoke("UpdatePlasmapheresisMaterial", new object[] {
                        strUserID,
                        strJson,
                        strModifyTime});
        }
        
        /// <remarks/>
        public void UpdatePlasmapheresisMaterialAsync(string strUserID, string strJson, string strModifyTime) {
            this.UpdatePlasmapheresisMaterialAsync(strUserID, strJson, strModifyTime, null);
        }
        
        /// <remarks/>
        public void UpdatePlasmapheresisMaterialAsync(string strUserID, string strJson, string strModifyTime, object userState) {
            if ((this.UpdatePlasmapheresisMaterialOperationCompleted == null)) {
                this.UpdatePlasmapheresisMaterialOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdatePlasmapheresisMaterialOperationCompleted);
            }
            this.InvokeAsync("UpdatePlasmapheresisMaterial", new object[] {
                        strUserID,
                        strJson,
                        strModifyTime}, this.UpdatePlasmapheresisMaterialOperationCompleted, userState);
        }
        
        private void OnUpdatePlasmapheresisMaterialOperationCompleted(object arg) {
            if ((this.UpdatePlasmapheresisMaterialCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdatePlasmapheresisMaterialCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://hemodialysis.org/DelPlasmapheresisMaterial", RequestNamespace="http://hemodialysis.org/", ResponseNamespace="http://hemodialysis.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DelPlasmapheresisMaterial(string strUserID, string strPlasmapheresisNo, string strSub3ID, string strModifyTime) {
            this.Invoke("DelPlasmapheresisMaterial", new object[] {
                        strUserID,
                        strPlasmapheresisNo,
                        strSub3ID,
                        strModifyTime});
        }
        
        /// <remarks/>
        public void DelPlasmapheresisMaterialAsync(string strUserID, string strPlasmapheresisNo, string strSub3ID, string strModifyTime) {
            this.DelPlasmapheresisMaterialAsync(strUserID, strPlasmapheresisNo, strSub3ID, strModifyTime, null);
        }
        
        /// <remarks/>
        public void DelPlasmapheresisMaterialAsync(string strUserID, string strPlasmapheresisNo, string strSub3ID, string strModifyTime, object userState) {
            if ((this.DelPlasmapheresisMaterialOperationCompleted == null)) {
                this.DelPlasmapheresisMaterialOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDelPlasmapheresisMaterialOperationCompleted);
            }
            this.InvokeAsync("DelPlasmapheresisMaterial", new object[] {
                        strUserID,
                        strPlasmapheresisNo,
                        strSub3ID,
                        strModifyTime}, this.DelPlasmapheresisMaterialOperationCompleted, userState);
        }
        
        private void OnDelPlasmapheresisMaterialOperationCompleted(object arg) {
            if ((this.DelPlasmapheresisMaterialCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DelPlasmapheresisMaterialCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://hemodialysis.org/UploadFiles", RequestNamespace="http://hemodialysis.org/", ResponseNamespace="http://hemodialysis.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UploadFiles([System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] pData, string pFileName) {
            this.Invoke("UploadFiles", new object[] {
                        pData,
                        pFileName});
        }
        
        /// <remarks/>
        public void UploadFilesAsync(byte[] pData, string pFileName) {
            this.UploadFilesAsync(pData, pFileName, null);
        }
        
        /// <remarks/>
        public void UploadFilesAsync(byte[] pData, string pFileName, object userState) {
            if ((this.UploadFilesOperationCompleted == null)) {
                this.UploadFilesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUploadFilesOperationCompleted);
            }
            this.InvokeAsync("UploadFiles", new object[] {
                        pData,
                        pFileName}, this.UploadFilesOperationCompleted, userState);
        }
        
        private void OnUploadFilesOperationCompleted(object arg) {
            if ((this.UploadFilesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UploadFilesCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://hemodialysis.org/UploadFilesForPCUpgrading", RequestNamespace="http://hemodialysis.org/", ResponseNamespace="http://hemodialysis.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UploadFilesForPCUpgrading([System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] pData, string pFileName) {
            this.Invoke("UploadFilesForPCUpgrading", new object[] {
                        pData,
                        pFileName});
        }
        
        /// <remarks/>
        public void UploadFilesForPCUpgradingAsync(byte[] pData, string pFileName) {
            this.UploadFilesForPCUpgradingAsync(pData, pFileName, null);
        }
        
        /// <remarks/>
        public void UploadFilesForPCUpgradingAsync(byte[] pData, string pFileName, object userState) {
            if ((this.UploadFilesForPCUpgradingOperationCompleted == null)) {
                this.UploadFilesForPCUpgradingOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUploadFilesForPCUpgradingOperationCompleted);
            }
            this.InvokeAsync("UploadFilesForPCUpgrading", new object[] {
                        pData,
                        pFileName}, this.UploadFilesForPCUpgradingOperationCompleted, userState);
        }
        
        private void OnUploadFilesForPCUpgradingOperationCompleted(object arg) {
            if ((this.UploadFilesForPCUpgradingCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UploadFilesForPCUpgradingCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://hemodialysis.org/UploadCommonFiles", RequestNamespace="http://hemodialysis.org/", ResponseNamespace="http://hemodialysis.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool UploadCommonFiles([System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] pData, string strFileName, string strDirectoryInfo) {
            object[] results = this.Invoke("UploadCommonFiles", new object[] {
                        pData,
                        strFileName,
                        strDirectoryInfo});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void UploadCommonFilesAsync(byte[] pData, string strFileName, string strDirectoryInfo) {
            this.UploadCommonFilesAsync(pData, strFileName, strDirectoryInfo, null);
        }
        
        /// <remarks/>
        public void UploadCommonFilesAsync(byte[] pData, string strFileName, string strDirectoryInfo, object userState) {
            if ((this.UploadCommonFilesOperationCompleted == null)) {
                this.UploadCommonFilesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUploadCommonFilesOperationCompleted);
            }
            this.InvokeAsync("UploadCommonFiles", new object[] {
                        pData,
                        strFileName,
                        strDirectoryInfo}, this.UploadCommonFilesOperationCompleted, userState);
        }
        
        private void OnUploadCommonFilesOperationCompleted(object arg) {
            if ((this.UploadCommonFilesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UploadCommonFilesCompleted(this, new UploadCommonFilesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://hemodialysis.org/UploadLogFileFromAndroid", RequestNamespace="http://hemodialysis.org/", ResponseNamespace="http://hemodialysis.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UploadLogFileFromAndroid(string vsBase64String, string vsFileName, string vsMacAddress) {
            object[] results = this.Invoke("UploadLogFileFromAndroid", new object[] {
                        vsBase64String,
                        vsFileName,
                        vsMacAddress});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UploadLogFileFromAndroidAsync(string vsBase64String, string vsFileName, string vsMacAddress) {
            this.UploadLogFileFromAndroidAsync(vsBase64String, vsFileName, vsMacAddress, null);
        }
        
        /// <remarks/>
        public void UploadLogFileFromAndroidAsync(string vsBase64String, string vsFileName, string vsMacAddress, object userState) {
            if ((this.UploadLogFileFromAndroidOperationCompleted == null)) {
                this.UploadLogFileFromAndroidOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUploadLogFileFromAndroidOperationCompleted);
            }
            this.InvokeAsync("UploadLogFileFromAndroid", new object[] {
                        vsBase64String,
                        vsFileName,
                        vsMacAddress}, this.UploadLogFileFromAndroidOperationCompleted, userState);
        }
        
        private void OnUploadLogFileFromAndroidOperationCompleted(object arg) {
            if ((this.UploadLogFileFromAndroidCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UploadLogFileFromAndroidCompleted(this, new UploadLogFileFromAndroidCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://hemodialysis.org/UploadLogFromAndroid", RequestNamespace="http://hemodialysis.org/", ResponseNamespace="http://hemodialysis.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UploadLogFromAndroid(string strLogJson, string strLogTimeJson, string vsMacAddress) {
            object[] results = this.Invoke("UploadLogFromAndroid", new object[] {
                        strLogJson,
                        strLogTimeJson,
                        vsMacAddress});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UploadLogFromAndroidAsync(string strLogJson, string strLogTimeJson, string vsMacAddress) {
            this.UploadLogFromAndroidAsync(strLogJson, strLogTimeJson, vsMacAddress, null);
        }
        
        /// <remarks/>
        public void UploadLogFromAndroidAsync(string strLogJson, string strLogTimeJson, string vsMacAddress, object userState) {
            if ((this.UploadLogFromAndroidOperationCompleted == null)) {
                this.UploadLogFromAndroidOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUploadLogFromAndroidOperationCompleted);
            }
            this.InvokeAsync("UploadLogFromAndroid", new object[] {
                        strLogJson,
                        strLogTimeJson,
                        vsMacAddress}, this.UploadLogFromAndroidOperationCompleted, userState);
        }
        
        private void OnUploadLogFromAndroidOperationCompleted(object arg) {
            if ((this.UploadLogFromAndroidCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UploadLogFromAndroidCompleted(this, new UploadLogFromAndroidCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://hemodialysis.org/GetApkVersions", RequestNamespace="http://hemodialysis.org/", ResponseNamespace="http://hemodialysis.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void GetApkVersions() {
            this.Invoke("GetApkVersions", new object[0]);
        }
        
        /// <remarks/>
        public void GetApkVersionsAsync() {
            this.GetApkVersionsAsync(null);
        }
        
        /// <remarks/>
        public void GetApkVersionsAsync(object userState) {
            if ((this.GetApkVersionsOperationCompleted == null)) {
                this.GetApkVersionsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetApkVersionsOperationCompleted);
            }
            this.InvokeAsync("GetApkVersions", new object[0], this.GetApkVersionsOperationCompleted, userState);
        }
        
        private void OnGetApkVersionsOperationCompleted(object arg) {
            if ((this.GetApkVersionsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetApkVersionsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://hemodialysis.org/GetApkVersionsByApktool", RequestNamespace="http://hemodialysis.org/", ResponseNamespace="http://hemodialysis.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void GetApkVersionsByApktool() {
            this.Invoke("GetApkVersionsByApktool", new object[0]);
        }
        
        /// <remarks/>
        public void GetApkVersionsByApktoolAsync() {
            this.GetApkVersionsByApktoolAsync(null);
        }
        
        /// <remarks/>
        public void GetApkVersionsByApktoolAsync(object userState) {
            if ((this.GetApkVersionsByApktoolOperationCompleted == null)) {
                this.GetApkVersionsByApktoolOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetApkVersionsByApktoolOperationCompleted);
            }
            this.InvokeAsync("GetApkVersionsByApktool", new object[0], this.GetApkVersionsByApktoolOperationCompleted, userState);
        }
        
        private void OnGetApkVersionsByApktoolOperationCompleted(object arg) {
            if ((this.GetApkVersionsByApktoolCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetApkVersionsByApktoolCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://hemodialysis.org/GetPCVersions", RequestNamespace="http://hemodialysis.org/", ResponseNamespace="http://hemodialysis.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetPCVersions() {
            object[] results = this.Invoke("GetPCVersions", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetPCVersionsAsync() {
            this.GetPCVersionsAsync(null);
        }
        
        /// <remarks/>
        public void GetPCVersionsAsync(object userState) {
            if ((this.GetPCVersionsOperationCompleted == null)) {
                this.GetPCVersionsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPCVersionsOperationCompleted);
            }
            this.InvokeAsync("GetPCVersions", new object[0], this.GetPCVersionsOperationCompleted, userState);
        }
        
        private void OnGetPCVersionsOperationCompleted(object arg) {
            if ((this.GetPCVersionsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPCVersionsCompleted(this, new GetPCVersionsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://hemodialysis.org/CheckFileMD5", RequestNamespace="http://hemodialysis.org/", ResponseNamespace="http://hemodialysis.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CheckFileMD5(string vsMD5Str) {
            object[] results = this.Invoke("CheckFileMD5", new object[] {
                        vsMD5Str});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CheckFileMD5Async(string vsMD5Str) {
            this.CheckFileMD5Async(vsMD5Str, null);
        }
        
        /// <remarks/>
        public void CheckFileMD5Async(string vsMD5Str, object userState) {
            if ((this.CheckFileMD5OperationCompleted == null)) {
                this.CheckFileMD5OperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckFileMD5OperationCompleted);
            }
            this.InvokeAsync("CheckFileMD5", new object[] {
                        vsMD5Str}, this.CheckFileMD5OperationCompleted, userState);
        }
        
        private void OnCheckFileMD5OperationCompleted(object arg) {
            if ((this.CheckFileMD5Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckFileMD5Completed(this, new CheckFileMD5CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://hemodialysis.org/CheckFileMD5ForPC", RequestNamespace="http://hemodialysis.org/", ResponseNamespace="http://hemodialysis.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CheckFileMD5ForPC(string vsMD5Str) {
            object[] results = this.Invoke("CheckFileMD5ForPC", new object[] {
                        vsMD5Str});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CheckFileMD5ForPCAsync(string vsMD5Str) {
            this.CheckFileMD5ForPCAsync(vsMD5Str, null);
        }
        
        /// <remarks/>
        public void CheckFileMD5ForPCAsync(string vsMD5Str, object userState) {
            if ((this.CheckFileMD5ForPCOperationCompleted == null)) {
                this.CheckFileMD5ForPCOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckFileMD5ForPCOperationCompleted);
            }
            this.InvokeAsync("CheckFileMD5ForPC", new object[] {
                        vsMD5Str}, this.CheckFileMD5ForPCOperationCompleted, userState);
        }
        
        private void OnCheckFileMD5ForPCOperationCompleted(object arg) {
            if ((this.CheckFileMD5ForPCCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckFileMD5ForPCCompleted(this, new CheckFileMD5ForPCCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://hemodialysis.org/UploadPatientImage", RequestNamespace="http://hemodialysis.org/", ResponseNamespace="http://hemodialysis.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UploadPatientImage(string vsBase64String, string vsFileName, string vsPatientID) {
            this.Invoke("UploadPatientImage", new object[] {
                        vsBase64String,
                        vsFileName,
                        vsPatientID});
        }
        
        /// <remarks/>
        public void UploadPatientImageAsync(string vsBase64String, string vsFileName, string vsPatientID) {
            this.UploadPatientImageAsync(vsBase64String, vsFileName, vsPatientID, null);
        }
        
        /// <remarks/>
        public void UploadPatientImageAsync(string vsBase64String, string vsFileName, string vsPatientID, object userState) {
            if ((this.UploadPatientImageOperationCompleted == null)) {
                this.UploadPatientImageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUploadPatientImageOperationCompleted);
            }
            this.InvokeAsync("UploadPatientImage", new object[] {
                        vsBase64String,
                        vsFileName,
                        vsPatientID}, this.UploadPatientImageOperationCompleted, userState);
        }
        
        private void OnUploadPatientImageOperationCompleted(object arg) {
            if ((this.UploadPatientImageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UploadPatientImageCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://hemodialysis.org/UploadVesselRoutePicture", RequestNamespace="http://hemodialysis.org/", ResponseNamespace="http://hemodialysis.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UploadVesselRoutePicture(string strBase64String, string strPatientID, string strRecordNo, string strDescription) {
            this.Invoke("UploadVesselRoutePicture", new object[] {
                        strBase64String,
                        strPatientID,
                        strRecordNo,
                        strDescription});
        }
        
        /// <remarks/>
        public void UploadVesselRoutePictureAsync(string strBase64String, string strPatientID, string strRecordNo, string strDescription) {
            this.UploadVesselRoutePictureAsync(strBase64String, strPatientID, strRecordNo, strDescription, null);
        }
        
        /// <remarks/>
        public void UploadVesselRoutePictureAsync(string strBase64String, string strPatientID, string strRecordNo, string strDescription, object userState) {
            if ((this.UploadVesselRoutePictureOperationCompleted == null)) {
                this.UploadVesselRoutePictureOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUploadVesselRoutePictureOperationCompleted);
            }
            this.InvokeAsync("UploadVesselRoutePicture", new object[] {
                        strBase64String,
                        strPatientID,
                        strRecordNo,
                        strDescription}, this.UploadVesselRoutePictureOperationCompleted, userState);
        }
        
        private void OnUploadVesselRoutePictureOperationCompleted(object arg) {
            if ((this.UploadVesselRoutePictureCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UploadVesselRoutePictureCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://hemodialysis.org/UploadDocumentFile", RequestNamespace="http://hemodialysis.org/", ResponseNamespace="http://hemodialysis.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UploadDocumentFile([System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] pData, string strFileName) {
            this.Invoke("UploadDocumentFile", new object[] {
                        pData,
                        strFileName});
        }
        
        /// <remarks/>
        public void UploadDocumentFileAsync(byte[] pData, string strFileName) {
            this.UploadDocumentFileAsync(pData, strFileName, null);
        }
        
        /// <remarks/>
        public void UploadDocumentFileAsync(byte[] pData, string strFileName, object userState) {
            if ((this.UploadDocumentFileOperationCompleted == null)) {
                this.UploadDocumentFileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUploadDocumentFileOperationCompleted);
            }
            this.InvokeAsync("UploadDocumentFile", new object[] {
                        pData,
                        strFileName}, this.UploadDocumentFileOperationCompleted, userState);
        }
        
        private void OnUploadDocumentFileOperationCompleted(object arg) {
            if ((this.UploadDocumentFileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UploadDocumentFileCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://hemodialysis.org/UploadCommonPicture", RequestNamespace="http://hemodialysis.org/", ResponseNamespace="http://hemodialysis.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UploadCommonPicture(string strUserID, string strBase64String) {
            this.Invoke("UploadCommonPicture", new object[] {
                        strUserID,
                        strBase64String});
        }
        
        /// <remarks/>
        public void UploadCommonPictureAsync(string strUserID, string strBase64String) {
            this.UploadCommonPictureAsync(strUserID, strBase64String, null);
        }
        
        /// <remarks/>
        public void UploadCommonPictureAsync(string strUserID, string strBase64String, object userState) {
            if ((this.UploadCommonPictureOperationCompleted == null)) {
                this.UploadCommonPictureOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUploadCommonPictureOperationCompleted);
            }
            this.InvokeAsync("UploadCommonPicture", new object[] {
                        strUserID,
                        strBase64String}, this.UploadCommonPictureOperationCompleted, userState);
        }
        
        private void OnUploadCommonPictureOperationCompleted(object arg) {
            if ((this.UploadCommonPictureCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UploadCommonPictureCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://hemodialysis.org/UploadCommonPictureForPC", RequestNamespace="http://hemodialysis.org/", ResponseNamespace="http://hemodialysis.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UploadCommonPictureForPC(string strUserID, string strBase64String) {
            object[] results = this.Invoke("UploadCommonPictureForPC", new object[] {
                        strUserID,
                        strBase64String});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UploadCommonPictureForPCAsync(string strUserID, string strBase64String) {
            this.UploadCommonPictureForPCAsync(strUserID, strBase64String, null);
        }
        
        /// <remarks/>
        public void UploadCommonPictureForPCAsync(string strUserID, string strBase64String, object userState) {
            if ((this.UploadCommonPictureForPCOperationCompleted == null)) {
                this.UploadCommonPictureForPCOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUploadCommonPictureForPCOperationCompleted);
            }
            this.InvokeAsync("UploadCommonPictureForPC", new object[] {
                        strUserID,
                        strBase64String}, this.UploadCommonPictureForPCOperationCompleted, userState);
        }
        
        private void OnUploadCommonPictureForPCOperationCompleted(object arg) {
            if ((this.UploadCommonPictureForPCCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UploadCommonPictureForPCCompleted(this, new UploadCommonPictureForPCCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://hemodialysis.org/UploadProductUserSignatureImage", RequestNamespace="http://hemodialysis.org/", ResponseNamespace="http://hemodialysis.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UploadProductUserSignatureImage(string strUserID, string strBase64String) {
            this.Invoke("UploadProductUserSignatureImage", new object[] {
                        strUserID,
                        strBase64String});
        }
        
        /// <remarks/>
        public void UploadProductUserSignatureImageAsync(string strUserID, string strBase64String) {
            this.UploadProductUserSignatureImageAsync(strUserID, strBase64String, null);
        }
        
        /// <remarks/>
        public void UploadProductUserSignatureImageAsync(string strUserID, string strBase64String, object userState) {
            if ((this.UploadProductUserSignatureImageOperationCompleted == null)) {
                this.UploadProductUserSignatureImageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUploadProductUserSignatureImageOperationCompleted);
            }
            this.InvokeAsync("UploadProductUserSignatureImage", new object[] {
                        strUserID,
                        strBase64String}, this.UploadProductUserSignatureImageOperationCompleted, userState);
        }
        
        private void OnUploadProductUserSignatureImageOperationCompleted(object arg) {
            if ((this.UploadProductUserSignatureImageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UploadProductUserSignatureImageCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://hemodialysis.org/GetCurrentWebServiceVersion", RequestNamespace="http://hemodialysis.org/", ResponseNamespace="http://hemodialysis.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void GetCurrentWebServiceVersion() {
            this.Invoke("GetCurrentWebServiceVersion", new object[0]);
        }
        
        /// <remarks/>
        public void GetCurrentWebServiceVersionAsync() {
            this.GetCurrentWebServiceVersionAsync(null);
        }
        
        /// <remarks/>
        public void GetCurrentWebServiceVersionAsync(object userState) {
            if ((this.GetCurrentWebServiceVersionOperationCompleted == null)) {
                this.GetCurrentWebServiceVersionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCurrentWebServiceVersionOperationCompleted);
            }
            this.InvokeAsync("GetCurrentWebServiceVersion", new object[0], this.GetCurrentWebServiceVersionOperationCompleted, userState);
        }
        
        private void OnGetCurrentWebServiceVersionOperationCompleted(object arg) {
            if ((this.GetCurrentWebServiceVersionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCurrentWebServiceVersionCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://hemodialysis.org/GetCurrentWebServiceVersionForPC", RequestNamespace="http://hemodialysis.org/", ResponseNamespace="http://hemodialysis.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetCurrentWebServiceVersionForPC() {
            object[] results = this.Invoke("GetCurrentWebServiceVersionForPC", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetCurrentWebServiceVersionForPCAsync() {
            this.GetCurrentWebServiceVersionForPCAsync(null);
        }
        
        /// <remarks/>
        public void GetCurrentWebServiceVersionForPCAsync(object userState) {
            if ((this.GetCurrentWebServiceVersionForPCOperationCompleted == null)) {
                this.GetCurrentWebServiceVersionForPCOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCurrentWebServiceVersionForPCOperationCompleted);
            }
            this.InvokeAsync("GetCurrentWebServiceVersionForPC", new object[0], this.GetCurrentWebServiceVersionForPCOperationCompleted, userState);
        }
        
        private void OnGetCurrentWebServiceVersionForPCOperationCompleted(object arg) {
            if ((this.GetCurrentWebServiceVersionForPCCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCurrentWebServiceVersionForPCCompleted(this, new GetCurrentWebServiceVersionForPCCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://hemodialysis.org/UploadPartFilesForPCUpgrading", RequestNamespace="http://hemodialysis.org/", ResponseNamespace="http://hemodialysis.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UploadPartFilesForPCUpgrading([System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] pData, string pFileName, string StartFlag, string EndFlag) {
            this.Invoke("UploadPartFilesForPCUpgrading", new object[] {
                        pData,
                        pFileName,
                        StartFlag,
                        EndFlag});
        }
        
        /// <remarks/>
        public void UploadPartFilesForPCUpgradingAsync(byte[] pData, string pFileName, string StartFlag, string EndFlag) {
            this.UploadPartFilesForPCUpgradingAsync(pData, pFileName, StartFlag, EndFlag, null);
        }
        
        /// <remarks/>
        public void UploadPartFilesForPCUpgradingAsync(byte[] pData, string pFileName, string StartFlag, string EndFlag, object userState) {
            if ((this.UploadPartFilesForPCUpgradingOperationCompleted == null)) {
                this.UploadPartFilesForPCUpgradingOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUploadPartFilesForPCUpgradingOperationCompleted);
            }
            this.InvokeAsync("UploadPartFilesForPCUpgrading", new object[] {
                        pData,
                        pFileName,
                        StartFlag,
                        EndFlag}, this.UploadPartFilesForPCUpgradingOperationCompleted, userState);
        }
        
        private void OnUploadPartFilesForPCUpgradingOperationCompleted(object arg) {
            if ((this.UploadPartFilesForPCUpgradingCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UploadPartFilesForPCUpgradingCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://hemodialysis.org/UploadDocumentFileWithReturn", RequestNamespace="http://hemodialysis.org/", ResponseNamespace="http://hemodialysis.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UploadDocumentFileWithReturn([System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] pData, string strFileName) {
            object[] results = this.Invoke("UploadDocumentFileWithReturn", new object[] {
                        pData,
                        strFileName});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UploadDocumentFileWithReturnAsync(byte[] pData, string strFileName) {
            this.UploadDocumentFileWithReturnAsync(pData, strFileName, null);
        }
        
        /// <remarks/>
        public void UploadDocumentFileWithReturnAsync(byte[] pData, string strFileName, object userState) {
            if ((this.UploadDocumentFileWithReturnOperationCompleted == null)) {
                this.UploadDocumentFileWithReturnOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUploadDocumentFileWithReturnOperationCompleted);
            }
            this.InvokeAsync("UploadDocumentFileWithReturn", new object[] {
                        pData,
                        strFileName}, this.UploadDocumentFileWithReturnOperationCompleted, userState);
        }
        
        private void OnUploadDocumentFileWithReturnOperationCompleted(object arg) {
            if ((this.UploadDocumentFileWithReturnCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UploadDocumentFileWithReturnCompleted(this, new UploadDocumentFileWithReturnCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://hemodialysis.org/UploadLogFromPC", RequestNamespace="http://hemodialysis.org/", ResponseNamespace="http://hemodialysis.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UploadLogFromPC([System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] pData, string pFileName, string ipAndPath) {
            object[] results = this.Invoke("UploadLogFromPC", new object[] {
                        pData,
                        pFileName,
                        ipAndPath});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UploadLogFromPCAsync(byte[] pData, string pFileName, string ipAndPath) {
            this.UploadLogFromPCAsync(pData, pFileName, ipAndPath, null);
        }
        
        /// <remarks/>
        public void UploadLogFromPCAsync(byte[] pData, string pFileName, string ipAndPath, object userState) {
            if ((this.UploadLogFromPCOperationCompleted == null)) {
                this.UploadLogFromPCOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUploadLogFromPCOperationCompleted);
            }
            this.InvokeAsync("UploadLogFromPC", new object[] {
                        pData,
                        pFileName,
                        ipAndPath}, this.UploadLogFromPCOperationCompleted, userState);
        }
        
        private void OnUploadLogFromPCOperationCompleted(object arg) {
            if ((this.UploadLogFromPCCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UploadLogFromPCCompleted(this, new UploadLogFromPCCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://hemodialysis.org/GetServerFileNames", RequestNamespace="http://hemodialysis.org/", ResponseNamespace="http://hemodialysis.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetServerFileNames(string pDicName, string containsStr) {
            object[] results = this.Invoke("GetServerFileNames", new object[] {
                        pDicName,
                        containsStr});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetServerFileNamesAsync(string pDicName, string containsStr) {
            this.GetServerFileNamesAsync(pDicName, containsStr, null);
        }
        
        /// <remarks/>
        public void GetServerFileNamesAsync(string pDicName, string containsStr, object userState) {
            if ((this.GetServerFileNamesOperationCompleted == null)) {
                this.GetServerFileNamesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetServerFileNamesOperationCompleted);
            }
            this.InvokeAsync("GetServerFileNames", new object[] {
                        pDicName,
                        containsStr}, this.GetServerFileNamesOperationCompleted, userState);
        }
        
        private void OnGetServerFileNamesOperationCompleted(object arg) {
            if ((this.GetServerFileNamesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetServerFileNamesCompleted(this, new GetServerFileNamesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://hemodialysis.org/UploadCommonAudio", RequestNamespace="http://hemodialysis.org/", ResponseNamespace="http://hemodialysis.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UploadCommonAudio(string strUserID, string strBase64String) {
            this.Invoke("UploadCommonAudio", new object[] {
                        strUserID,
                        strBase64String});
        }
        
        /// <remarks/>
        public void UploadCommonAudioAsync(string strUserID, string strBase64String) {
            this.UploadCommonAudioAsync(strUserID, strBase64String, null);
        }
        
        /// <remarks/>
        public void UploadCommonAudioAsync(string strUserID, string strBase64String, object userState) {
            if ((this.UploadCommonAudioOperationCompleted == null)) {
                this.UploadCommonAudioOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUploadCommonAudioOperationCompleted);
            }
            this.InvokeAsync("UploadCommonAudio", new object[] {
                        strUserID,
                        strBase64String}, this.UploadCommonAudioOperationCompleted, userState);
        }
        
        private void OnUploadCommonAudioOperationCompleted(object arg) {
            if ((this.UploadCommonAudioCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UploadCommonAudioCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://hemodialysis.org/GetFlagForUpdateConfigFile", RequestNamespace="http://hemodialysis.org/", ResponseNamespace="http://hemodialysis.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetFlagForUpdateConfigFile(string listFileName, string listFileDate) {
            object[] results = this.Invoke("GetFlagForUpdateConfigFile", new object[] {
                        listFileName,
                        listFileDate});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetFlagForUpdateConfigFileAsync(string listFileName, string listFileDate) {
            this.GetFlagForUpdateConfigFileAsync(listFileName, listFileDate, null);
        }
        
        /// <remarks/>
        public void GetFlagForUpdateConfigFileAsync(string listFileName, string listFileDate, object userState) {
            if ((this.GetFlagForUpdateConfigFileOperationCompleted == null)) {
                this.GetFlagForUpdateConfigFileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFlagForUpdateConfigFileOperationCompleted);
            }
            this.InvokeAsync("GetFlagForUpdateConfigFile", new object[] {
                        listFileName,
                        listFileDate}, this.GetFlagForUpdateConfigFileOperationCompleted, userState);
        }
        
        private void OnGetFlagForUpdateConfigFileOperationCompleted(object arg) {
            if ((this.GetFlagForUpdateConfigFileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFlagForUpdateConfigFileCompleted(this, new GetFlagForUpdateConfigFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://hemodialysis.org/UpdateConfigFile", RequestNamespace="http://hemodialysis.org/", ResponseNamespace="http://hemodialysis.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UpdateConfigFile(string fileName) {
            object[] results = this.Invoke("UpdateConfigFile", new object[] {
                        fileName});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateConfigFileAsync(string fileName) {
            this.UpdateConfigFileAsync(fileName, null);
        }
        
        /// <remarks/>
        public void UpdateConfigFileAsync(string fileName, object userState) {
            if ((this.UpdateConfigFileOperationCompleted == null)) {
                this.UpdateConfigFileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateConfigFileOperationCompleted);
            }
            this.InvokeAsync("UpdateConfigFile", new object[] {
                        fileName}, this.UpdateConfigFileOperationCompleted, userState);
        }
        
        private void OnUpdateConfigFileOperationCompleted(object arg) {
            if ((this.UpdateConfigFileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateConfigFileCompleted(this, new UpdateConfigFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://hemodialysis.org/OnlineSessionStart", RequestNamespace="http://hemodialysis.org/", ResponseNamespace="http://hemodialysis.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void OnlineSessionStart(string strUserID, string strRecordNo) {
            this.Invoke("OnlineSessionStart", new object[] {
                        strUserID,
                        strRecordNo});
        }
        
        /// <remarks/>
        public void OnlineSessionStartAsync(string strUserID, string strRecordNo) {
            this.OnlineSessionStartAsync(strUserID, strRecordNo, null);
        }
        
        /// <remarks/>
        public void OnlineSessionStartAsync(string strUserID, string strRecordNo, object userState) {
            if ((this.OnlineSessionStartOperationCompleted == null)) {
                this.OnlineSessionStartOperationCompleted = new System.Threading.SendOrPostCallback(this.OnOnlineSessionStartOperationCompleted);
            }
            this.InvokeAsync("OnlineSessionStart", new object[] {
                        strUserID,
                        strRecordNo}, this.OnlineSessionStartOperationCompleted, userState);
        }
        
        private void OnOnlineSessionStartOperationCompleted(object arg) {
            if ((this.OnlineSessionStartCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.OnlineSessionStartCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://hemodialysis.org/OnlineSessionStop", RequestNamespace="http://hemodialysis.org/", ResponseNamespace="http://hemodialysis.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void OnlineSessionStop(string strUserID, string strRecordNo) {
            this.Invoke("OnlineSessionStop", new object[] {
                        strUserID,
                        strRecordNo});
        }
        
        /// <remarks/>
        public void OnlineSessionStopAsync(string strUserID, string strRecordNo) {
            this.OnlineSessionStopAsync(strUserID, strRecordNo, null);
        }
        
        /// <remarks/>
        public void OnlineSessionStopAsync(string strUserID, string strRecordNo, object userState) {
            if ((this.OnlineSessionStopOperationCompleted == null)) {
                this.OnlineSessionStopOperationCompleted = new System.Threading.SendOrPostCallback(this.OnOnlineSessionStopOperationCompleted);
            }
            this.InvokeAsync("OnlineSessionStop", new object[] {
                        strUserID,
                        strRecordNo}, this.OnlineSessionStopOperationCompleted, userState);
        }
        
        private void OnOnlineSessionStopOperationCompleted(object arg) {
            if ((this.OnlineSessionStopCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.OnlineSessionStopCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://hemodialysis.org/OnlineGetCurrentOnlineData", RequestNamespace="http://hemodialysis.org/", ResponseNamespace="http://hemodialysis.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void OnlineGetCurrentOnlineData(string strUserID, string strRecordNo) {
            this.Invoke("OnlineGetCurrentOnlineData", new object[] {
                        strUserID,
                        strRecordNo});
        }
        
        /// <remarks/>
        public void OnlineGetCurrentOnlineDataAsync(string strUserID, string strRecordNo) {
            this.OnlineGetCurrentOnlineDataAsync(strUserID, strRecordNo, null);
        }
        
        /// <remarks/>
        public void OnlineGetCurrentOnlineDataAsync(string strUserID, string strRecordNo, object userState) {
            if ((this.OnlineGetCurrentOnlineDataOperationCompleted == null)) {
                this.OnlineGetCurrentOnlineDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnOnlineGetCurrentOnlineDataOperationCompleted);
            }
            this.InvokeAsync("OnlineGetCurrentOnlineData", new object[] {
                        strUserID,
                        strRecordNo}, this.OnlineGetCurrentOnlineDataOperationCompleted, userState);
        }
        
        private void OnOnlineGetCurrentOnlineDataOperationCompleted(object arg) {
            if ((this.OnlineGetCurrentOnlineDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.OnlineGetCurrentOnlineDataCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://hemodialysis.org/DoCalc", RequestNamespace="http://hemodialysis.org/", ResponseNamespace="http://hemodialysis.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string DoCalc(string userID, string commandString) {
            object[] results = this.Invoke("DoCalc", new object[] {
                        userID,
                        commandString});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void DoCalcAsync(string userID, string commandString) {
            this.DoCalcAsync(userID, commandString, null);
        }
        
        /// <remarks/>
        public void DoCalcAsync(string userID, string commandString, object userState) {
            if ((this.DoCalcOperationCompleted == null)) {
                this.DoCalcOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDoCalcOperationCompleted);
            }
            this.InvokeAsync("DoCalc", new object[] {
                        userID,
                        commandString}, this.DoCalcOperationCompleted, userState);
        }
        
        private void OnDoCalcOperationCompleted(object arg) {
            if ((this.DoCalcCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DoCalcCompleted(this, new DoCalcCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://hemodialysis.org/GetDateTimeNow", RequestNamespace="http://hemodialysis.org/", ResponseNamespace="http://hemodialysis.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetDateTimeNow() {
            object[] results = this.Invoke("GetDateTimeNow", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetDateTimeNowAsync() {
            this.GetDateTimeNowAsync(null);
        }
        
        /// <remarks/>
        public void GetDateTimeNowAsync(object userState) {
            if ((this.GetDateTimeNowOperationCompleted == null)) {
                this.GetDateTimeNowOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDateTimeNowOperationCompleted);
            }
            this.InvokeAsync("GetDateTimeNow", new object[0], this.GetDateTimeNowOperationCompleted, userState);
        }
        
        private void OnGetDateTimeNowOperationCompleted(object arg) {
            if ((this.GetDateTimeNowCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDateTimeNowCompleted(this, new GetDateTimeNowCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://hemodialysis.org/GetDateTimeNow2", RequestNamespace="http://hemodialysis.org/", ResponseNamespace="http://hemodialysis.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetDateTimeNow2() {
            object[] results = this.Invoke("GetDateTimeNow2", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetDateTimeNow2Async() {
            this.GetDateTimeNow2Async(null);
        }
        
        /// <remarks/>
        public void GetDateTimeNow2Async(object userState) {
            if ((this.GetDateTimeNow2OperationCompleted == null)) {
                this.GetDateTimeNow2OperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDateTimeNow2OperationCompleted);
            }
            this.InvokeAsync("GetDateTimeNow2", new object[0], this.GetDateTimeNow2OperationCompleted, userState);
        }
        
        private void OnGetDateTimeNow2OperationCompleted(object arg) {
            if ((this.GetDateTimeNow2Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDateTimeNow2Completed(this, new GetDateTimeNow2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://hemodialysis.org/xxl", RequestNamespace="http://hemodialysis.org/", ResponseNamespace="http://hemodialysis.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void xxl(string vsUserId) {
            this.Invoke("xxl", new object[] {
                        vsUserId});
        }
        
        /// <remarks/>
        public void xxlAsync(string vsUserId) {
            this.xxlAsync(vsUserId, null);
        }
        
        /// <remarks/>
        public void xxlAsync(string vsUserId, object userState) {
            if ((this.xxlOperationCompleted == null)) {
                this.xxlOperationCompleted = new System.Threading.SendOrPostCallback(this.OnxxlOperationCompleted);
            }
            this.InvokeAsync("xxl", new object[] {
                        vsUserId}, this.xxlOperationCompleted, userState);
        }
        
        private void OnxxlOperationCompleted(object arg) {
            if ((this.xxlCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.xxlCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://hemodialysis.org/CheckProductUser", RequestNamespace="http://hemodialysis.org/", ResponseNamespace="http://hemodialysis.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void CheckProductUser(string vsUserId, string vsPassWord, string strTableModifyTimeJson) {
            this.Invoke("CheckProductUser", new object[] {
                        vsUserId,
                        vsPassWord,
                        strTableModifyTimeJson});
        }
        
        /// <remarks/>
        public void CheckProductUserAsync(string vsUserId, string vsPassWord, string strTableModifyTimeJson) {
            this.CheckProductUserAsync(vsUserId, vsPassWord, strTableModifyTimeJson, null);
        }
        
        /// <remarks/>
        public void CheckProductUserAsync(string vsUserId, string vsPassWord, string strTableModifyTimeJson, object userState) {
            if ((this.CheckProductUserOperationCompleted == null)) {
                this.CheckProductUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckProductUserOperationCompleted);
            }
            this.InvokeAsync("CheckProductUser", new object[] {
                        vsUserId,
                        vsPassWord,
                        strTableModifyTimeJson}, this.CheckProductUserOperationCompleted, userState);
        }
        
        private void OnCheckProductUserOperationCompleted(object arg) {
            if ((this.CheckProductUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckProductUserCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://hemodialysis.org/CheckProductUserForScheme", RequestNamespace="http://hemodialysis.org/", ResponseNamespace="http://hemodialysis.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void CheckProductUserForScheme(string strUserId, string strPassWord) {
            this.Invoke("CheckProductUserForScheme", new object[] {
                        strUserId,
                        strPassWord});
        }
        
        /// <remarks/>
        public void CheckProductUserForSchemeAsync(string strUserId, string strPassWord) {
            this.CheckProductUserForSchemeAsync(strUserId, strPassWord, null);
        }
        
        /// <remarks/>
        public void CheckProductUserForSchemeAsync(string strUserId, string strPassWord, object userState) {
            if ((this.CheckProductUserForSchemeOperationCompleted == null)) {
                this.CheckProductUserForSchemeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckProductUserForSchemeOperationCompleted);
            }
            this.InvokeAsync("CheckProductUserForScheme", new object[] {
                        strUserId,
                        strPassWord}, this.CheckProductUserForSchemeOperationCompleted, userState);
        }
        
        private void OnCheckProductUserForSchemeOperationCompleted(object arg) {
            if ((this.CheckProductUserForSchemeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckProductUserForSchemeCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://hemodialysis.org/CheckProductUserByUserName", RequestNamespace="http://hemodialysis.org/", ResponseNamespace="http://hemodialysis.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void CheckProductUserByUserName(string strUserId, string strPassWord) {
            this.Invoke("CheckProductUserByUserName", new object[] {
                        strUserId,
                        strPassWord});
        }
        
        /// <remarks/>
        public void CheckProductUserByUserNameAsync(string strUserId, string strPassWord) {
            this.CheckProductUserByUserNameAsync(strUserId, strPassWord, null);
        }
        
        /// <remarks/>
        public void CheckProductUserByUserNameAsync(string strUserId, string strPassWord, object userState) {
            if ((this.CheckProductUserByUserNameOperationCompleted == null)) {
                this.CheckProductUserByUserNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckProductUserByUserNameOperationCompleted);
            }
            this.InvokeAsync("CheckProductUserByUserName", new object[] {
                        strUserId,
                        strPassWord}, this.CheckProductUserByUserNameOperationCompleted, userState);
        }
        
        private void OnCheckProductUserByUserNameOperationCompleted(object arg) {
            if ((this.CheckProductUserByUserNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckProductUserByUserNameCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://hemodialysis.org/CheckUserForNursing", RequestNamespace="http://hemodialysis.org/", ResponseNamespace="http://hemodialysis.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void CheckUserForNursing(string strUserName, string strPassWord, string strRecordNo, string strFlg) {
            this.Invoke("CheckUserForNursing", new object[] {
                        strUserName,
                        strPassWord,
                        strRecordNo,
                        strFlg});
        }
        
        /// <remarks/>
        public void CheckUserForNursingAsync(string strUserName, string strPassWord, string strRecordNo, string strFlg) {
            this.CheckUserForNursingAsync(strUserName, strPassWord, strRecordNo, strFlg, null);
        }
        
        /// <remarks/>
        public void CheckUserForNursingAsync(string strUserName, string strPassWord, string strRecordNo, string strFlg, object userState) {
            if ((this.CheckUserForNursingOperationCompleted == null)) {
                this.CheckUserForNursingOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckUserForNursingOperationCompleted);
            }
            this.InvokeAsync("CheckUserForNursing", new object[] {
                        strUserName,
                        strPassWord,
                        strRecordNo,
                        strFlg}, this.CheckUserForNursingOperationCompleted, userState);
        }
        
        private void OnCheckUserForNursingOperationCompleted(object arg) {
            if ((this.CheckUserForNursingCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckUserForNursingCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://hemodialysis.org/CheckUserForHeadNurse", RequestNamespace="http://hemodialysis.org/", ResponseNamespace="http://hemodialysis.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void CheckUserForHeadNurse(string strUserName, string strPassWord) {
            this.Invoke("CheckUserForHeadNurse", new object[] {
                        strUserName,
                        strPassWord});
        }
        
        /// <remarks/>
        public void CheckUserForHeadNurseAsync(string strUserName, string strPassWord) {
            this.CheckUserForHeadNurseAsync(strUserName, strPassWord, null);
        }
        
        /// <remarks/>
        public void CheckUserForHeadNurseAsync(string strUserName, string strPassWord, object userState) {
            if ((this.CheckUserForHeadNurseOperationCompleted == null)) {
                this.CheckUserForHeadNurseOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckUserForHeadNurseOperationCompleted);
            }
            this.InvokeAsync("CheckUserForHeadNurse", new object[] {
                        strUserName,
                        strPassWord}, this.CheckUserForHeadNurseOperationCompleted, userState);
        }
        
        private void OnCheckUserForHeadNurseOperationCompleted(object arg) {
            if ((this.CheckUserForHeadNurseCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckUserForHeadNurseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://hemodialysis.org/CheckProductUserPassword", RequestNamespace="http://hemodialysis.org/", ResponseNamespace="http://hemodialysis.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void CheckProductUserPassword(string strUserId, string strPassWord) {
            this.Invoke("CheckProductUserPassword", new object[] {
                        strUserId,
                        strPassWord});
        }
        
        /// <remarks/>
        public void CheckProductUserPasswordAsync(string strUserId, string strPassWord) {
            this.CheckProductUserPasswordAsync(strUserId, strPassWord, null);
        }
        
        /// <remarks/>
        public void CheckProductUserPasswordAsync(string strUserId, string strPassWord, object userState) {
            if ((this.CheckProductUserPasswordOperationCompleted == null)) {
                this.CheckProductUserPasswordOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckProductUserPasswordOperationCompleted);
            }
            this.InvokeAsync("CheckProductUserPassword", new object[] {
                        strUserId,
                        strPassWord}, this.CheckProductUserPasswordOperationCompleted, userState);
        }
        
        private void OnCheckProductUserPasswordOperationCompleted(object arg) {
            if ((this.CheckProductUserPasswordCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckProductUserPasswordCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://hemodialysis.org/GetProductUserForModifyScheme", RequestNamespace="http://hemodialysis.org/", ResponseNamespace="http://hemodialysis.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void GetProductUserForModifyScheme(string strUserID) {
            this.Invoke("GetProductUserForModifyScheme", new object[] {
                        strUserID});
        }
        
        /// <remarks/>
        public void GetProductUserForModifySchemeAsync(string strUserID) {
            this.GetProductUserForModifySchemeAsync(strUserID, null);
        }
        
        /// <remarks/>
        public void GetProductUserForModifySchemeAsync(string strUserID, object userState) {
            if ((this.GetProductUserForModifySchemeOperationCompleted == null)) {
                this.GetProductUserForModifySchemeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetProductUserForModifySchemeOperationCompleted);
            }
            this.InvokeAsync("GetProductUserForModifyScheme", new object[] {
                        strUserID}, this.GetProductUserForModifySchemeOperationCompleted, userState);
        }
        
        private void OnGetProductUserForModifySchemeOperationCompleted(object arg) {
            if ((this.GetProductUserForModifySchemeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetProductUserForModifySchemeCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://hemodialysis.org/GetPatientBeforeToday", RequestNamespace="http://hemodialysis.org/", ResponseNamespace="http://hemodialysis.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void GetPatientBeforeToday(string vsUserID) {
            this.Invoke("GetPatientBeforeToday", new object[] {
                        vsUserID});
        }
        
        /// <remarks/>
        public void GetPatientBeforeTodayAsync(string vsUserID) {
            this.GetPatientBeforeTodayAsync(vsUserID, null);
        }
        
        /// <remarks/>
        public void GetPatientBeforeTodayAsync(string vsUserID, object userState) {
            if ((this.GetPatientBeforeTodayOperationCompleted == null)) {
                this.GetPatientBeforeTodayOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPatientBeforeTodayOperationCompleted);
            }
            this.InvokeAsync("GetPatientBeforeToday", new object[] {
                        vsUserID}, this.GetPatientBeforeTodayOperationCompleted, userState);
        }
        
        private void OnGetPatientBeforeTodayOperationCompleted(object arg) {
            if ((this.GetPatientBeforeTodayCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPatientBeforeTodayCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://hemodialysis.org/GetPatient", RequestNamespace="http://hemodialysis.org/", ResponseNamespace="http://hemodialysis.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void GetPatient(string vsVersion, string vsDate, string vsAreaCode, string vsUserID, string vsTimeInterval) {
            this.Invoke("GetPatient", new object[] {
                        vsVersion,
                        vsDate,
                        vsAreaCode,
                        vsUserID,
                        vsTimeInterval});
        }
        
        /// <remarks/>
        public void GetPatientAsync(string vsVersion, string vsDate, string vsAreaCode, string vsUserID, string vsTimeInterval) {
            this.GetPatientAsync(vsVersion, vsDate, vsAreaCode, vsUserID, vsTimeInterval, null);
        }
        
        /// <remarks/>
        public void GetPatientAsync(string vsVersion, string vsDate, string vsAreaCode, string vsUserID, string vsTimeInterval, object userState) {
            if ((this.GetPatientOperationCompleted == null)) {
                this.GetPatientOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPatientOperationCompleted);
            }
            this.InvokeAsync("GetPatient", new object[] {
                        vsVersion,
                        vsDate,
                        vsAreaCode,
                        vsUserID,
                        vsTimeInterval}, this.GetPatientOperationCompleted, userState);
        }
        
        private void OnGetPatientOperationCompleted(object arg) {
            if ((this.GetPatientCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPatientCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://hemodialysis.org/GetPatientListByName", RequestNamespace="http://hemodialysis.org/", ResponseNamespace="http://hemodialysis.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void GetPatientListByName(string vsStartDate, string vsEndDate, string vsPatientCaseNo, string vsName, string vsUserID) {
            this.Invoke("GetPatientListByName", new object[] {
                        vsStartDate,
                        vsEndDate,
                        vsPatientCaseNo,
                        vsName,
                        vsUserID});
        }
        
        /// <remarks/>
        public void GetPatientListByNameAsync(string vsStartDate, string vsEndDate, string vsPatientCaseNo, string vsName, string vsUserID) {
            this.GetPatientListByNameAsync(vsStartDate, vsEndDate, vsPatientCaseNo, vsName, vsUserID, null);
        }
        
        /// <remarks/>
        public void GetPatientListByNameAsync(string vsStartDate, string vsEndDate, string vsPatientCaseNo, string vsName, string vsUserID, object userState) {
            if ((this.GetPatientListByNameOperationCompleted == null)) {
                this.GetPatientListByNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPatientListByNameOperationCompleted);
            }
            this.InvokeAsync("GetPatientListByName", new object[] {
                        vsStartDate,
                        vsEndDate,
                        vsPatientCaseNo,
                        vsName,
                        vsUserID}, this.GetPatientListByNameOperationCompleted, userState);
        }
        
        private void OnGetPatientListByNameOperationCompleted(object arg) {
            if ((this.GetPatientListByNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPatientListByNameCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://hemodialysis.org/GetThrombolysisPatient", RequestNamespace="http://hemodialysis.org/", ResponseNamespace="http://hemodialysis.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void GetThrombolysisPatient(string vsStartDate, string vsEndDate, string vsPatientCaseNo, string vsName, string vsUserID) {
            this.Invoke("GetThrombolysisPatient", new object[] {
                        vsStartDate,
                        vsEndDate,
                        vsPatientCaseNo,
                        vsName,
                        vsUserID});
        }
        
        /// <remarks/>
        public void GetThrombolysisPatientAsync(string vsStartDate, string vsEndDate, string vsPatientCaseNo, string vsName, string vsUserID) {
            this.GetThrombolysisPatientAsync(vsStartDate, vsEndDate, vsPatientCaseNo, vsName, vsUserID, null);
        }
        
        /// <remarks/>
        public void GetThrombolysisPatientAsync(string vsStartDate, string vsEndDate, string vsPatientCaseNo, string vsName, string vsUserID, object userState) {
            if ((this.GetThrombolysisPatientOperationCompleted == null)) {
                this.GetThrombolysisPatientOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetThrombolysisPatientOperationCompleted);
            }
            this.InvokeAsync("GetThrombolysisPatient", new object[] {
                        vsStartDate,
                        vsEndDate,
                        vsPatientCaseNo,
                        vsName,
                        vsUserID}, this.GetThrombolysisPatientOperationCompleted, userState);
        }
        
        private void OnGetThrombolysisPatientOperationCompleted(object arg) {
            if ((this.GetThrombolysisPatientCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetThrombolysisPatientCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://hemodialysis.org/GetDialyseData", RequestNamespace="http://hemodialysis.org/", ResponseNamespace="http://hemodialysis.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void GetDialyseData(string vsVersion, string vsPatientID, string vsDate, string vsUserID) {
            this.Invoke("GetDialyseData", new object[] {
                        vsVersion,
                        vsPatientID,
                        vsDate,
                        vsUserID});
        }
        
        /// <remarks/>
        public void GetDialyseDataAsync(string vsVersion, string vsPatientID, string vsDate, string vsUserID) {
            this.GetDialyseDataAsync(vsVersion, vsPatientID, vsDate, vsUserID, null);
        }
        
        /// <remarks/>
        public void GetDialyseDataAsync(string vsVersion, string vsPatientID, string vsDate, string vsUserID, object userState) {
            if ((this.GetDialyseDataOperationCompleted == null)) {
                this.GetDialyseDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDialyseDataOperationCompleted);
            }
            this.InvokeAsync("GetDialyseData", new object[] {
                        vsVersion,
                        vsPatientID,
                        vsDate,
                        vsUserID}, this.GetDialyseDataOperationCompleted, userState);
        }
        
        private void OnGetDialyseDataOperationCompleted(object arg) {
            if ((this.GetDialyseDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDialyseDataCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://hemodialysis.org/GetDialyseDataByQrcode", RequestNamespace="http://hemodialysis.org/", ResponseNamespace="http://hemodialysis.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void GetDialyseDataByQrcode(string vsCardID, string vsUserId) {
            this.Invoke("GetDialyseDataByQrcode", new object[] {
                        vsCardID,
                        vsUserId});
        }
        
        /// <remarks/>
        public void GetDialyseDataByQrcodeAsync(string vsCardID, string vsUserId) {
            this.GetDialyseDataByQrcodeAsync(vsCardID, vsUserId, null);
        }
        
        /// <remarks/>
        public void GetDialyseDataByQrcodeAsync(string vsCardID, string vsUserId, object userState) {
            if ((this.GetDialyseDataByQrcodeOperationCompleted == null)) {
                this.GetDialyseDataByQrcodeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDialyseDataByQrcodeOperationCompleted);
            }
            this.InvokeAsync("GetDialyseDataByQrcode", new object[] {
                        vsCardID,
                        vsUserId}, this.GetDialyseDataByQrcodeOperationCompleted, userState);
        }
        
        private void OnGetDialyseDataByQrcodeOperationCompleted(object arg) {
            if ((this.GetDialyseDataByQrcodeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDialyseDataByQrcodeCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://hemodialysis.org/GetDictionaryData", RequestNamespace="http://hemodialysis.org/", ResponseNamespace="http://hemodialysis.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void GetDictionaryData(string vsVersion, string vsUserID) {
            this.Invoke("GetDictionaryData", new object[] {
                        vsVersion,
                        vsUserID});
        }
        
        /// <remarks/>
        public void GetDictionaryDataAsync(string vsVersion, string vsUserID) {
            this.GetDictionaryDataAsync(vsVersion, vsUserID, null);
        }
        
        /// <remarks/>
        public void GetDictionaryDataAsync(string vsVersion, string vsUserID, object userState) {
            if ((this.GetDictionaryDataOperationCompleted == null)) {
                this.GetDictionaryDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDictionaryDataOperationCompleted);
            }
            this.InvokeAsync("GetDictionaryData", new object[] {
                        vsVersion,
                        vsUserID}, this.GetDictionaryDataOperationCompleted, userState);
        }
        
        private void OnGetDictionaryDataOperationCompleted(object arg) {
            if ((this.GetDictionaryDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDictionaryDataCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://hemodialysis.org/GetEquipmentList", RequestNamespace="http://hemodialysis.org/", ResponseNamespace="http://hemodialysis.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void GetEquipmentList(string vsVersion, string vsUserID) {
            this.Invoke("GetEquipmentList", new object[] {
                        vsVersion,
                        vsUserID});
        }
        
        /// <remarks/>
        public void GetEquipmentListAsync(string vsVersion, string vsUserID) {
            this.GetEquipmentListAsync(vsVersion, vsUserID, null);
        }
        
        /// <remarks/>
        public void GetEquipmentListAsync(string vsVersion, string vsUserID, object userState) {
            if ((this.GetEquipmentListOperationCompleted == null)) {
                this.GetEquipmentListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetEquipmentListOperationCompleted);
            }
            this.InvokeAsync("GetEquipmentList", new object[] {
                        vsVersion,
                        vsUserID}, this.GetEquipmentListOperationCompleted, userState);
        }
        
        private void OnGetEquipmentListOperationCompleted(object arg) {
            if ((this.GetEquipmentListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetEquipmentListCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://hemodialysis.org/GetSpecifiedDialyseRecord", RequestNamespace="http://hemodialysis.org/", ResponseNamespace="http://hemodialysis.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void GetSpecifiedDialyseRecord(string vsVersion, string vsPatientID, string vsDate, string vsTypeFlag, string vsUserID) {
            this.Invoke("GetSpecifiedDialyseRecord", new object[] {
                        vsVersion,
                        vsPatientID,
                        vsDate,
                        vsTypeFlag,
                        vsUserID});
        }
        
        /// <remarks/>
        public void GetSpecifiedDialyseRecordAsync(string vsVersion, string vsPatientID, string vsDate, string vsTypeFlag, string vsUserID) {
            this.GetSpecifiedDialyseRecordAsync(vsVersion, vsPatientID, vsDate, vsTypeFlag, vsUserID, null);
        }
        
        /// <remarks/>
        public void GetSpecifiedDialyseRecordAsync(string vsVersion, string vsPatientID, string vsDate, string vsTypeFlag, string vsUserID, object userState) {
            if ((this.GetSpecifiedDialyseRecordOperationCompleted == null)) {
                this.GetSpecifiedDialyseRecordOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSpecifiedDialyseRecordOperationCompleted);
            }
            this.InvokeAsync("GetSpecifiedDialyseRecord", new object[] {
                        vsVersion,
                        vsPatientID,
                        vsDate,
                        vsTypeFlag,
                        vsUserID}, this.GetSpecifiedDialyseRecordOperationCompleted, userState);
        }
        
        private void OnGetSpecifiedDialyseRecordOperationCompleted(object arg) {
            if ((this.GetSpecifiedDialyseRecordCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSpecifiedDialyseRecordCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://hemodialysis.org/GetTestInfo", RequestNamespace="http://hemodialysis.org/", ResponseNamespace="http://hemodialysis.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void GetTestInfo(string vsVersion, string vsPatientID, string vsStartDate, string vsEndDate, string vsItemName, string vsUserID) {
            this.Invoke("GetTestInfo", new object[] {
                        vsVersion,
                        vsPatientID,
                        vsStartDate,
                        vsEndDate,
                        vsItemName,
                        vsUserID});
        }
        
        /// <remarks/>
        public void GetTestInfoAsync(string vsVersion, string vsPatientID, string vsStartDate, string vsEndDate, string vsItemName, string vsUserID) {
            this.GetTestInfoAsync(vsVersion, vsPatientID, vsStartDate, vsEndDate, vsItemName, vsUserID, null);
        }
        
        /// <remarks/>
        public void GetTestInfoAsync(string vsVersion, string vsPatientID, string vsStartDate, string vsEndDate, string vsItemName, string vsUserID, object userState) {
            if ((this.GetTestInfoOperationCompleted == null)) {
                this.GetTestInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTestInfoOperationCompleted);
            }
            this.InvokeAsync("GetTestInfo", new object[] {
                        vsVersion,
                        vsPatientID,
                        vsStartDate,
                        vsEndDate,
                        vsItemName,
                        vsUserID}, this.GetTestInfoOperationCompleted, userState);
        }
        
        private void OnGetTestInfoOperationCompleted(object arg) {
            if ((this.GetTestInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTestInfoCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://hemodialysis.org/GetLastTestInfo", RequestNamespace="http://hemodialysis.org/", ResponseNamespace="http://hemodialysis.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void GetLastTestInfo(string vsVersion, string vsPatientID, string vsItemName, string vsUserID) {
            this.Invoke("GetLastTestInfo", new object[] {
                        vsVersion,
                        vsPatientID,
                        vsItemName,
                        vsUserID});
        }
        
        /// <remarks/>
        public void GetLastTestInfoAsync(string vsVersion, string vsPatientID, string vsItemName, string vsUserID) {
            this.GetLastTestInfoAsync(vsVersion, vsPatientID, vsItemName, vsUserID, null);
        }
        
        /// <remarks/>
        public void GetLastTestInfoAsync(string vsVersion, string vsPatientID, string vsItemName, string vsUserID, object userState) {
            if ((this.GetLastTestInfoOperationCompleted == null)) {
                this.GetLastTestInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLastTestInfoOperationCompleted);
            }
            this.InvokeAsync("GetLastTestInfo", new object[] {
                        vsVersion,
                        vsPatientID,
                        vsItemName,
                        vsUserID}, this.GetLastTestInfoOperationCompleted, userState);
        }
        
        private void OnGetLastTestInfoOperationCompleted(object arg) {
            if ((this.GetLastTestInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLastTestInfoCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://hemodialysis.org/GetBPInfo", RequestNamespace="http://hemodialysis.org/", ResponseNamespace="http://hemodialysis.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void GetBPInfo(string vsPatientID, string vsStartDate, string vsEndDate, string vsUserID, string lastFlag) {
            this.Invoke("GetBPInfo", new object[] {
                        vsPatientID,
                        vsStartDate,
                        vsEndDate,
                        vsUserID,
                        lastFlag});
        }
        
        /// <remarks/>
        public void GetBPInfoAsync(string vsPatientID, string vsStartDate, string vsEndDate, string vsUserID, string lastFlag) {
            this.GetBPInfoAsync(vsPatientID, vsStartDate, vsEndDate, vsUserID, lastFlag, null);
        }
        
        /// <remarks/>
        public void GetBPInfoAsync(string vsPatientID, string vsStartDate, string vsEndDate, string vsUserID, string lastFlag, object userState) {
            if ((this.GetBPInfoOperationCompleted == null)) {
                this.GetBPInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetBPInfoOperationCompleted);
            }
            this.InvokeAsync("GetBPInfo", new object[] {
                        vsPatientID,
                        vsStartDate,
                        vsEndDate,
                        vsUserID,
                        lastFlag}, this.GetBPInfoOperationCompleted, userState);
        }
        
        private void OnGetBPInfoOperationCompleted(object arg) {
            if ((this.GetBPInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetBPInfoCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://hemodialysis.org/GetDialysisCostsInfo", RequestNamespace="http://hemodialysis.org/", ResponseNamespace="http://hemodialysis.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void GetDialysisCostsInfo(string strUserID, string strPatientID, string strStartDate, string strEndDate, string strEstimationFlag, string strHospitalizationFlag) {
            this.Invoke("GetDialysisCostsInfo", new object[] {
                        strUserID,
                        strPatientID,
                        strStartDate,
                        strEndDate,
                        strEstimationFlag,
                        strHospitalizationFlag});
        }
        
        /// <remarks/>
        public void GetDialysisCostsInfoAsync(string strUserID, string strPatientID, string strStartDate, string strEndDate, string strEstimationFlag, string strHospitalizationFlag) {
            this.GetDialysisCostsInfoAsync(strUserID, strPatientID, strStartDate, strEndDate, strEstimationFlag, strHospitalizationFlag, null);
        }
        
        /// <remarks/>
        public void GetDialysisCostsInfoAsync(string strUserID, string strPatientID, string strStartDate, string strEndDate, string strEstimationFlag, string strHospitalizationFlag, object userState) {
            if ((this.GetDialysisCostsInfoOperationCompleted == null)) {
                this.GetDialysisCostsInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDialysisCostsInfoOperationCompleted);
            }
            this.InvokeAsync("GetDialysisCostsInfo", new object[] {
                        strUserID,
                        strPatientID,
                        strStartDate,
                        strEndDate,
                        strEstimationFlag,
                        strHospitalizationFlag}, this.GetDialysisCostsInfoOperationCompleted, userState);
        }
        
        private void OnGetDialysisCostsInfoOperationCompleted(object arg) {
            if ((this.GetDialysisCostsInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDialysisCostsInfoCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://hemodialysis.org/GetDetailDialysisCostsInfo", RequestNamespace="http://hemodialysis.org/", ResponseNamespace="http://hemodialysis.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void GetDetailDialysisCostsInfo(string strUserID, string strPatientID, string strStartDate, string strEndDate, string strItemName, string strItemPrice, string strTypeSpecification, string strHospitalizationFlag, string strEstimationFlag) {
            this.Invoke("GetDetailDialysisCostsInfo", new object[] {
                        strUserID,
                        strPatientID,
                        strStartDate,
                        strEndDate,
                        strItemName,
                        strItemPrice,
                        strTypeSpecification,
                        strHospitalizationFlag,
                        strEstimationFlag});
        }
        
        /// <remarks/>
        public void GetDetailDialysisCostsInfoAsync(string strUserID, string strPatientID, string strStartDate, string strEndDate, string strItemName, string strItemPrice, string strTypeSpecification, string strHospitalizationFlag, string strEstimationFlag) {
            this.GetDetailDialysisCostsInfoAsync(strUserID, strPatientID, strStartDate, strEndDate, strItemName, strItemPrice, strTypeSpecification, strHospitalizationFlag, strEstimationFlag, null);
        }
        
        /// <remarks/>
        public void GetDetailDialysisCostsInfoAsync(string strUserID, string strPatientID, string strStartDate, string strEndDate, string strItemName, string strItemPrice, string strTypeSpecification, string strHospitalizationFlag, string strEstimationFlag, object userState) {
            if ((this.GetDetailDialysisCostsInfoOperationCompleted == null)) {
                this.GetDetailDialysisCostsInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDetailDialysisCostsInfoOperationCompleted);
            }
            this.InvokeAsync("GetDetailDialysisCostsInfo", new object[] {
                        strUserID,
                        strPatientID,
                        strStartDate,
                        strEndDate,
                        strItemName,
                        strItemPrice,
                        strTypeSpecification,
                        strHospitalizationFlag,
                        strEstimationFlag}, this.GetDetailDialysisCostsInfoOperationCompleted, userState);
        }
        
        private void OnGetDetailDialysisCostsInfoOperationCompleted(object arg) {
            if ((this.GetDetailDialysisCostsInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDetailDialysisCostsInfoCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://hemodialysis.org/GetDialyseScheme", RequestNamespace="http://hemodialysis.org/", ResponseNamespace="http://hemodialysis.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void GetDialyseScheme(string strUserID, string strPatientID, string strSchemeType, string strRecordNo) {
            this.Invoke("GetDialyseScheme", new object[] {
                        strUserID,
                        strPatientID,
                        strSchemeType,
                        strRecordNo});
        }
        
        /// <remarks/>
        public void GetDialyseSchemeAsync(string strUserID, string strPatientID, string strSchemeType, string strRecordNo) {
            this.GetDialyseSchemeAsync(strUserID, strPatientID, strSchemeType, strRecordNo, null);
        }
        
        /// <remarks/>
        public void GetDialyseSchemeAsync(string strUserID, string strPatientID, string strSchemeType, string strRecordNo, object userState) {
            if ((this.GetDialyseSchemeOperationCompleted == null)) {
                this.GetDialyseSchemeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDialyseSchemeOperationCompleted);
            }
            this.InvokeAsync("GetDialyseScheme", new object[] {
                        strUserID,
                        strPatientID,
                        strSchemeType,
                        strRecordNo}, this.GetDialyseSchemeOperationCompleted, userState);
        }
        
        private void OnGetDialyseSchemeOperationCompleted(object arg) {
            if ((this.GetDialyseSchemeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDialyseSchemeCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://hemodialysis.org/GetSpecifiedDialyseData", RequestNamespace="http://hemodialysis.org/", ResponseNamespace="http://hemodialysis.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void GetSpecifiedDialyseData(string strUserID, string strPatientID, string strDate, string strRecordNo) {
            this.Invoke("GetSpecifiedDialyseData", new object[] {
                        strUserID,
                        strPatientID,
                        strDate,
                        strRecordNo});
        }
        
        /// <remarks/>
        public void GetSpecifiedDialyseDataAsync(string strUserID, string strPatientID, string strDate, string strRecordNo) {
            this.GetSpecifiedDialyseDataAsync(strUserID, strPatientID, strDate, strRecordNo, null);
        }
        
        /// <remarks/>
        public void GetSpecifiedDialyseDataAsync(string strUserID, string strPatientID, string strDate, string strRecordNo, object userState) {
            if ((this.GetSpecifiedDialyseDataOperationCompleted == null)) {
                this.GetSpecifiedDialyseDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSpecifiedDialyseDataOperationCompleted);
            }
            this.InvokeAsync("GetSpecifiedDialyseData", new object[] {
                        strUserID,
                        strPatientID,
                        strDate,
                        strRecordNo}, this.GetSpecifiedDialyseDataOperationCompleted, userState);
        }
        
        private void OnGetSpecifiedDialyseDataOperationCompleted(object arg) {
            if ((this.GetSpecifiedDialyseDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSpecifiedDialyseDataCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://hemodialysis.org/GetDeepVeinCatheterization", RequestNamespace="http://hemodialysis.org/", ResponseNamespace="http://hemodialysis.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void GetDeepVeinCatheterization(string strUserID, string strRecordNo) {
            this.Invoke("GetDeepVeinCatheterization", new object[] {
                        strUserID,
                        strRecordNo});
        }
        
        /// <remarks/>
        public void GetDeepVeinCatheterizationAsync(string strUserID, string strRecordNo) {
            this.GetDeepVeinCatheterizationAsync(strUserID, strRecordNo, null);
        }
        
        /// <remarks/>
        public void GetDeepVeinCatheterizationAsync(string strUserID, string strRecordNo, object userState) {
            if ((this.GetDeepVeinCatheterizationOperationCompleted == null)) {
                this.GetDeepVeinCatheterizationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDeepVeinCatheterizationOperationCompleted);
            }
            this.InvokeAsync("GetDeepVeinCatheterization", new object[] {
                        strUserID,
                        strRecordNo}, this.GetDeepVeinCatheterizationOperationCompleted, userState);
        }
        
        private void OnGetDeepVeinCatheterizationOperationCompleted(object arg) {
            if ((this.GetDeepVeinCatheterizationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDeepVeinCatheterizationCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://hemodialysis.org/GetScoreAssessmentInfo", RequestNamespace="http://hemodialysis.org/", ResponseNamespace="http://hemodialysis.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void GetScoreAssessmentInfo(string strUserID, string strRecordNo, string strAssessmentType, string strModifyTime, string strResetFlag) {
            this.Invoke("GetScoreAssessmentInfo", new object[] {
                        strUserID,
                        strRecordNo,
                        strAssessmentType,
                        strModifyTime,
                        strResetFlag});
        }
        
        /// <remarks/>
        public void GetScoreAssessmentInfoAsync(string strUserID, string strRecordNo, string strAssessmentType, string strModifyTime, string strResetFlag) {
            this.GetScoreAssessmentInfoAsync(strUserID, strRecordNo, strAssessmentType, strModifyTime, strResetFlag, null);
        }
        
        /// <remarks/>
        public void GetScoreAssessmentInfoAsync(string strUserID, string strRecordNo, string strAssessmentType, string strModifyTime, string strResetFlag, object userState) {
            if ((this.GetScoreAssessmentInfoOperationCompleted == null)) {
                this.GetScoreAssessmentInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetScoreAssessmentInfoOperationCompleted);
            }
            this.InvokeAsync("GetScoreAssessmentInfo", new object[] {
                        strUserID,
                        strRecordNo,
                        strAssessmentType,
                        strModifyTime,
                        strResetFlag}, this.GetScoreAssessmentInfoOperationCompleted, userState);
        }
        
        private void OnGetScoreAssessmentInfoOperationCompleted(object arg) {
            if ((this.GetScoreAssessmentInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetScoreAssessmentInfoCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://hemodialysis.org/GetPublicityAndEducationContent", RequestNamespace="http://hemodialysis.org/", ResponseNamespace="http://hemodialysis.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void GetPublicityAndEducationContent(string strUserID, string strItemName) {
            this.Invoke("GetPublicityAndEducationContent", new object[] {
                        strUserID,
                        strItemName});
        }
        
        /// <remarks/>
        public void GetPublicityAndEducationContentAsync(string strUserID, string strItemName) {
            this.GetPublicityAndEducationContentAsync(strUserID, strItemName, null);
        }
        
        /// <remarks/>
        public void GetPublicityAndEducationContentAsync(string strUserID, string strItemName, object userState) {
            if ((this.GetPublicityAndEducationContentOperationCompleted == null)) {
                this.GetPublicityAndEducationContentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPublicityAndEducationContentOperationCompleted);
            }
            this.InvokeAsync("GetPublicityAndEducationContent", new object[] {
                        strUserID,
                        strItemName}, this.GetPublicityAndEducationContentOperationCompleted, userState);
        }
        
        private void OnGetPublicityAndEducationContentOperationCompleted(object arg) {
            if ((this.GetPublicityAndEducationContentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPublicityAndEducationContentCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://hemodialysis.org/GetAssessFever", RequestNamespace="http://hemodialysis.org/", ResponseNamespace="http://hemodialysis.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void GetAssessFever(string strUserID, string strRecordNo) {
            this.Invoke("GetAssessFever", new object[] {
                        strUserID,
                        strRecordNo});
        }
        
        /// <remarks/>
        public void GetAssessFeverAsync(string strUserID, string strRecordNo) {
            this.GetAssessFeverAsync(strUserID, strRecordNo, null);
        }
        
        /// <remarks/>
        public void GetAssessFeverAsync(string strUserID, string strRecordNo, object userState) {
            if ((this.GetAssessFeverOperationCompleted == null)) {
                this.GetAssessFeverOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAssessFeverOperationCompleted);
            }
            this.InvokeAsync("GetAssessFever", new object[] {
                        strUserID,
                        strRecordNo}, this.GetAssessFeverOperationCompleted, userState);
        }
        
        private void OnGetAssessFeverOperationCompleted(object arg) {
            if ((this.GetAssessFeverCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAssessFeverCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://hemodialysis.org/GetDialyseRecordHistoryList", RequestNamespace="http://hemodialysis.org/", ResponseNamespace="http://hemodialysis.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void GetDialyseRecordHistoryList(string strUserID, string strPatientID, string strCount) {
            this.Invoke("GetDialyseRecordHistoryList", new object[] {
                        strUserID,
                        strPatientID,
                        strCount});
        }
        
        /// <remarks/>
        public void GetDialyseRecordHistoryListAsync(string strUserID, string strPatientID, string strCount) {
            this.GetDialyseRecordHistoryListAsync(strUserID, strPatientID, strCount, null);
        }
        
        /// <remarks/>
        public void GetDialyseRecordHistoryListAsync(string strUserID, string strPatientID, string strCount, object userState) {
            if ((this.GetDialyseRecordHistoryListOperationCompleted == null)) {
                this.GetDialyseRecordHistoryListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDialyseRecordHistoryListOperationCompleted);
            }
            this.InvokeAsync("GetDialyseRecordHistoryList", new object[] {
                        strUserID,
                        strPatientID,
                        strCount}, this.GetDialyseRecordHistoryListOperationCompleted, userState);
        }
        
        private void OnGetDialyseRecordHistoryListOperationCompleted(object arg) {
            if ((this.GetDialyseRecordHistoryListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDialyseRecordHistoryListCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://hemodialysis.org/GetPublicityAndEducationByPatientID", RequestNamespace="http://hemodialysis.org/", ResponseNamespace="http://hemodialysis.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void GetPublicityAndEducationByPatientID(string strUserID, string strPatientID) {
            this.Invoke("GetPublicityAndEducationByPatientID", new object[] {
                        strUserID,
                        strPatientID});
        }
        
        /// <remarks/>
        public void GetPublicityAndEducationByPatientIDAsync(string strUserID, string strPatientID) {
            this.GetPublicityAndEducationByPatientIDAsync(strUserID, strPatientID, null);
        }
        
        /// <remarks/>
        public void GetPublicityAndEducationByPatientIDAsync(string strUserID, string strPatientID, object userState) {
            if ((this.GetPublicityAndEducationByPatientIDOperationCompleted == null)) {
                this.GetPublicityAndEducationByPatientIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPublicityAndEducationByPatientIDOperationCompleted);
            }
            this.InvokeAsync("GetPublicityAndEducationByPatientID", new object[] {
                        strUserID,
                        strPatientID}, this.GetPublicityAndEducationByPatientIDOperationCompleted, userState);
        }
        
        private void OnGetPublicityAndEducationByPatientIDOperationCompleted(object arg) {
            if ((this.GetPublicityAndEducationByPatientIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPublicityAndEducationByPatientIDCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://hemodialysis.org/GetPublicityAndEducationHistoryList", RequestNamespace="http://hemodialysis.org/", ResponseNamespace="http://hemodialysis.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void GetPublicityAndEducationHistoryList(string strUserID, string strPatientID, string strCount) {
            this.Invoke("GetPublicityAndEducationHistoryList", new object[] {
                        strUserID,
                        strPatientID,
                        strCount});
        }
        
        /// <remarks/>
        public void GetPublicityAndEducationHistoryListAsync(string strUserID, string strPatientID, string strCount) {
            this.GetPublicityAndEducationHistoryListAsync(strUserID, strPatientID, strCount, null);
        }
        
        /// <remarks/>
        public void GetPublicityAndEducationHistoryListAsync(string strUserID, string strPatientID, string strCount, object userState) {
            if ((this.GetPublicityAndEducationHistoryListOperationCompleted == null)) {
                this.GetPublicityAndEducationHistoryListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPublicityAndEducationHistoryListOperationCompleted);
            }
            this.InvokeAsync("GetPublicityAndEducationHistoryList", new object[] {
                        strUserID,
                        strPatientID,
                        strCount}, this.GetPublicityAndEducationHistoryListOperationCompleted, userState);
        }
        
        private void OnGetPublicityAndEducationHistoryListOperationCompleted(object arg) {
            if ((this.GetPublicityAndEducationHistoryListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPublicityAndEducationHistoryListCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://hemodialysis.org/GetDisinfectionRecordInfo", RequestNamespace="http://hemodialysis.org/", ResponseNamespace="http://hemodialysis.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void GetDisinfectionRecordInfo(string strUserID, string strPatientID, string strRecordNo, string strCount) {
            this.Invoke("GetDisinfectionRecordInfo", new object[] {
                        strUserID,
                        strPatientID,
                        strRecordNo,
                        strCount});
        }
        
        /// <remarks/>
        public void GetDisinfectionRecordInfoAsync(string strUserID, string strPatientID, string strRecordNo, string strCount) {
            this.GetDisinfectionRecordInfoAsync(strUserID, strPatientID, strRecordNo, strCount, null);
        }
        
        /// <remarks/>
        public void GetDisinfectionRecordInfoAsync(string strUserID, string strPatientID, string strRecordNo, string strCount, object userState) {
            if ((this.GetDisinfectionRecordInfoOperationCompleted == null)) {
                this.GetDisinfectionRecordInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDisinfectionRecordInfoOperationCompleted);
            }
            this.InvokeAsync("GetDisinfectionRecordInfo", new object[] {
                        strUserID,
                        strPatientID,
                        strRecordNo,
                        strCount}, this.GetDisinfectionRecordInfoOperationCompleted, userState);
        }
        
        private void OnGetDisinfectionRecordInfoOperationCompleted(object arg) {
            if ((this.GetDisinfectionRecordInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDisinfectionRecordInfoCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://hemodialysis.org/GetDisinfectionRecordEndTime", RequestNamespace="http://hemodialysis.org/", ResponseNamespace="http://hemodialysis.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void GetDisinfectionRecordEndTime(string strDialyseMachineNo, string startDateTime) {
            this.Invoke("GetDisinfectionRecordEndTime", new object[] {
                        strDialyseMachineNo,
                        startDateTime});
        }
        
        /// <remarks/>
        public void GetDisinfectionRecordEndTimeAsync(string strDialyseMachineNo, string startDateTime) {
            this.GetDisinfectionRecordEndTimeAsync(strDialyseMachineNo, startDateTime, null);
        }
        
        /// <remarks/>
        public void GetDisinfectionRecordEndTimeAsync(string strDialyseMachineNo, string startDateTime, object userState) {
            if ((this.GetDisinfectionRecordEndTimeOperationCompleted == null)) {
                this.GetDisinfectionRecordEndTimeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDisinfectionRecordEndTimeOperationCompleted);
            }
            this.InvokeAsync("GetDisinfectionRecordEndTime", new object[] {
                        strDialyseMachineNo,
                        startDateTime}, this.GetDisinfectionRecordEndTimeOperationCompleted, userState);
        }
        
        private void OnGetDisinfectionRecordEndTimeOperationCompleted(object arg) {
            if ((this.GetDisinfectionRecordEndTimeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDisinfectionRecordEndTimeCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://hemodialysis.org/GetPatientInfo", RequestNamespace="http://hemodialysis.org/", ResponseNamespace="http://hemodialysis.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void GetPatientInfo(string strUserID, string strPatientID) {
            this.Invoke("GetPatientInfo", new object[] {
                        strUserID,
                        strPatientID});
        }
        
        /// <remarks/>
        public void GetPatientInfoAsync(string strUserID, string strPatientID) {
            this.GetPatientInfoAsync(strUserID, strPatientID, null);
        }
        
        /// <remarks/>
        public void GetPatientInfoAsync(string strUserID, string strPatientID, object userState) {
            if ((this.GetPatientInfoOperationCompleted == null)) {
                this.GetPatientInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPatientInfoOperationCompleted);
            }
            this.InvokeAsync("GetPatientInfo", new object[] {
                        strUserID,
                        strPatientID}, this.GetPatientInfoOperationCompleted, userState);
        }
        
        private void OnGetPatientInfoOperationCompleted(object arg) {
            if ((this.GetPatientInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPatientInfoCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://hemodialysis.org/GetHtmlInfo", RequestNamespace="http://hemodialysis.org/", ResponseNamespace="http://hemodialysis.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void GetHtmlInfo(string strUserID, string strPatientID, int iType) {
            this.Invoke("GetHtmlInfo", new object[] {
                        strUserID,
                        strPatientID,
                        iType});
        }
        
        /// <remarks/>
        public void GetHtmlInfoAsync(string strUserID, string strPatientID, int iType) {
            this.GetHtmlInfoAsync(strUserID, strPatientID, iType, null);
        }
        
        /// <remarks/>
        public void GetHtmlInfoAsync(string strUserID, string strPatientID, int iType, object userState) {
            if ((this.GetHtmlInfoOperationCompleted == null)) {
                this.GetHtmlInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetHtmlInfoOperationCompleted);
            }
            this.InvokeAsync("GetHtmlInfo", new object[] {
                        strUserID,
                        strPatientID,
                        iType}, this.GetHtmlInfoOperationCompleted, userState);
        }
        
        private void OnGetHtmlInfoOperationCompleted(object arg) {
            if ((this.GetHtmlInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetHtmlInfoCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://hemodialysis.org/GetShiftInfo", RequestNamespace="http://hemodialysis.org/", ResponseNamespace="http://hemodialysis.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void GetShiftInfo(string strUserID, string strID, string strPatientID, string strDate, string strAutoCreate) {
            this.Invoke("GetShiftInfo", new object[] {
                        strUserID,
                        strID,
                        strPatientID,
                        strDate,
                        strAutoCreate});
        }
        
        /// <remarks/>
        public void GetShiftInfoAsync(string strUserID, string strID, string strPatientID, string strDate, string strAutoCreate) {
            this.GetShiftInfoAsync(strUserID, strID, strPatientID, strDate, strAutoCreate, null);
        }
        
        /// <remarks/>
        public void GetShiftInfoAsync(string strUserID, string strID, string strPatientID, string strDate, string strAutoCreate, object userState) {
            if ((this.GetShiftInfoOperationCompleted == null)) {
                this.GetShiftInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetShiftInfoOperationCompleted);
            }
            this.InvokeAsync("GetShiftInfo", new object[] {
                        strUserID,
                        strID,
                        strPatientID,
                        strDate,
                        strAutoCreate}, this.GetShiftInfoOperationCompleted, userState);
        }
        
        private void OnGetShiftInfoOperationCompleted(object arg) {
            if ((this.GetShiftInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetShiftInfoCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://hemodialysis.org/QueryShiftInfo", RequestNamespace="http://hemodialysis.org/", ResponseNamespace="http://hemodialysis.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void QueryShiftInfo(string strUserID, string strPatientName, string strPatientCaseNo, string strNurseName, string strDate) {
            this.Invoke("QueryShiftInfo", new object[] {
                        strUserID,
                        strPatientName,
                        strPatientCaseNo,
                        strNurseName,
                        strDate});
        }
        
        /// <remarks/>
        public void QueryShiftInfoAsync(string strUserID, string strPatientName, string strPatientCaseNo, string strNurseName, string strDate) {
            this.QueryShiftInfoAsync(strUserID, strPatientName, strPatientCaseNo, strNurseName, strDate, null);
        }
        
        /// <remarks/>
        public void QueryShiftInfoAsync(string strUserID, string strPatientName, string strPatientCaseNo, string strNurseName, string strDate, object userState) {
            if ((this.QueryShiftInfoOperationCompleted == null)) {
                this.QueryShiftInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnQueryShiftInfoOperationCompleted);
            }
            this.InvokeAsync("QueryShiftInfo", new object[] {
                        strUserID,
                        strPatientName,
                        strPatientCaseNo,
                        strNurseName,
                        strDate}, this.QueryShiftInfoOperationCompleted, userState);
        }
        
        private void OnQueryShiftInfoOperationCompleted(object arg) {
            if ((this.QueryShiftInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.QueryShiftInfoCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://hemodialysis.org/GetPatientMedicineStock", RequestNamespace="http://hemodialysis.org/", ResponseNamespace="http://hemodialysis.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void GetPatientMedicineStock(string strUserID, string strPatientID) {
            this.Invoke("GetPatientMedicineStock", new object[] {
                        strUserID,
                        strPatientID});
        }
        
        /// <remarks/>
        public void GetPatientMedicineStockAsync(string strUserID, string strPatientID) {
            this.GetPatientMedicineStockAsync(strUserID, strPatientID, null);
        }
        
        /// <remarks/>
        public void GetPatientMedicineStockAsync(string strUserID, string strPatientID, object userState) {
            if ((this.GetPatientMedicineStockOperationCompleted == null)) {
                this.GetPatientMedicineStockOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPatientMedicineStockOperationCompleted);
            }
            this.InvokeAsync("GetPatientMedicineStock", new object[] {
                        strUserID,
                        strPatientID}, this.GetPatientMedicineStockOperationCompleted, userState);
        }
        
        private void OnGetPatientMedicineStockOperationCompleted(object arg) {
            if ((this.GetPatientMedicineStockCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPatientMedicineStockCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://hemodialysis.org/GetAccessoryCheckInfo", RequestNamespace="http://hemodialysis.org/", ResponseNamespace="http://hemodialysis.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void GetAccessoryCheckInfo(string strUserID, string strPatientID) {
            this.Invoke("GetAccessoryCheckInfo", new object[] {
                        strUserID,
                        strPatientID});
        }
        
        /// <remarks/>
        public void GetAccessoryCheckInfoAsync(string strUserID, string strPatientID) {
            this.GetAccessoryCheckInfoAsync(strUserID, strPatientID, null);
        }
        
        /// <remarks/>
        public void GetAccessoryCheckInfoAsync(string strUserID, string strPatientID, object userState) {
            if ((this.GetAccessoryCheckInfoOperationCompleted == null)) {
                this.GetAccessoryCheckInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAccessoryCheckInfoOperationCompleted);
            }
            this.InvokeAsync("GetAccessoryCheckInfo", new object[] {
                        strUserID,
                        strPatientID}, this.GetAccessoryCheckInfoOperationCompleted, userState);
        }
        
        private void OnGetAccessoryCheckInfoOperationCompleted(object arg) {
            if ((this.GetAccessoryCheckInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAccessoryCheckInfoCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://hemodialysis.org/UploadAccessoryCheckImage", RequestNamespace="http://hemodialysis.org/", ResponseNamespace="http://hemodialysis.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UploadAccessoryCheckImage(string strUserID, string strBase64String, string strJson, string strImageType) {
            this.Invoke("UploadAccessoryCheckImage", new object[] {
                        strUserID,
                        strBase64String,
                        strJson,
                        strImageType});
        }
        
        /// <remarks/>
        public void UploadAccessoryCheckImageAsync(string strUserID, string strBase64String, string strJson, string strImageType) {
            this.UploadAccessoryCheckImageAsync(strUserID, strBase64String, strJson, strImageType, null);
        }
        
        /// <remarks/>
        public void UploadAccessoryCheckImageAsync(string strUserID, string strBase64String, string strJson, string strImageType, object userState) {
            if ((this.UploadAccessoryCheckImageOperationCompleted == null)) {
                this.UploadAccessoryCheckImageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUploadAccessoryCheckImageOperationCompleted);
            }
            this.InvokeAsync("UploadAccessoryCheckImage", new object[] {
                        strUserID,
                        strBase64String,
                        strJson,
                        strImageType}, this.UploadAccessoryCheckImageOperationCompleted, userState);
        }
        
        private void OnUploadAccessoryCheckImageOperationCompleted(object arg) {
            if ((this.UploadAccessoryCheckImageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UploadAccessoryCheckImageCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://hemodialysis.org/GetVesselRoutePictureList", RequestNamespace="http://hemodialysis.org/", ResponseNamespace="http://hemodialysis.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void GetVesselRoutePictureList(string strUserID, string strPatientID, string strPageNo) {
            this.Invoke("GetVesselRoutePictureList", new object[] {
                        strUserID,
                        strPatientID,
                        strPageNo});
        }
        
        /// <remarks/>
        public void GetVesselRoutePictureListAsync(string strUserID, string strPatientID, string strPageNo) {
            this.GetVesselRoutePictureListAsync(strUserID, strPatientID, strPageNo, null);
        }
        
        /// <remarks/>
        public void GetVesselRoutePictureListAsync(string strUserID, string strPatientID, string strPageNo, object userState) {
            if ((this.GetVesselRoutePictureListOperationCompleted == null)) {
                this.GetVesselRoutePictureListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetVesselRoutePictureListOperationCompleted);
            }
            this.InvokeAsync("GetVesselRoutePictureList", new object[] {
                        strUserID,
                        strPatientID,
                        strPageNo}, this.GetVesselRoutePictureListOperationCompleted, userState);
        }
        
        private void OnGetVesselRoutePictureListOperationCompleted(object arg) {
            if ((this.GetVesselRoutePictureListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetVesselRoutePictureListCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://hemodialysis.org/GetProgressNoteList", RequestNamespace="http://hemodialysis.org/", ResponseNamespace="http://hemodialysis.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void GetProgressNoteList(string strUserID, string strPatientID, string strCount) {
            this.Invoke("GetProgressNoteList", new object[] {
                        strUserID,
                        strPatientID,
                        strCount});
        }
        
        /// <remarks/>
        public void GetProgressNoteListAsync(string strUserID, string strPatientID, string strCount) {
            this.GetProgressNoteListAsync(strUserID, strPatientID, strCount, null);
        }
        
        /// <remarks/>
        public void GetProgressNoteListAsync(string strUserID, string strPatientID, string strCount, object userState) {
            if ((this.GetProgressNoteListOperationCompleted == null)) {
                this.GetProgressNoteListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetProgressNoteListOperationCompleted);
            }
            this.InvokeAsync("GetProgressNoteList", new object[] {
                        strUserID,
                        strPatientID,
                        strCount}, this.GetProgressNoteListOperationCompleted, userState);
        }
        
        private void OnGetProgressNoteListOperationCompleted(object arg) {
            if ((this.GetProgressNoteListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetProgressNoteListCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://hemodialysis.org/GetProgressNoteInfo", RequestNamespace="http://hemodialysis.org/", ResponseNamespace="http://hemodialysis.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void GetProgressNoteInfo(string strUserID, string strID) {
            this.Invoke("GetProgressNoteInfo", new object[] {
                        strUserID,
                        strID});
        }
        
        /// <remarks/>
        public void GetProgressNoteInfoAsync(string strUserID, string strID) {
            this.GetProgressNoteInfoAsync(strUserID, strID, null);
        }
        
        /// <remarks/>
        public void GetProgressNoteInfoAsync(string strUserID, string strID, object userState) {
            if ((this.GetProgressNoteInfoOperationCompleted == null)) {
                this.GetProgressNoteInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetProgressNoteInfoOperationCompleted);
            }
            this.InvokeAsync("GetProgressNoteInfo", new object[] {
                        strUserID,
                        strID}, this.GetProgressNoteInfoOperationCompleted, userState);
        }
        
        private void OnGetProgressNoteInfoOperationCompleted(object arg) {
            if ((this.GetProgressNoteInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetProgressNoteInfoCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://hemodialysis.org/GetBodySurfaceDisinfectionRecordInfo", RequestNamespace="http://hemodialysis.org/", ResponseNamespace="http://hemodialysis.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void GetBodySurfaceDisinfectionRecordInfo(string strUserID, string strPatientID, string strRecordNo, string strCount) {
            this.Invoke("GetBodySurfaceDisinfectionRecordInfo", new object[] {
                        strUserID,
                        strPatientID,
                        strRecordNo,
                        strCount});
        }
        
        /// <remarks/>
        public void GetBodySurfaceDisinfectionRecordInfoAsync(string strUserID, string strPatientID, string strRecordNo, string strCount) {
            this.GetBodySurfaceDisinfectionRecordInfoAsync(strUserID, strPatientID, strRecordNo, strCount, null);
        }
        
        /// <remarks/>
        public void GetBodySurfaceDisinfectionRecordInfoAsync(string strUserID, string strPatientID, string strRecordNo, string strCount, object userState) {
            if ((this.GetBodySurfaceDisinfectionRecordInfoOperationCompleted == null)) {
                this.GetBodySurfaceDisinfectionRecordInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetBodySurfaceDisinfectionRecordInfoOperationCompleted);
            }
            this.InvokeAsync("GetBodySurfaceDisinfectionRecordInfo", new object[] {
                        strUserID,
                        strPatientID,
                        strRecordNo,
                        strCount}, this.GetBodySurfaceDisinfectionRecordInfoOperationCompleted, userState);
        }
        
        private void OnGetBodySurfaceDisinfectionRecordInfoOperationCompleted(object arg) {
            if ((this.GetBodySurfaceDisinfectionRecordInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetBodySurfaceDisinfectionRecordInfoCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://hemodialysis.org/GetedicalUserInfoStatisticsInfo", RequestNamespace="http://hemodialysis.org/", ResponseNamespace="http://hemodialysis.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void GetedicalUserInfoStatisticsInfo(string strUserID, string PatientsName, string Patienttype, string PaymentType, string QueryRange, string dtpStart, string dtpEnd) {
            this.Invoke("GetedicalUserInfoStatisticsInfo", new object[] {
                        strUserID,
                        PatientsName,
                        Patienttype,
                        PaymentType,
                        QueryRange,
                        dtpStart,
                        dtpEnd});
        }
        
        /// <remarks/>
        public void GetedicalUserInfoStatisticsInfoAsync(string strUserID, string PatientsName, string Patienttype, string PaymentType, string QueryRange, string dtpStart, string dtpEnd) {
            this.GetedicalUserInfoStatisticsInfoAsync(strUserID, PatientsName, Patienttype, PaymentType, QueryRange, dtpStart, dtpEnd, null);
        }
        
        /// <remarks/>
        public void GetedicalUserInfoStatisticsInfoAsync(string strUserID, string PatientsName, string Patienttype, string PaymentType, string QueryRange, string dtpStart, string dtpEnd, object userState) {
            if ((this.GetedicalUserInfoStatisticsInfoOperationCompleted == null)) {
                this.GetedicalUserInfoStatisticsInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetedicalUserInfoStatisticsInfoOperationCompleted);
            }
            this.InvokeAsync("GetedicalUserInfoStatisticsInfo", new object[] {
                        strUserID,
                        PatientsName,
                        Patienttype,
                        PaymentType,
                        QueryRange,
                        dtpStart,
                        dtpEnd}, this.GetedicalUserInfoStatisticsInfoOperationCompleted, userState);
        }
        
        private void OnGetedicalUserInfoStatisticsInfoOperationCompleted(object arg) {
            if ((this.GetedicalUserInfoStatisticsInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetedicalUserInfoStatisticsInfoCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://hemodialysis.org/GetPatMonthSummaryInfo", RequestNamespace="http://hemodialysis.org/", ResponseNamespace="http://hemodialysis.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void GetPatMonthSummaryInfo(string strUserID, string strPatientID, string StartDate, string EndDate) {
            this.Invoke("GetPatMonthSummaryInfo", new object[] {
                        strUserID,
                        strPatientID,
                        StartDate,
                        EndDate});
        }
        
        /// <remarks/>
        public void GetPatMonthSummaryInfoAsync(string strUserID, string strPatientID, string StartDate, string EndDate) {
            this.GetPatMonthSummaryInfoAsync(strUserID, strPatientID, StartDate, EndDate, null);
        }
        
        /// <remarks/>
        public void GetPatMonthSummaryInfoAsync(string strUserID, string strPatientID, string StartDate, string EndDate, object userState) {
            if ((this.GetPatMonthSummaryInfoOperationCompleted == null)) {
                this.GetPatMonthSummaryInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPatMonthSummaryInfoOperationCompleted);
            }
            this.InvokeAsync("GetPatMonthSummaryInfo", new object[] {
                        strUserID,
                        strPatientID,
                        StartDate,
                        EndDate}, this.GetPatMonthSummaryInfoOperationCompleted, userState);
        }
        
        private void OnGetPatMonthSummaryInfoOperationCompleted(object arg) {
            if ((this.GetPatMonthSummaryInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPatMonthSummaryInfoCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://hemodialysis.org/GetPatMonthSummaryhtmlInfo", RequestNamespace="http://hemodialysis.org/", ResponseNamespace="http://hemodialysis.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void GetPatMonthSummaryhtmlInfo(string strUserID, string strID) {
            this.Invoke("GetPatMonthSummaryhtmlInfo", new object[] {
                        strUserID,
                        strID});
        }
        
        /// <remarks/>
        public void GetPatMonthSummaryhtmlInfoAsync(string strUserID, string strID) {
            this.GetPatMonthSummaryhtmlInfoAsync(strUserID, strID, null);
        }
        
        /// <remarks/>
        public void GetPatMonthSummaryhtmlInfoAsync(string strUserID, string strID, object userState) {
            if ((this.GetPatMonthSummaryhtmlInfoOperationCompleted == null)) {
                this.GetPatMonthSummaryhtmlInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPatMonthSummaryhtmlInfoOperationCompleted);
            }
            this.InvokeAsync("GetPatMonthSummaryhtmlInfo", new object[] {
                        strUserID,
                        strID}, this.GetPatMonthSummaryhtmlInfoOperationCompleted, userState);
        }
        
        private void OnGetPatMonthSummaryhtmlInfoOperationCompleted(object arg) {
            if ((this.GetPatMonthSummaryhtmlInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPatMonthSummaryhtmlInfoCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://hemodialysis.org/GetDialysisMachineRunningRecordInfo", RequestNamespace="http://hemodialysis.org/", ResponseNamespace="http://hemodialysis.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void GetDialysisMachineRunningRecordInfo(string strUserID, string strPatientID, string strRecordNo, string strCount) {
            this.Invoke("GetDialysisMachineRunningRecordInfo", new object[] {
                        strUserID,
                        strPatientID,
                        strRecordNo,
                        strCount});
        }
        
        /// <remarks/>
        public void GetDialysisMachineRunningRecordInfoAsync(string strUserID, string strPatientID, string strRecordNo, string strCount) {
            this.GetDialysisMachineRunningRecordInfoAsync(strUserID, strPatientID, strRecordNo, strCount, null);
        }
        
        /// <remarks/>
        public void GetDialysisMachineRunningRecordInfoAsync(string strUserID, string strPatientID, string strRecordNo, string strCount, object userState) {
            if ((this.GetDialysisMachineRunningRecordInfoOperationCompleted == null)) {
                this.GetDialysisMachineRunningRecordInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDialysisMachineRunningRecordInfoOperationCompleted);
            }
            this.InvokeAsync("GetDialysisMachineRunningRecordInfo", new object[] {
                        strUserID,
                        strPatientID,
                        strRecordNo,
                        strCount}, this.GetDialysisMachineRunningRecordInfoOperationCompleted, userState);
        }
        
        private void OnGetDialysisMachineRunningRecordInfoOperationCompleted(object arg) {
            if ((this.GetDialysisMachineRunningRecordInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDialysisMachineRunningRecordInfoCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://hemodialysis.org/GetDialysisPrepareInfo", RequestNamespace="http://hemodialysis.org/", ResponseNamespace="http://hemodialysis.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void GetDialysisPrepareInfo(string strUserID, string strDate, string strInterval, string AreaCodeN) {
            this.Invoke("GetDialysisPrepareInfo", new object[] {
                        strUserID,
                        strDate,
                        strInterval,
                        AreaCodeN});
        }
        
        /// <remarks/>
        public void GetDialysisPrepareInfoAsync(string strUserID, string strDate, string strInterval, string AreaCodeN) {
            this.GetDialysisPrepareInfoAsync(strUserID, strDate, strInterval, AreaCodeN, null);
        }
        
        /// <remarks/>
        public void GetDialysisPrepareInfoAsync(string strUserID, string strDate, string strInterval, string AreaCodeN, object userState) {
            if ((this.GetDialysisPrepareInfoOperationCompleted == null)) {
                this.GetDialysisPrepareInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDialysisPrepareInfoOperationCompleted);
            }
            this.InvokeAsync("GetDialysisPrepareInfo", new object[] {
                        strUserID,
                        strDate,
                        strInterval,
                        AreaCodeN}, this.GetDialysisPrepareInfoOperationCompleted, userState);
        }
        
        private void OnGetDialysisPrepareInfoOperationCompleted(object arg) {
            if ((this.GetDialysisPrepareInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDialysisPrepareInfoCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://hemodialysis.org/GetNurseScheduleInfo", RequestNamespace="http://hemodialysis.org/", ResponseNamespace="http://hemodialysis.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void GetNurseScheduleInfo(string strUserID, string strDate, string strTimeInterval) {
            this.Invoke("GetNurseScheduleInfo", new object[] {
                        strUserID,
                        strDate,
                        strTimeInterval});
        }
        
        /// <remarks/>
        public void GetNurseScheduleInfoAsync(string strUserID, string strDate, string strTimeInterval) {
            this.GetNurseScheduleInfoAsync(strUserID, strDate, strTimeInterval, null);
        }
        
        /// <remarks/>
        public void GetNurseScheduleInfoAsync(string strUserID, string strDate, string strTimeInterval, object userState) {
            if ((this.GetNurseScheduleInfoOperationCompleted == null)) {
                this.GetNurseScheduleInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetNurseScheduleInfoOperationCompleted);
            }
            this.InvokeAsync("GetNurseScheduleInfo", new object[] {
                        strUserID,
                        strDate,
                        strTimeInterval}, this.GetNurseScheduleInfoOperationCompleted, userState);
        }
        
        private void OnGetNurseScheduleInfoOperationCompleted(object arg) {
            if ((this.GetNurseScheduleInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetNurseScheduleInfoCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://hemodialysis.org/GetNurseScheduleInfoCall", RequestNamespace="http://hemodialysis.org/", ResponseNamespace="http://hemodialysis.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void GetNurseScheduleInfoCall(string strUserID, string strDate, string strTimeInterval, string strArea, string strGroup) {
            this.Invoke("GetNurseScheduleInfoCall", new object[] {
                        strUserID,
                        strDate,
                        strTimeInterval,
                        strArea,
                        strGroup});
        }
        
        /// <remarks/>
        public void GetNurseScheduleInfoCallAsync(string strUserID, string strDate, string strTimeInterval, string strArea, string strGroup) {
            this.GetNurseScheduleInfoCallAsync(strUserID, strDate, strTimeInterval, strArea, strGroup, null);
        }
        
        /// <remarks/>
        public void GetNurseScheduleInfoCallAsync(string strUserID, string strDate, string strTimeInterval, string strArea, string strGroup, object userState) {
            if ((this.GetNurseScheduleInfoCallOperationCompleted == null)) {
                this.GetNurseScheduleInfoCallOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetNurseScheduleInfoCallOperationCompleted);
            }
            this.InvokeAsync("GetNurseScheduleInfoCall", new object[] {
                        strUserID,
                        strDate,
                        strTimeInterval,
                        strArea,
                        strGroup}, this.GetNurseScheduleInfoCallOperationCompleted, userState);
        }
        
        private void OnGetNurseScheduleInfoCallOperationCompleted(object arg) {
            if ((this.GetNurseScheduleInfoCallCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetNurseScheduleInfoCallCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://hemodialysis.org/GetDialysisReportList", RequestNamespace="http://hemodialysis.org/", ResponseNamespace="http://hemodialysis.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetDialysisReportList(string strPatientName, string strPatientCaseNo, string strInHospitalID, string strStartDate, string strEndDate) {
            object[] results = this.Invoke("GetDialysisReportList", new object[] {
                        strPatientName,
                        strPatientCaseNo,
                        strInHospitalID,
                        strStartDate,
                        strEndDate});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetDialysisReportListAsync(string strPatientName, string strPatientCaseNo, string strInHospitalID, string strStartDate, string strEndDate) {
            this.GetDialysisReportListAsync(strPatientName, strPatientCaseNo, strInHospitalID, strStartDate, strEndDate, null);
        }
        
        /// <remarks/>
        public void GetDialysisReportListAsync(string strPatientName, string strPatientCaseNo, string strInHospitalID, string strStartDate, string strEndDate, object userState) {
            if ((this.GetDialysisReportListOperationCompleted == null)) {
                this.GetDialysisReportListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDialysisReportListOperationCompleted);
            }
            this.InvokeAsync("GetDialysisReportList", new object[] {
                        strPatientName,
                        strPatientCaseNo,
                        strInHospitalID,
                        strStartDate,
                        strEndDate}, this.GetDialysisReportListOperationCompleted, userState);
        }
        
        private void OnGetDialysisReportListOperationCompleted(object arg) {
            if ((this.GetDialysisReportListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDialysisReportListCompleted(this, new GetDialysisReportListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://hemodialysis.org/GetPatientEquipmentStockInfo", RequestNamespace="http://hemodialysis.org/", ResponseNamespace="http://hemodialysis.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void GetPatientEquipmentStockInfo(string strUserID, string strPatientID) {
            this.Invoke("GetPatientEquipmentStockInfo", new object[] {
                        strUserID,
                        strPatientID});
        }
        
        /// <remarks/>
        public void GetPatientEquipmentStockInfoAsync(string strUserID, string strPatientID) {
            this.GetPatientEquipmentStockInfoAsync(strUserID, strPatientID, null);
        }
        
        /// <remarks/>
        public void GetPatientEquipmentStockInfoAsync(string strUserID, string strPatientID, object userState) {
            if ((this.GetPatientEquipmentStockInfoOperationCompleted == null)) {
                this.GetPatientEquipmentStockInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPatientEquipmentStockInfoOperationCompleted);
            }
            this.InvokeAsync("GetPatientEquipmentStockInfo", new object[] {
                        strUserID,
                        strPatientID}, this.GetPatientEquipmentStockInfoOperationCompleted, userState);
        }
        
        private void OnGetPatientEquipmentStockInfoOperationCompleted(object arg) {
            if ((this.GetPatientEquipmentStockInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPatientEquipmentStockInfoCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://hemodialysis.org/GetDialyseRecordRemind", RequestNamespace="http://hemodialysis.org/", ResponseNamespace="http://hemodialysis.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void GetDialyseRecordRemind(string strUserID) {
            this.Invoke("GetDialyseRecordRemind", new object[] {
                        strUserID});
        }
        
        /// <remarks/>
        public void GetDialyseRecordRemindAsync(string strUserID) {
            this.GetDialyseRecordRemindAsync(strUserID, null);
        }
        
        /// <remarks/>
        public void GetDialyseRecordRemindAsync(string strUserID, object userState) {
            if ((this.GetDialyseRecordRemindOperationCompleted == null)) {
                this.GetDialyseRecordRemindOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDialyseRecordRemindOperationCompleted);
            }
            this.InvokeAsync("GetDialyseRecordRemind", new object[] {
                        strUserID}, this.GetDialyseRecordRemindOperationCompleted, userState);
        }
        
        private void OnGetDialyseRecordRemindOperationCompleted(object arg) {
            if ((this.GetDialyseRecordRemindCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDialyseRecordRemindCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://hemodialysis.org/GetSub2PictureList", RequestNamespace="http://hemodialysis.org/", ResponseNamespace="http://hemodialysis.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void GetSub2PictureList(string strUserID, string strSub2ItemNo) {
            this.Invoke("GetSub2PictureList", new object[] {
                        strUserID,
                        strSub2ItemNo});
        }
        
        /// <remarks/>
        public void GetSub2PictureListAsync(string strUserID, string strSub2ItemNo) {
            this.GetSub2PictureListAsync(strUserID, strSub2ItemNo, null);
        }
        
        /// <remarks/>
        public void GetSub2PictureListAsync(string strUserID, string strSub2ItemNo, object userState) {
            if ((this.GetSub2PictureListOperationCompleted == null)) {
                this.GetSub2PictureListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSub2PictureListOperationCompleted);
            }
            this.InvokeAsync("GetSub2PictureList", new object[] {
                        strUserID,
                        strSub2ItemNo}, this.GetSub2PictureListOperationCompleted, userState);
        }
        
        private void OnGetSub2PictureListOperationCompleted(object arg) {
            if ((this.GetSub2PictureListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSub2PictureListCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://hemodialysis.org/GetSub2AudioList", RequestNamespace="http://hemodialysis.org/", ResponseNamespace="http://hemodialysis.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void GetSub2AudioList(string strUserID, string strSub2ItemNo) {
            this.Invoke("GetSub2AudioList", new object[] {
                        strUserID,
                        strSub2ItemNo});
        }
        
        /// <remarks/>
        public void GetSub2AudioListAsync(string strUserID, string strSub2ItemNo) {
            this.GetSub2AudioListAsync(strUserID, strSub2ItemNo, null);
        }
        
        /// <remarks/>
        public void GetSub2AudioListAsync(string strUserID, string strSub2ItemNo, object userState) {
            if ((this.GetSub2AudioListOperationCompleted == null)) {
                this.GetSub2AudioListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSub2AudioListOperationCompleted);
            }
            this.InvokeAsync("GetSub2AudioList", new object[] {
                        strUserID,
                        strSub2ItemNo}, this.GetSub2AudioListOperationCompleted, userState);
        }
        
        private void OnGetSub2AudioListOperationCompleted(object arg) {
            if ((this.GetSub2AudioListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSub2AudioListCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://hemodialysis.org/GetLaboratoryInfoLis", RequestNamespace="http://hemodialysis.org/", ResponseNamespace="http://hemodialysis.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void GetLaboratoryInfoLis(string strUserID, string vsPatientID, string staTime, string endTime) {
            this.Invoke("GetLaboratoryInfoLis", new object[] {
                        strUserID,
                        vsPatientID,
                        staTime,
                        endTime});
        }
        
        /// <remarks/>
        public void GetLaboratoryInfoLisAsync(string strUserID, string vsPatientID, string staTime, string endTime) {
            this.GetLaboratoryInfoLisAsync(strUserID, vsPatientID, staTime, endTime, null);
        }
        
        /// <remarks/>
        public void GetLaboratoryInfoLisAsync(string strUserID, string vsPatientID, string staTime, string endTime, object userState) {
            if ((this.GetLaboratoryInfoLisOperationCompleted == null)) {
                this.GetLaboratoryInfoLisOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLaboratoryInfoLisOperationCompleted);
            }
            this.InvokeAsync("GetLaboratoryInfoLis", new object[] {
                        strUserID,
                        vsPatientID,
                        staTime,
                        endTime}, this.GetLaboratoryInfoLisOperationCompleted, userState);
        }
        
        private void OnGetLaboratoryInfoLisOperationCompleted(object arg) {
            if ((this.GetLaboratoryInfoLisCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLaboratoryInfoLisCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://hemodialysis.org/GetLaboratorySmallInfoLis", RequestNamespace="http://hemodialysis.org/", ResponseNamespace="http://hemodialysis.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void GetLaboratorySmallInfoLis(string strUserID, string testNo) {
            this.Invoke("GetLaboratorySmallInfoLis", new object[] {
                        strUserID,
                        testNo});
        }
        
        /// <remarks/>
        public void GetLaboratorySmallInfoLisAsync(string strUserID, string testNo) {
            this.GetLaboratorySmallInfoLisAsync(strUserID, testNo, null);
        }
        
        /// <remarks/>
        public void GetLaboratorySmallInfoLisAsync(string strUserID, string testNo, object userState) {
            if ((this.GetLaboratorySmallInfoLisOperationCompleted == null)) {
                this.GetLaboratorySmallInfoLisOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLaboratorySmallInfoLisOperationCompleted);
            }
            this.InvokeAsync("GetLaboratorySmallInfoLis", new object[] {
                        strUserID,
                        testNo}, this.GetLaboratorySmallInfoLisOperationCompleted, userState);
        }
        
        private void OnGetLaboratorySmallInfoLisOperationCompleted(object arg) {
            if ((this.GetLaboratorySmallInfoLisCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLaboratorySmallInfoLisCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://hemodialysis.org/DelDoctorAdvice", RequestNamespace="http://hemodialysis.org/", ResponseNamespace="http://hemodialysis.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DelDoctorAdvice(string vsRecordNo, string vsItemNo, string vsUserID, string vsModifyTime) {
            this.Invoke("DelDoctorAdvice", new object[] {
                        vsRecordNo,
                        vsItemNo,
                        vsUserID,
                        vsModifyTime});
        }
        
        /// <remarks/>
        public void DelDoctorAdviceAsync(string vsRecordNo, string vsItemNo, string vsUserID, string vsModifyTime) {
            this.DelDoctorAdviceAsync(vsRecordNo, vsItemNo, vsUserID, vsModifyTime, null);
        }
        
        /// <remarks/>
        public void DelDoctorAdviceAsync(string vsRecordNo, string vsItemNo, string vsUserID, string vsModifyTime, object userState) {
            if ((this.DelDoctorAdviceOperationCompleted == null)) {
                this.DelDoctorAdviceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDelDoctorAdviceOperationCompleted);
            }
            this.InvokeAsync("DelDoctorAdvice", new object[] {
                        vsRecordNo,
                        vsItemNo,
                        vsUserID,
                        vsModifyTime}, this.DelDoctorAdviceOperationCompleted, userState);
        }
        
        private void OnDelDoctorAdviceOperationCompleted(object arg) {
            if ((this.DelDoctorAdviceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DelDoctorAdviceCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://hemodialysis.org/DelLongTermDialyseAdviceRecord", RequestNamespace="http://hemodialysis.org/", ResponseNamespace="http://hemodialysis.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DelLongTermDialyseAdviceRecord(string vsUserId, string LongTermDialyseAdviceID) {
            this.Invoke("DelLongTermDialyseAdviceRecord", new object[] {
                        vsUserId,
                        LongTermDialyseAdviceID});
        }
        
        /// <remarks/>
        public void DelLongTermDialyseAdviceRecordAsync(string vsUserId, string LongTermDialyseAdviceID) {
            this.DelLongTermDialyseAdviceRecordAsync(vsUserId, LongTermDialyseAdviceID, null);
        }
        
        /// <remarks/>
        public void DelLongTermDialyseAdviceRecordAsync(string vsUserId, string LongTermDialyseAdviceID, object userState) {
            if ((this.DelLongTermDialyseAdviceRecordOperationCompleted == null)) {
                this.DelLongTermDialyseAdviceRecordOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDelLongTermDialyseAdviceRecordOperationCompleted);
            }
            this.InvokeAsync("DelLongTermDialyseAdviceRecord", new object[] {
                        vsUserId,
                        LongTermDialyseAdviceID}, this.DelLongTermDialyseAdviceRecordOperationCompleted, userState);
        }
        
        private void OnDelLongTermDialyseAdviceRecordOperationCompleted(object arg) {
            if ((this.DelLongTermDialyseAdviceRecordCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DelLongTermDialyseAdviceRecordCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://hemodialysis.org/DelDialyseInfo", RequestNamespace="http://hemodialysis.org/", ResponseNamespace="http://hemodialysis.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DelDialyseInfo(string vsRecordNo, string vsItemNo, string vsUserId, string vsModifyTime) {
            this.Invoke("DelDialyseInfo", new object[] {
                        vsRecordNo,
                        vsItemNo,
                        vsUserId,
                        vsModifyTime});
        }
        
        /// <remarks/>
        public void DelDialyseInfoAsync(string vsRecordNo, string vsItemNo, string vsUserId, string vsModifyTime) {
            this.DelDialyseInfoAsync(vsRecordNo, vsItemNo, vsUserId, vsModifyTime, null);
        }
        
        /// <remarks/>
        public void DelDialyseInfoAsync(string vsRecordNo, string vsItemNo, string vsUserId, string vsModifyTime, object userState) {
            if ((this.DelDialyseInfoOperationCompleted == null)) {
                this.DelDialyseInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDelDialyseInfoOperationCompleted);
            }
            this.InvokeAsync("DelDialyseInfo", new object[] {
                        vsRecordNo,
                        vsItemNo,
                        vsUserId,
                        vsModifyTime}, this.DelDialyseInfoOperationCompleted, userState);
        }
        
        private void OnDelDialyseInfoOperationCompleted(object arg) {
            if ((this.DelDialyseInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DelDialyseInfoCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://hemodialysis.org/DelAllDialyseData", RequestNamespace="http://hemodialysis.org/", ResponseNamespace="http://hemodialysis.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DelAllDialyseData(string vsPatientID, string vsRecordNo, string vsUserId, string vsModifyTime) {
            this.Invoke("DelAllDialyseData", new object[] {
                        vsPatientID,
                        vsRecordNo,
                        vsUserId,
                        vsModifyTime});
        }
        
        /// <remarks/>
        public void DelAllDialyseDataAsync(string vsPatientID, string vsRecordNo, string vsUserId, string vsModifyTime) {
            this.DelAllDialyseDataAsync(vsPatientID, vsRecordNo, vsUserId, vsModifyTime, null);
        }
        
        /// <remarks/>
        public void DelAllDialyseDataAsync(string vsPatientID, string vsRecordNo, string vsUserId, string vsModifyTime, object userState) {
            if ((this.DelAllDialyseDataOperationCompleted == null)) {
                this.DelAllDialyseDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDelAllDialyseDataOperationCompleted);
            }
            this.InvokeAsync("DelAllDialyseData", new object[] {
                        vsPatientID,
                        vsRecordNo,
                        vsUserId,
                        vsModifyTime}, this.DelAllDialyseDataOperationCompleted, userState);
        }
        
        private void OnDelAllDialyseDataOperationCompleted(object arg) {
            if ((this.DelAllDialyseDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DelAllDialyseDataCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://hemodialysis.org/DelDialyseMaterial", RequestNamespace="http://hemodialysis.org/", ResponseNamespace="http://hemodialysis.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DelDialyseMaterial(string vsUserId, string vsJson, string vsModifyTime) {
            this.Invoke("DelDialyseMaterial", new object[] {
                        vsUserId,
                        vsJson,
                        vsModifyTime});
        }
        
        /// <remarks/>
        public void DelDialyseMaterialAsync(string vsUserId, string vsJson, string vsModifyTime) {
            this.DelDialyseMaterialAsync(vsUserId, vsJson, vsModifyTime, null);
        }
        
        /// <remarks/>
        public void DelDialyseMaterialAsync(string vsUserId, string vsJson, string vsModifyTime, object userState) {
            if ((this.DelDialyseMaterialOperationCompleted == null)) {
                this.DelDialyseMaterialOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDelDialyseMaterialOperationCompleted);
            }
            this.InvokeAsync("DelDialyseMaterial", new object[] {
                        vsUserId,
                        vsJson,
                        vsModifyTime}, this.DelDialyseMaterialOperationCompleted, userState);
        }
        
        private void OnDelDialyseMaterialOperationCompleted(object arg) {
            if ((this.DelDialyseMaterialCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DelDialyseMaterialCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://hemodialysis.org/DelDialyseMaterialDetail", RequestNamespace="http://hemodialysis.org/", ResponseNamespace="http://hemodialysis.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DelDialyseMaterialDetail(string strUserId, string strRecordNO, string strItemDetailID, string strModifyTime) {
            this.Invoke("DelDialyseMaterialDetail", new object[] {
                        strUserId,
                        strRecordNO,
                        strItemDetailID,
                        strModifyTime});
        }
        
        /// <remarks/>
        public void DelDialyseMaterialDetailAsync(string strUserId, string strRecordNO, string strItemDetailID, string strModifyTime) {
            this.DelDialyseMaterialDetailAsync(strUserId, strRecordNO, strItemDetailID, strModifyTime, null);
        }
        
        /// <remarks/>
        public void DelDialyseMaterialDetailAsync(string strUserId, string strRecordNO, string strItemDetailID, string strModifyTime, object userState) {
            if ((this.DelDialyseMaterialDetailOperationCompleted == null)) {
                this.DelDialyseMaterialDetailOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDelDialyseMaterialDetailOperationCompleted);
            }
            this.InvokeAsync("DelDialyseMaterialDetail", new object[] {
                        strUserId,
                        strRecordNO,
                        strItemDetailID,
                        strModifyTime}, this.DelDialyseMaterialDetailOperationCompleted, userState);
        }
        
        private void OnDelDialyseMaterialDetailOperationCompleted(object arg) {
            if ((this.DelDialyseMaterialDetailCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DelDialyseMaterialDetailCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://hemodialysis.org/DeleteAccessoryCheckImage", RequestNamespace="http://hemodialysis.org/", ResponseNamespace="http://hemodialysis.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteAccessoryCheckImage(string strUserID, string strJson, string strImageType, string strImageInfoJosn) {
            this.Invoke("DeleteAccessoryCheckImage", new object[] {
                        strUserID,
                        strJson,
                        strImageType,
                        strImageInfoJosn});
        }
        
        /// <remarks/>
        public void DeleteAccessoryCheckImageAsync(string strUserID, string strJson, string strImageType, string strImageInfoJosn) {
            this.DeleteAccessoryCheckImageAsync(strUserID, strJson, strImageType, strImageInfoJosn, null);
        }
        
        /// <remarks/>
        public void DeleteAccessoryCheckImageAsync(string strUserID, string strJson, string strImageType, string strImageInfoJosn, object userState) {
            if ((this.DeleteAccessoryCheckImageOperationCompleted == null)) {
                this.DeleteAccessoryCheckImageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteAccessoryCheckImageOperationCompleted);
            }
            this.InvokeAsync("DeleteAccessoryCheckImage", new object[] {
                        strUserID,
                        strJson,
                        strImageType,
                        strImageInfoJosn}, this.DeleteAccessoryCheckImageOperationCompleted, userState);
        }
        
        private void OnDeleteAccessoryCheckImageOperationCompleted(object arg) {
            if ((this.DeleteAccessoryCheckImageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteAccessoryCheckImageCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://hemodialysis.org/DeleteAccessoryCheckInfo", RequestNamespace="http://hemodialysis.org/", ResponseNamespace="http://hemodialysis.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteAccessoryCheckInfo(string strUserID, string strAccessoryCheckID) {
            this.Invoke("DeleteAccessoryCheckInfo", new object[] {
                        strUserID,
                        strAccessoryCheckID});
        }
        
        /// <remarks/>
        public void DeleteAccessoryCheckInfoAsync(string strUserID, string strAccessoryCheckID) {
            this.DeleteAccessoryCheckInfoAsync(strUserID, strAccessoryCheckID, null);
        }
        
        /// <remarks/>
        public void DeleteAccessoryCheckInfoAsync(string strUserID, string strAccessoryCheckID, object userState) {
            if ((this.DeleteAccessoryCheckInfoOperationCompleted == null)) {
                this.DeleteAccessoryCheckInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteAccessoryCheckInfoOperationCompleted);
            }
            this.InvokeAsync("DeleteAccessoryCheckInfo", new object[] {
                        strUserID,
                        strAccessoryCheckID}, this.DeleteAccessoryCheckInfoOperationCompleted, userState);
        }
        
        private void OnDeleteAccessoryCheckInfoOperationCompleted(object arg) {
            if ((this.DeleteAccessoryCheckInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteAccessoryCheckInfoCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://hemodialysis.org/DeleteExecutionPublicityAndEducation", RequestNamespace="http://hemodialysis.org/", ResponseNamespace="http://hemodialysis.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteExecutionPublicityAndEducation(string strUserID, string strID) {
            this.Invoke("DeleteExecutionPublicityAndEducation", new object[] {
                        strUserID,
                        strID});
        }
        
        /// <remarks/>
        public void DeleteExecutionPublicityAndEducationAsync(string strUserID, string strID) {
            this.DeleteExecutionPublicityAndEducationAsync(strUserID, strID, null);
        }
        
        /// <remarks/>
        public void DeleteExecutionPublicityAndEducationAsync(string strUserID, string strID, object userState) {
            if ((this.DeleteExecutionPublicityAndEducationOperationCompleted == null)) {
                this.DeleteExecutionPublicityAndEducationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteExecutionPublicityAndEducationOperationCompleted);
            }
            this.InvokeAsync("DeleteExecutionPublicityAndEducation", new object[] {
                        strUserID,
                        strID}, this.DeleteExecutionPublicityAndEducationOperationCompleted, userState);
        }
        
        private void OnDeleteExecutionPublicityAndEducationOperationCompleted(object arg) {
            if ((this.DeleteExecutionPublicityAndEducationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteExecutionPublicityAndEducationCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://hemodialysis.org/DeleteSub2Detail", RequestNamespace="http://hemodialysis.org/", ResponseNamespace="http://hemodialysis.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteSub2Detail(string strUserID, string strDetailID) {
            this.Invoke("DeleteSub2Detail", new object[] {
                        strUserID,
                        strDetailID});
        }
        
        /// <remarks/>
        public void DeleteSub2DetailAsync(string strUserID, string strDetailID) {
            this.DeleteSub2DetailAsync(strUserID, strDetailID, null);
        }
        
        /// <remarks/>
        public void DeleteSub2DetailAsync(string strUserID, string strDetailID, object userState) {
            if ((this.DeleteSub2DetailOperationCompleted == null)) {
                this.DeleteSub2DetailOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteSub2DetailOperationCompleted);
            }
            this.InvokeAsync("DeleteSub2Detail", new object[] {
                        strUserID,
                        strDetailID}, this.DeleteSub2DetailOperationCompleted, userState);
        }
        
        private void OnDeleteSub2DetailOperationCompleted(object arg) {
            if ((this.DeleteSub2DetailCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteSub2DetailCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://hemodialysis.org/InsertDialyseAdviceRecord", RequestNamespace="http://hemodialysis.org/", ResponseNamespace="http://hemodialysis.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void InsertDialyseAdviceRecord(string vsUserId, string vsJson, string strCheckPatientStore) {
            this.Invoke("InsertDialyseAdviceRecord", new object[] {
                        vsUserId,
                        vsJson,
                        strCheckPatientStore});
        }
        
        /// <remarks/>
        public void InsertDialyseAdviceRecordAsync(string vsUserId, string vsJson, string strCheckPatientStore) {
            this.InsertDialyseAdviceRecordAsync(vsUserId, vsJson, strCheckPatientStore, null);
        }
        
        /// <remarks/>
        public void InsertDialyseAdviceRecordAsync(string vsUserId, string vsJson, string strCheckPatientStore, object userState) {
            if ((this.InsertDialyseAdviceRecordOperationCompleted == null)) {
                this.InsertDialyseAdviceRecordOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertDialyseAdviceRecordOperationCompleted);
            }
            this.InvokeAsync("InsertDialyseAdviceRecord", new object[] {
                        vsUserId,
                        vsJson,
                        strCheckPatientStore}, this.InsertDialyseAdviceRecordOperationCompleted, userState);
        }
        
        private void OnInsertDialyseAdviceRecordOperationCompleted(object arg) {
            if ((this.InsertDialyseAdviceRecordCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertDialyseAdviceRecordCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://hemodialysis.org/InsertLongTermDialyseAdviceRecord", RequestNamespace="http://hemodialysis.org/", ResponseNamespace="http://hemodialysis.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void InsertLongTermDialyseAdviceRecord(string vsUserId, string vsJson) {
            this.Invoke("InsertLongTermDialyseAdviceRecord", new object[] {
                        vsUserId,
                        vsJson});
        }
        
        /// <remarks/>
        public void InsertLongTermDialyseAdviceRecordAsync(string vsUserId, string vsJson) {
            this.InsertLongTermDialyseAdviceRecordAsync(vsUserId, vsJson, null);
        }
        
        /// <remarks/>
        public void InsertLongTermDialyseAdviceRecordAsync(string vsUserId, string vsJson, object userState) {
            if ((this.InsertLongTermDialyseAdviceRecordOperationCompleted == null)) {
                this.InsertLongTermDialyseAdviceRecordOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertLongTermDialyseAdviceRecordOperationCompleted);
            }
            this.InvokeAsync("InsertLongTermDialyseAdviceRecord", new object[] {
                        vsUserId,
                        vsJson}, this.InsertLongTermDialyseAdviceRecordOperationCompleted, userState);
        }
        
        private void OnInsertLongTermDialyseAdviceRecordOperationCompleted(object arg) {
            if ((this.InsertLongTermDialyseAdviceRecordCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertLongTermDialyseAdviceRecordCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://hemodialysis.org/InsertDialyseTimeRecord", RequestNamespace="http://hemodialysis.org/", ResponseNamespace="http://hemodialysis.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void InsertDialyseTimeRecord(string vsUserId, string vsJson) {
            this.Invoke("InsertDialyseTimeRecord", new object[] {
                        vsUserId,
                        vsJson});
        }
        
        /// <remarks/>
        public void InsertDialyseTimeRecordAsync(string vsUserId, string vsJson) {
            this.InsertDialyseTimeRecordAsync(vsUserId, vsJson, null);
        }
        
        /// <remarks/>
        public void InsertDialyseTimeRecordAsync(string vsUserId, string vsJson, object userState) {
            if ((this.InsertDialyseTimeRecordOperationCompleted == null)) {
                this.InsertDialyseTimeRecordOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertDialyseTimeRecordOperationCompleted);
            }
            this.InvokeAsync("InsertDialyseTimeRecord", new object[] {
                        vsUserId,
                        vsJson}, this.InsertDialyseTimeRecordOperationCompleted, userState);
        }
        
        private void OnInsertDialyseTimeRecordOperationCompleted(object arg) {
            if ((this.InsertDialyseTimeRecordCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertDialyseTimeRecordCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://hemodialysis.org/InsertDialyseMaterial", RequestNamespace="http://hemodialysis.org/", ResponseNamespace="http://hemodialysis.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void InsertDialyseMaterial(string vsUserId, string vsRecordNo, string vsMaterialID, string vsItemClass, string vsDutyNurse, string vsModifyTime) {
            this.Invoke("InsertDialyseMaterial", new object[] {
                        vsUserId,
                        vsRecordNo,
                        vsMaterialID,
                        vsItemClass,
                        vsDutyNurse,
                        vsModifyTime});
        }
        
        /// <remarks/>
        public void InsertDialyseMaterialAsync(string vsUserId, string vsRecordNo, string vsMaterialID, string vsItemClass, string vsDutyNurse, string vsModifyTime) {
            this.InsertDialyseMaterialAsync(vsUserId, vsRecordNo, vsMaterialID, vsItemClass, vsDutyNurse, vsModifyTime, null);
        }
        
        /// <remarks/>
        public void InsertDialyseMaterialAsync(string vsUserId, string vsRecordNo, string vsMaterialID, string vsItemClass, string vsDutyNurse, string vsModifyTime, object userState) {
            if ((this.InsertDialyseMaterialOperationCompleted == null)) {
                this.InsertDialyseMaterialOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertDialyseMaterialOperationCompleted);
            }
            this.InvokeAsync("InsertDialyseMaterial", new object[] {
                        vsUserId,
                        vsRecordNo,
                        vsMaterialID,
                        vsItemClass,
                        vsDutyNurse,
                        vsModifyTime}, this.InsertDialyseMaterialOperationCompleted, userState);
        }
        
        private void OnInsertDialyseMaterialOperationCompleted(object arg) {
            if ((this.InsertDialyseMaterialCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertDialyseMaterialCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://hemodialysis.org/InsertDialyseMaterialDetail", RequestNamespace="http://hemodialysis.org/", ResponseNamespace="http://hemodialysis.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void InsertDialyseMaterialDetail(string vsRecordNo, string vsMaterialID, string vsParentItemNo, string vsItemClass, string vsDutyNurse, string vsModifyTime, string vsUserId) {
            this.Invoke("InsertDialyseMaterialDetail", new object[] {
                        vsRecordNo,
                        vsMaterialID,
                        vsParentItemNo,
                        vsItemClass,
                        vsDutyNurse,
                        vsModifyTime,
                        vsUserId});
        }
        
        /// <remarks/>
        public void InsertDialyseMaterialDetailAsync(string vsRecordNo, string vsMaterialID, string vsParentItemNo, string vsItemClass, string vsDutyNurse, string vsModifyTime, string vsUserId) {
            this.InsertDialyseMaterialDetailAsync(vsRecordNo, vsMaterialID, vsParentItemNo, vsItemClass, vsDutyNurse, vsModifyTime, vsUserId, null);
        }
        
        /// <remarks/>
        public void InsertDialyseMaterialDetailAsync(string vsRecordNo, string vsMaterialID, string vsParentItemNo, string vsItemClass, string vsDutyNurse, string vsModifyTime, string vsUserId, object userState) {
            if ((this.InsertDialyseMaterialDetailOperationCompleted == null)) {
                this.InsertDialyseMaterialDetailOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertDialyseMaterialDetailOperationCompleted);
            }
            this.InvokeAsync("InsertDialyseMaterialDetail", new object[] {
                        vsRecordNo,
                        vsMaterialID,
                        vsParentItemNo,
                        vsItemClass,
                        vsDutyNurse,
                        vsModifyTime,
                        vsUserId}, this.InsertDialyseMaterialDetailOperationCompleted, userState);
        }
        
        private void OnInsertDialyseMaterialDetailOperationCompleted(object arg) {
            if ((this.InsertDialyseMaterialDetailCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertDialyseMaterialDetailCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://hemodialysis.org/InsertDialyseData", RequestNamespace="http://hemodialysis.org/", ResponseNamespace="http://hemodialysis.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void InsertDialyseData(string strUserID, string strPatientID, string strDate) {
            this.Invoke("InsertDialyseData", new object[] {
                        strUserID,
                        strPatientID,
                        strDate});
        }
        
        /// <remarks/>
        public void InsertDialyseDataAsync(string strUserID, string strPatientID, string strDate) {
            this.InsertDialyseDataAsync(strUserID, strPatientID, strDate, null);
        }
        
        /// <remarks/>
        public void InsertDialyseDataAsync(string strUserID, string strPatientID, string strDate, object userState) {
            if ((this.InsertDialyseDataOperationCompleted == null)) {
                this.InsertDialyseDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertDialyseDataOperationCompleted);
            }
            this.InvokeAsync("InsertDialyseData", new object[] {
                        strUserID,
                        strPatientID,
                        strDate}, this.InsertDialyseDataOperationCompleted, userState);
        }
        
        private void OnInsertDialyseDataOperationCompleted(object arg) {
            if ((this.InsertDialyseDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertDialyseDataCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://hemodialysis.org/AddNewGroupForPublicityAndEducation", RequestNamespace="http://hemodialysis.org/", ResponseNamespace="http://hemodialysis.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void AddNewGroupForPublicityAndEducation(string strUserID, string strJson, string strPatientID) {
            this.Invoke("AddNewGroupForPublicityAndEducation", new object[] {
                        strUserID,
                        strJson,
                        strPatientID});
        }
        
        /// <remarks/>
        public void AddNewGroupForPublicityAndEducationAsync(string strUserID, string strJson, string strPatientID) {
            this.AddNewGroupForPublicityAndEducationAsync(strUserID, strJson, strPatientID, null);
        }
        
        /// <remarks/>
        public void AddNewGroupForPublicityAndEducationAsync(string strUserID, string strJson, string strPatientID, object userState) {
            if ((this.AddNewGroupForPublicityAndEducationOperationCompleted == null)) {
                this.AddNewGroupForPublicityAndEducationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddNewGroupForPublicityAndEducationOperationCompleted);
            }
            this.InvokeAsync("AddNewGroupForPublicityAndEducation", new object[] {
                        strUserID,
                        strJson,
                        strPatientID}, this.AddNewGroupForPublicityAndEducationOperationCompleted, userState);
        }
        
        private void OnAddNewGroupForPublicityAndEducationOperationCompleted(object arg) {
            if ((this.AddNewGroupForPublicityAndEducationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddNewGroupForPublicityAndEducationCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://hemodialysis.org/SaveNurseTsjs", RequestNamespace="http://hemodialysis.org/", ResponseNamespace="http://hemodialysis.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SaveNurseTsjs(string vsUserId, string date, string strJson) {
            this.Invoke("SaveNurseTsjs", new object[] {
                        vsUserId,
                        date,
                        strJson});
        }
        
        /// <remarks/>
        public void SaveNurseTsjsAsync(string vsUserId, string date, string strJson) {
            this.SaveNurseTsjsAsync(vsUserId, date, strJson, null);
        }
        
        /// <remarks/>
        public void SaveNurseTsjsAsync(string vsUserId, string date, string strJson, object userState) {
            if ((this.SaveNurseTsjsOperationCompleted == null)) {
                this.SaveNurseTsjsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSaveNurseTsjsOperationCompleted);
            }
            this.InvokeAsync("SaveNurseTsjs", new object[] {
                        vsUserId,
                        date,
                        strJson}, this.SaveNurseTsjsOperationCompleted, userState);
        }
        
        private void OnSaveNurseTsjsOperationCompleted(object arg) {
            if ((this.SaveNurseTsjsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SaveNurseTsjsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://hemodialysis.org/AddSub2Picture", RequestNamespace="http://hemodialysis.org/", ResponseNamespace="http://hemodialysis.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void AddSub2Picture(string strUserID, string strSub2ItemNo, string strData) {
            this.Invoke("AddSub2Picture", new object[] {
                        strUserID,
                        strSub2ItemNo,
                        strData});
        }
        
        /// <remarks/>
        public void AddSub2PictureAsync(string strUserID, string strSub2ItemNo, string strData) {
            this.AddSub2PictureAsync(strUserID, strSub2ItemNo, strData, null);
        }
        
        /// <remarks/>
        public void AddSub2PictureAsync(string strUserID, string strSub2ItemNo, string strData, object userState) {
            if ((this.AddSub2PictureOperationCompleted == null)) {
                this.AddSub2PictureOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddSub2PictureOperationCompleted);
            }
            this.InvokeAsync("AddSub2Picture", new object[] {
                        strUserID,
                        strSub2ItemNo,
                        strData}, this.AddSub2PictureOperationCompleted, userState);
        }
        
        private void OnAddSub2PictureOperationCompleted(object arg) {
            if ((this.AddSub2PictureCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddSub2PictureCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://hemodialysis.org/AddSub2Audio", RequestNamespace="http://hemodialysis.org/", ResponseNamespace="http://hemodialysis.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void AddSub2Audio(string strUserID, string strSub2ItemNo, string strData) {
            this.Invoke("AddSub2Audio", new object[] {
                        strUserID,
                        strSub2ItemNo,
                        strData});
        }
        
        /// <remarks/>
        public void AddSub2AudioAsync(string strUserID, string strSub2ItemNo, string strData) {
            this.AddSub2AudioAsync(strUserID, strSub2ItemNo, strData, null);
        }
        
        /// <remarks/>
        public void AddSub2AudioAsync(string strUserID, string strSub2ItemNo, string strData, object userState) {
            if ((this.AddSub2AudioOperationCompleted == null)) {
                this.AddSub2AudioOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddSub2AudioOperationCompleted);
            }
            this.InvokeAsync("AddSub2Audio", new object[] {
                        strUserID,
                        strSub2ItemNo,
                        strData}, this.AddSub2AudioOperationCompleted, userState);
        }
        
        private void OnAddSub2AudioOperationCompleted(object arg) {
            if ((this.AddSub2AudioCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddSub2AudioCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://hemodialysis.org/UpDateDialyseData", RequestNamespace="http://hemodialysis.org/", ResponseNamespace="http://hemodialysis.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpDateDialyseData(string vsUserID, string vsDialyseRecordJson, string vsDialyseAssessJson) {
            this.Invoke("UpDateDialyseData", new object[] {
                        vsUserID,
                        vsDialyseRecordJson,
                        vsDialyseAssessJson});
        }
        
        /// <remarks/>
        public void UpDateDialyseDataAsync(string vsUserID, string vsDialyseRecordJson, string vsDialyseAssessJson) {
            this.UpDateDialyseDataAsync(vsUserID, vsDialyseRecordJson, vsDialyseAssessJson, null);
        }
        
        /// <remarks/>
        public void UpDateDialyseDataAsync(string vsUserID, string vsDialyseRecordJson, string vsDialyseAssessJson, object userState) {
            if ((this.UpDateDialyseDataOperationCompleted == null)) {
                this.UpDateDialyseDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpDateDialyseDataOperationCompleted);
            }
            this.InvokeAsync("UpDateDialyseData", new object[] {
                        vsUserID,
                        vsDialyseRecordJson,
                        vsDialyseAssessJson}, this.UpDateDialyseDataOperationCompleted, userState);
        }
        
        private void OnUpDateDialyseDataOperationCompleted(object arg) {
            if ((this.UpDateDialyseDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpDateDialyseDataCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://hemodialysis.org/UpdateSingleField", RequestNamespace="http://hemodialysis.org/", ResponseNamespace="http://hemodialysis.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpdateSingleField(string vsUserId, string vsRecordNo, string vsKey, string vsValue, string vsModifyTime) {
            this.Invoke("UpdateSingleField", new object[] {
                        vsUserId,
                        vsRecordNo,
                        vsKey,
                        vsValue,
                        vsModifyTime});
        }
        
        /// <remarks/>
        public void UpdateSingleFieldAsync(string vsUserId, string vsRecordNo, string vsKey, string vsValue, string vsModifyTime) {
            this.UpdateSingleFieldAsync(vsUserId, vsRecordNo, vsKey, vsValue, vsModifyTime, null);
        }
        
        /// <remarks/>
        public void UpdateSingleFieldAsync(string vsUserId, string vsRecordNo, string vsKey, string vsValue, string vsModifyTime, object userState) {
            if ((this.UpdateSingleFieldOperationCompleted == null)) {
                this.UpdateSingleFieldOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateSingleFieldOperationCompleted);
            }
            this.InvokeAsync("UpdateSingleField", new object[] {
                        vsUserId,
                        vsRecordNo,
                        vsKey,
                        vsValue,
                        vsModifyTime}, this.UpdateSingleFieldOperationCompleted, userState);
        }
        
        private void OnUpdateSingleFieldOperationCompleted(object arg) {
            if ((this.UpdateSingleFieldCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateSingleFieldCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://hemodialysis.org/UpDateDialyseAdviceRecord", RequestNamespace="http://hemodialysis.org/", ResponseNamespace="http://hemodialysis.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpDateDialyseAdviceRecord(string vsUserId, string vsJson, string strCheckPatientStore) {
            this.Invoke("UpDateDialyseAdviceRecord", new object[] {
                        vsUserId,
                        vsJson,
                        strCheckPatientStore});
        }
        
        /// <remarks/>
        public void UpDateDialyseAdviceRecordAsync(string vsUserId, string vsJson, string strCheckPatientStore) {
            this.UpDateDialyseAdviceRecordAsync(vsUserId, vsJson, strCheckPatientStore, null);
        }
        
        /// <remarks/>
        public void UpDateDialyseAdviceRecordAsync(string vsUserId, string vsJson, string strCheckPatientStore, object userState) {
            if ((this.UpDateDialyseAdviceRecordOperationCompleted == null)) {
                this.UpDateDialyseAdviceRecordOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpDateDialyseAdviceRecordOperationCompleted);
            }
            this.InvokeAsync("UpDateDialyseAdviceRecord", new object[] {
                        vsUserId,
                        vsJson,
                        strCheckPatientStore}, this.UpDateDialyseAdviceRecordOperationCompleted, userState);
        }
        
        private void OnUpDateDialyseAdviceRecordOperationCompleted(object arg) {
            if ((this.UpDateDialyseAdviceRecordCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpDateDialyseAdviceRecordCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://hemodialysis.org/UpDateCollateDialyseAdviceRecord", RequestNamespace="http://hemodialysis.org/", ResponseNamespace="http://hemodialysis.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpDateCollateDialyseAdviceRecord(string vsUserId, string vsJson) {
            this.Invoke("UpDateCollateDialyseAdviceRecord", new object[] {
                        vsUserId,
                        vsJson});
        }
        
        /// <remarks/>
        public void UpDateCollateDialyseAdviceRecordAsync(string vsUserId, string vsJson) {
            this.UpDateCollateDialyseAdviceRecordAsync(vsUserId, vsJson, null);
        }
        
        /// <remarks/>
        public void UpDateCollateDialyseAdviceRecordAsync(string vsUserId, string vsJson, object userState) {
            if ((this.UpDateCollateDialyseAdviceRecordOperationCompleted == null)) {
                this.UpDateCollateDialyseAdviceRecordOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpDateCollateDialyseAdviceRecordOperationCompleted);
            }
            this.InvokeAsync("UpDateCollateDialyseAdviceRecord", new object[] {
                        vsUserId,
                        vsJson}, this.UpDateCollateDialyseAdviceRecordOperationCompleted, userState);
        }
        
        private void OnUpDateCollateDialyseAdviceRecordOperationCompleted(object arg) {
            if ((this.UpDateCollateDialyseAdviceRecordCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpDateCollateDialyseAdviceRecordCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://hemodialysis.org/UpDateDialyseTimeRecord", RequestNamespace="http://hemodialysis.org/", ResponseNamespace="http://hemodialysis.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpDateDialyseTimeRecord(string vsUserId, string vsJson) {
            this.Invoke("UpDateDialyseTimeRecord", new object[] {
                        vsUserId,
                        vsJson});
        }
        
        /// <remarks/>
        public void UpDateDialyseTimeRecordAsync(string vsUserId, string vsJson) {
            this.UpDateDialyseTimeRecordAsync(vsUserId, vsJson, null);
        }
        
        /// <remarks/>
        public void UpDateDialyseTimeRecordAsync(string vsUserId, string vsJson, object userState) {
            if ((this.UpDateDialyseTimeRecordOperationCompleted == null)) {
                this.UpDateDialyseTimeRecordOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpDateDialyseTimeRecordOperationCompleted);
            }
            this.InvokeAsync("UpDateDialyseTimeRecord", new object[] {
                        vsUserId,
                        vsJson}, this.UpDateDialyseTimeRecordOperationCompleted, userState);
        }
        
        private void OnUpDateDialyseTimeRecordOperationCompleted(object arg) {
            if ((this.UpDateDialyseTimeRecordCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpDateDialyseTimeRecordCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://hemodialysis.org/UpdateDialyseMaterial", RequestNamespace="http://hemodialysis.org/", ResponseNamespace="http://hemodialysis.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpdateDialyseMaterial(string vsUserId, string vsJson) {
            this.Invoke("UpdateDialyseMaterial", new object[] {
                        vsUserId,
                        vsJson});
        }
        
        /// <remarks/>
        public void UpdateDialyseMaterialAsync(string vsUserId, string vsJson) {
            this.UpdateDialyseMaterialAsync(vsUserId, vsJson, null);
        }
        
        /// <remarks/>
        public void UpdateDialyseMaterialAsync(string vsUserId, string vsJson, object userState) {
            if ((this.UpdateDialyseMaterialOperationCompleted == null)) {
                this.UpdateDialyseMaterialOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateDialyseMaterialOperationCompleted);
            }
            this.InvokeAsync("UpdateDialyseMaterial", new object[] {
                        vsUserId,
                        vsJson}, this.UpdateDialyseMaterialOperationCompleted, userState);
        }
        
        private void OnUpdateDialyseMaterialOperationCompleted(object arg) {
            if ((this.UpdateDialyseMaterialCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateDialyseMaterialCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://hemodialysis.org/UpDateDialyseMaterialDetail", RequestNamespace="http://hemodialysis.org/", ResponseNamespace="http://hemodialysis.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpDateDialyseMaterialDetail(string vsUserId, string vsJson) {
            this.Invoke("UpDateDialyseMaterialDetail", new object[] {
                        vsUserId,
                        vsJson});
        }
        
        /// <remarks/>
        public void UpDateDialyseMaterialDetailAsync(string vsUserId, string vsJson) {
            this.UpDateDialyseMaterialDetailAsync(vsUserId, vsJson, null);
        }
        
        /// <remarks/>
        public void UpDateDialyseMaterialDetailAsync(string vsUserId, string vsJson, object userState) {
            if ((this.UpDateDialyseMaterialDetailOperationCompleted == null)) {
                this.UpDateDialyseMaterialDetailOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpDateDialyseMaterialDetailOperationCompleted);
            }
            this.InvokeAsync("UpDateDialyseMaterialDetail", new object[] {
                        vsUserId,
                        vsJson}, this.UpDateDialyseMaterialDetailOperationCompleted, userState);
        }
        
        private void OnUpDateDialyseMaterialDetailOperationCompleted(object arg) {
            if ((this.UpDateDialyseMaterialDetailCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpDateDialyseMaterialDetailCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://hemodialysis.org/UpDateForJietai", RequestNamespace="http://hemodialysis.org/", ResponseNamespace="http://hemodialysis.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpDateForJietai(string vsUserID, string vsDialyseRecordJson, string vsDialyseAssessJson, string vsDialyseTimeRecordJson, string Heparin, string PSSum, string isNormalHeparin, string strDriedWeight) {
            this.Invoke("UpDateForJietai", new object[] {
                        vsUserID,
                        vsDialyseRecordJson,
                        vsDialyseAssessJson,
                        vsDialyseTimeRecordJson,
                        Heparin,
                        PSSum,
                        isNormalHeparin,
                        strDriedWeight});
        }
        
        /// <remarks/>
        public void UpDateForJietaiAsync(string vsUserID, string vsDialyseRecordJson, string vsDialyseAssessJson, string vsDialyseTimeRecordJson, string Heparin, string PSSum, string isNormalHeparin, string strDriedWeight) {
            this.UpDateForJietaiAsync(vsUserID, vsDialyseRecordJson, vsDialyseAssessJson, vsDialyseTimeRecordJson, Heparin, PSSum, isNormalHeparin, strDriedWeight, null);
        }
        
        /// <remarks/>
        public void UpDateForJietaiAsync(string vsUserID, string vsDialyseRecordJson, string vsDialyseAssessJson, string vsDialyseTimeRecordJson, string Heparin, string PSSum, string isNormalHeparin, string strDriedWeight, object userState) {
            if ((this.UpDateForJietaiOperationCompleted == null)) {
                this.UpDateForJietaiOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpDateForJietaiOperationCompleted);
            }
            this.InvokeAsync("UpDateForJietai", new object[] {
                        vsUserID,
                        vsDialyseRecordJson,
                        vsDialyseAssessJson,
                        vsDialyseTimeRecordJson,
                        Heparin,
                        PSSum,
                        isNormalHeparin,
                        strDriedWeight}, this.UpDateForJietaiOperationCompleted, userState);
        }
        
        private void OnUpDateForJietaiOperationCompleted(object arg) {
            if ((this.UpDateForJietaiCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpDateForJietaiCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://hemodialysis.org/UpDateSignatureForAllAdvice", RequestNamespace="http://hemodialysis.org/", ResponseNamespace="http://hemodialysis.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpDateSignatureForAllAdvice(string vsUserId, string DoctorName, string DialyseRecordNo, string BaseModifyTime) {
            this.Invoke("UpDateSignatureForAllAdvice", new object[] {
                        vsUserId,
                        DoctorName,
                        DialyseRecordNo,
                        BaseModifyTime});
        }
        
        /// <remarks/>
        public void UpDateSignatureForAllAdviceAsync(string vsUserId, string DoctorName, string DialyseRecordNo, string BaseModifyTime) {
            this.UpDateSignatureForAllAdviceAsync(vsUserId, DoctorName, DialyseRecordNo, BaseModifyTime, null);
        }
        
        /// <remarks/>
        public void UpDateSignatureForAllAdviceAsync(string vsUserId, string DoctorName, string DialyseRecordNo, string BaseModifyTime, object userState) {
            if ((this.UpDateSignatureForAllAdviceOperationCompleted == null)) {
                this.UpDateSignatureForAllAdviceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpDateSignatureForAllAdviceOperationCompleted);
            }
            this.InvokeAsync("UpDateSignatureForAllAdvice", new object[] {
                        vsUserId,
                        DoctorName,
                        DialyseRecordNo,
                        BaseModifyTime}, this.UpDateSignatureForAllAdviceOperationCompleted, userState);
        }
        
        private void OnUpDateSignatureForAllAdviceOperationCompleted(object arg) {
            if ((this.UpDateSignatureForAllAdviceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpDateSignatureForAllAdviceCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://hemodialysis.org/UpDateSumForDialyseTimeRecord", RequestNamespace="http://hemodialysis.org/", ResponseNamespace="http://hemodialysis.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpDateSumForDialyseTimeRecord(string vsUserId, string DialyseRecordNo, string Heparin, string PSSum, string BaseModifyTime, string isNormalHeparin) {
            this.Invoke("UpDateSumForDialyseTimeRecord", new object[] {
                        vsUserId,
                        DialyseRecordNo,
                        Heparin,
                        PSSum,
                        BaseModifyTime,
                        isNormalHeparin});
        }
        
        /// <remarks/>
        public void UpDateSumForDialyseTimeRecordAsync(string vsUserId, string DialyseRecordNo, string Heparin, string PSSum, string BaseModifyTime, string isNormalHeparin) {
            this.UpDateSumForDialyseTimeRecordAsync(vsUserId, DialyseRecordNo, Heparin, PSSum, BaseModifyTime, isNormalHeparin, null);
        }
        
        /// <remarks/>
        public void UpDateSumForDialyseTimeRecordAsync(string vsUserId, string DialyseRecordNo, string Heparin, string PSSum, string BaseModifyTime, string isNormalHeparin, object userState) {
            if ((this.UpDateSumForDialyseTimeRecordOperationCompleted == null)) {
                this.UpDateSumForDialyseTimeRecordOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpDateSumForDialyseTimeRecordOperationCompleted);
            }
            this.InvokeAsync("UpDateSumForDialyseTimeRecord", new object[] {
                        vsUserId,
                        DialyseRecordNo,
                        Heparin,
                        PSSum,
                        BaseModifyTime,
                        isNormalHeparin}, this.UpDateSumForDialyseTimeRecordOperationCompleted, userState);
        }
        
        private void OnUpDateSumForDialyseTimeRecordOperationCompleted(object arg) {
            if ((this.UpDateSumForDialyseTimeRecordCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpDateSumForDialyseTimeRecordCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://hemodialysis.org/UpdateDialyseMaterialForMerge", RequestNamespace="http://hemodialysis.org/", ResponseNamespace="http://hemodialysis.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpdateDialyseMaterialForMerge(string strUserId, string strRecordNo, string strMergeMaterialItemNo, string strMaterialItemNo, string strModifyTime) {
            this.Invoke("UpdateDialyseMaterialForMerge", new object[] {
                        strUserId,
                        strRecordNo,
                        strMergeMaterialItemNo,
                        strMaterialItemNo,
                        strModifyTime});
        }
        
        /// <remarks/>
        public void UpdateDialyseMaterialForMergeAsync(string strUserId, string strRecordNo, string strMergeMaterialItemNo, string strMaterialItemNo, string strModifyTime) {
            this.UpdateDialyseMaterialForMergeAsync(strUserId, strRecordNo, strMergeMaterialItemNo, strMaterialItemNo, strModifyTime, null);
        }
        
        /// <remarks/>
        public void UpdateDialyseMaterialForMergeAsync(string strUserId, string strRecordNo, string strMergeMaterialItemNo, string strMaterialItemNo, string strModifyTime, object userState) {
            if ((this.UpdateDialyseMaterialForMergeOperationCompleted == null)) {
                this.UpdateDialyseMaterialForMergeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateDialyseMaterialForMergeOperationCompleted);
            }
            this.InvokeAsync("UpdateDialyseMaterialForMerge", new object[] {
                        strUserId,
                        strRecordNo,
                        strMergeMaterialItemNo,
                        strMaterialItemNo,
                        strModifyTime}, this.UpdateDialyseMaterialForMergeOperationCompleted, userState);
        }
        
        private void OnUpdateDialyseMaterialForMergeOperationCompleted(object arg) {
            if ((this.UpdateDialyseMaterialForMergeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateDialyseMaterialForMergeCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://hemodialysis.org/UpDateDialyseScheme", RequestNamespace="http://hemodialysis.org/", ResponseNamespace="http://hemodialysis.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpDateDialyseScheme(string strUserId, string strJson, string strAddFlag) {
            this.Invoke("UpDateDialyseScheme", new object[] {
                        strUserId,
                        strJson,
                        strAddFlag});
        }
        
        /// <remarks/>
        public void UpDateDialyseSchemeAsync(string strUserId, string strJson, string strAddFlag) {
            this.UpDateDialyseSchemeAsync(strUserId, strJson, strAddFlag, null);
        }
        
        /// <remarks/>
        public void UpDateDialyseSchemeAsync(string strUserId, string strJson, string strAddFlag, object userState) {
            if ((this.UpDateDialyseSchemeOperationCompleted == null)) {
                this.UpDateDialyseSchemeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpDateDialyseSchemeOperationCompleted);
            }
            this.InvokeAsync("UpDateDialyseScheme", new object[] {
                        strUserId,
                        strJson,
                        strAddFlag}, this.UpDateDialyseSchemeOperationCompleted, userState);
        }
        
        private void OnUpDateDialyseSchemeOperationCompleted(object arg) {
            if ((this.UpDateDialyseSchemeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpDateDialyseSchemeCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://hemodialysis.org/UpDateLongTermDialyseAdviceRecord", RequestNamespace="http://hemodialysis.org/", ResponseNamespace="http://hemodialysis.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpDateLongTermDialyseAdviceRecord(string vsUserId, string vsJson) {
            this.Invoke("UpDateLongTermDialyseAdviceRecord", new object[] {
                        vsUserId,
                        vsJson});
        }
        
        /// <remarks/>
        public void UpDateLongTermDialyseAdviceRecordAsync(string vsUserId, string vsJson) {
            this.UpDateLongTermDialyseAdviceRecordAsync(vsUserId, vsJson, null);
        }
        
        /// <remarks/>
        public void UpDateLongTermDialyseAdviceRecordAsync(string vsUserId, string vsJson, object userState) {
            if ((this.UpDateLongTermDialyseAdviceRecordOperationCompleted == null)) {
                this.UpDateLongTermDialyseAdviceRecordOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpDateLongTermDialyseAdviceRecordOperationCompleted);
            }
            this.InvokeAsync("UpDateLongTermDialyseAdviceRecord", new object[] {
                        vsUserId,
                        vsJson}, this.UpDateLongTermDialyseAdviceRecordOperationCompleted, userState);
        }
        
        private void OnUpDateLongTermDialyseAdviceRecordOperationCompleted(object arg) {
            if ((this.UpDateLongTermDialyseAdviceRecordCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpDateLongTermDialyseAdviceRecordCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://hemodialysis.org/UpDateAdviceRecordZXTime", RequestNamespace="http://hemodialysis.org/", ResponseNamespace="http://hemodialysis.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpDateAdviceRecordZXTime(string vsUserId, string Time, string strRecordNo) {
            this.Invoke("UpDateAdviceRecordZXTime", new object[] {
                        vsUserId,
                        Time,
                        strRecordNo});
        }
        
        /// <remarks/>
        public void UpDateAdviceRecordZXTimeAsync(string vsUserId, string Time, string strRecordNo) {
            this.UpDateAdviceRecordZXTimeAsync(vsUserId, Time, strRecordNo, null);
        }
        
        /// <remarks/>
        public void UpDateAdviceRecordZXTimeAsync(string vsUserId, string Time, string strRecordNo, object userState) {
            if ((this.UpDateAdviceRecordZXTimeOperationCompleted == null)) {
                this.UpDateAdviceRecordZXTimeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpDateAdviceRecordZXTimeOperationCompleted);
            }
            this.InvokeAsync("UpDateAdviceRecordZXTime", new object[] {
                        vsUserId,
                        Time,
                        strRecordNo}, this.UpDateAdviceRecordZXTimeOperationCompleted, userState);
        }
        
        private void OnUpDateAdviceRecordZXTimeOperationCompleted(object arg) {
            if ((this.UpDateAdviceRecordZXTimeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpDateAdviceRecordZXTimeCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://hemodialysis.org/UpdateDeepVeinCatheterization", RequestNamespace="http://hemodialysis.org/", ResponseNamespace="http://hemodialysis.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpdateDeepVeinCatheterization(string strUserId, string strJson) {
            this.Invoke("UpdateDeepVeinCatheterization", new object[] {
                        strUserId,
                        strJson});
        }
        
        /// <remarks/>
        public void UpdateDeepVeinCatheterizationAsync(string strUserId, string strJson) {
            this.UpdateDeepVeinCatheterizationAsync(strUserId, strJson, null);
        }
        
        /// <remarks/>
        public void UpdateDeepVeinCatheterizationAsync(string strUserId, string strJson, object userState) {
            if ((this.UpdateDeepVeinCatheterizationOperationCompleted == null)) {
                this.UpdateDeepVeinCatheterizationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateDeepVeinCatheterizationOperationCompleted);
            }
            this.InvokeAsync("UpdateDeepVeinCatheterization", new object[] {
                        strUserId,
                        strJson}, this.UpdateDeepVeinCatheterizationOperationCompleted, userState);
        }
        
        private void OnUpdateDeepVeinCatheterizationOperationCompleted(object arg) {
            if ((this.UpdateDeepVeinCatheterizationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateDeepVeinCatheterizationCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://hemodialysis.org/InsertOrUpdateScoreAssessmentInfo", RequestNamespace="http://hemodialysis.org/", ResponseNamespace="http://hemodialysis.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void InsertOrUpdateScoreAssessmentInfo(string strUserId, string strJson, string strModifyTime) {
            this.Invoke("InsertOrUpdateScoreAssessmentInfo", new object[] {
                        strUserId,
                        strJson,
                        strModifyTime});
        }
        
        /// <remarks/>
        public void InsertOrUpdateScoreAssessmentInfoAsync(string strUserId, string strJson, string strModifyTime) {
            this.InsertOrUpdateScoreAssessmentInfoAsync(strUserId, strJson, strModifyTime, null);
        }
        
        /// <remarks/>
        public void InsertOrUpdateScoreAssessmentInfoAsync(string strUserId, string strJson, string strModifyTime, object userState) {
            if ((this.InsertOrUpdateScoreAssessmentInfoOperationCompleted == null)) {
                this.InsertOrUpdateScoreAssessmentInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertOrUpdateScoreAssessmentInfoOperationCompleted);
            }
            this.InvokeAsync("InsertOrUpdateScoreAssessmentInfo", new object[] {
                        strUserId,
                        strJson,
                        strModifyTime}, this.InsertOrUpdateScoreAssessmentInfoOperationCompleted, userState);
        }
        
        private void OnInsertOrUpdateScoreAssessmentInfoOperationCompleted(object arg) {
            if ((this.InsertOrUpdateScoreAssessmentInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertOrUpdateScoreAssessmentInfoCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://hemodialysis.org/InsertOrUpdateAssessFever", RequestNamespace="http://hemodialysis.org/", ResponseNamespace="http://hemodialysis.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void InsertOrUpdateAssessFever(string strUserID, string strJson) {
            this.Invoke("InsertOrUpdateAssessFever", new object[] {
                        strUserID,
                        strJson});
        }
        
        /// <remarks/>
        public void InsertOrUpdateAssessFeverAsync(string strUserID, string strJson) {
            this.InsertOrUpdateAssessFeverAsync(strUserID, strJson, null);
        }
        
        /// <remarks/>
        public void InsertOrUpdateAssessFeverAsync(string strUserID, string strJson, object userState) {
            if ((this.InsertOrUpdateAssessFeverOperationCompleted == null)) {
                this.InsertOrUpdateAssessFeverOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertOrUpdateAssessFeverOperationCompleted);
            }
            this.InvokeAsync("InsertOrUpdateAssessFever", new object[] {
                        strUserID,
                        strJson}, this.InsertOrUpdateAssessFeverOperationCompleted, userState);
        }
        
        private void OnInsertOrUpdateAssessFeverOperationCompleted(object arg) {
            if ((this.InsertOrUpdateAssessFeverCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertOrUpdateAssessFeverCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://hemodialysis.org/UpdateAssessDisinfectionFlag", RequestNamespace="http://hemodialysis.org/", ResponseNamespace="http://hemodialysis.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpdateAssessDisinfectionFlag(string strUserID, string strRecordNo, string strDisinfectionFlag, string strModifyTime) {
            this.Invoke("UpdateAssessDisinfectionFlag", new object[] {
                        strUserID,
                        strRecordNo,
                        strDisinfectionFlag,
                        strModifyTime});
        }
        
        /// <remarks/>
        public void UpdateAssessDisinfectionFlagAsync(string strUserID, string strRecordNo, string strDisinfectionFlag, string strModifyTime) {
            this.UpdateAssessDisinfectionFlagAsync(strUserID, strRecordNo, strDisinfectionFlag, strModifyTime, null);
        }
        
        /// <remarks/>
        public void UpdateAssessDisinfectionFlagAsync(string strUserID, string strRecordNo, string strDisinfectionFlag, string strModifyTime, object userState) {
            if ((this.UpdateAssessDisinfectionFlagOperationCompleted == null)) {
                this.UpdateAssessDisinfectionFlagOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateAssessDisinfectionFlagOperationCompleted);
            }
            this.InvokeAsync("UpdateAssessDisinfectionFlag", new object[] {
                        strUserID,
                        strRecordNo,
                        strDisinfectionFlag,
                        strModifyTime}, this.UpdateAssessDisinfectionFlagOperationCompleted, userState);
        }
        
        private void OnUpdateAssessDisinfectionFlagOperationCompleted(object arg) {
            if ((this.UpdateAssessDisinfectionFlagCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateAssessDisinfectionFlagCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://hemodialysis.org/ExecutionPublicityAndEducation", RequestNamespace="http://hemodialysis.org/", ResponseNamespace="http://hemodialysis.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void ExecutionPublicityAndEducation(string strUserID, string strJson) {
            this.Invoke("ExecutionPublicityAndEducation", new object[] {
                        strUserID,
                        strJson});
        }
        
        /// <remarks/>
        public void ExecutionPublicityAndEducationAsync(string strUserID, string strJson) {
            this.ExecutionPublicityAndEducationAsync(strUserID, strJson, null);
        }
        
        /// <remarks/>
        public void ExecutionPublicityAndEducationAsync(string strUserID, string strJson, object userState) {
            if ((this.ExecutionPublicityAndEducationOperationCompleted == null)) {
                this.ExecutionPublicityAndEducationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnExecutionPublicityAndEducationOperationCompleted);
            }
            this.InvokeAsync("ExecutionPublicityAndEducation", new object[] {
                        strUserID,
                        strJson}, this.ExecutionPublicityAndEducationOperationCompleted, userState);
        }
        
        private void OnExecutionPublicityAndEducationOperationCompleted(object arg) {
            if ((this.ExecutionPublicityAndEducationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ExecutionPublicityAndEducationCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://hemodialysis.org/DisinfectionRecordInfoOperation", RequestNamespace="http://hemodialysis.org/", ResponseNamespace="http://hemodialysis.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DisinfectionRecordInfoOperation(string strUserID, string strJson, string strOperationType) {
            this.Invoke("DisinfectionRecordInfoOperation", new object[] {
                        strUserID,
                        strJson,
                        strOperationType});
        }
        
        /// <remarks/>
        public void DisinfectionRecordInfoOperationAsync(string strUserID, string strJson, string strOperationType) {
            this.DisinfectionRecordInfoOperationAsync(strUserID, strJson, strOperationType, null);
        }
        
        /// <remarks/>
        public void DisinfectionRecordInfoOperationAsync(string strUserID, string strJson, string strOperationType, object userState) {
            if ((this.DisinfectionRecordInfoOperationOperationCompleted == null)) {
                this.DisinfectionRecordInfoOperationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDisinfectionRecordInfoOperationOperationCompleted);
            }
            this.InvokeAsync("DisinfectionRecordInfoOperation", new object[] {
                        strUserID,
                        strJson,
                        strOperationType}, this.DisinfectionRecordInfoOperationOperationCompleted, userState);
        }
        
        private void OnDisinfectionRecordInfoOperationOperationCompleted(object arg) {
            if ((this.DisinfectionRecordInfoOperationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DisinfectionRecordInfoOperationCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://hemodialysis.org/ModifyHospitalizationFlag", RequestNamespace="http://hemodialysis.org/", ResponseNamespace="http://hemodialysis.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void ModifyHospitalizationFlag(string strUserID, string strRecordNo, string strModifyTime) {
            this.Invoke("ModifyHospitalizationFlag", new object[] {
                        strUserID,
                        strRecordNo,
                        strModifyTime});
        }
        
        /// <remarks/>
        public void ModifyHospitalizationFlagAsync(string strUserID, string strRecordNo, string strModifyTime) {
            this.ModifyHospitalizationFlagAsync(strUserID, strRecordNo, strModifyTime, null);
        }
        
        /// <remarks/>
        public void ModifyHospitalizationFlagAsync(string strUserID, string strRecordNo, string strModifyTime, object userState) {
            if ((this.ModifyHospitalizationFlagOperationCompleted == null)) {
                this.ModifyHospitalizationFlagOperationCompleted = new System.Threading.SendOrPostCallback(this.OnModifyHospitalizationFlagOperationCompleted);
            }
            this.InvokeAsync("ModifyHospitalizationFlag", new object[] {
                        strUserID,
                        strRecordNo,
                        strModifyTime}, this.ModifyHospitalizationFlagOperationCompleted, userState);
        }
        
        private void OnModifyHospitalizationFlagOperationCompleted(object arg) {
            if ((this.ModifyHospitalizationFlagCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ModifyHospitalizationFlagCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://hemodialysis.org/ShiftInfoOperation", RequestNamespace="http://hemodialysis.org/", ResponseNamespace="http://hemodialysis.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void ShiftInfoOperation(string strUserID, string strJson) {
            this.Invoke("ShiftInfoOperation", new object[] {
                        strUserID,
                        strJson});
        }
        
        /// <remarks/>
        public void ShiftInfoOperationAsync(string strUserID, string strJson) {
            this.ShiftInfoOperationAsync(strUserID, strJson, null);
        }
        
        /// <remarks/>
        public void ShiftInfoOperationAsync(string strUserID, string strJson, object userState) {
            if ((this.ShiftInfoOperationOperationCompleted == null)) {
                this.ShiftInfoOperationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnShiftInfoOperationOperationCompleted);
            }
            this.InvokeAsync("ShiftInfoOperation", new object[] {
                        strUserID,
                        strJson}, this.ShiftInfoOperationOperationCompleted, userState);
        }
        
        private void OnShiftInfoOperationOperationCompleted(object arg) {
            if ((this.ShiftInfoOperationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ShiftInfoOperationCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://hemodialysis.org/SaveAccessoryCheckInfo", RequestNamespace="http://hemodialysis.org/", ResponseNamespace="http://hemodialysis.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SaveAccessoryCheckInfo(string strUserID, string strJson) {
            this.Invoke("SaveAccessoryCheckInfo", new object[] {
                        strUserID,
                        strJson});
        }
        
        /// <remarks/>
        public void SaveAccessoryCheckInfoAsync(string strUserID, string strJson) {
            this.SaveAccessoryCheckInfoAsync(strUserID, strJson, null);
        }
        
        /// <remarks/>
        public void SaveAccessoryCheckInfoAsync(string strUserID, string strJson, object userState) {
            if ((this.SaveAccessoryCheckInfoOperationCompleted == null)) {
                this.SaveAccessoryCheckInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSaveAccessoryCheckInfoOperationCompleted);
            }
            this.InvokeAsync("SaveAccessoryCheckInfo", new object[] {
                        strUserID,
                        strJson}, this.SaveAccessoryCheckInfoOperationCompleted, userState);
        }
        
        private void OnSaveAccessoryCheckInfoOperationCompleted(object arg) {
            if ((this.SaveAccessoryCheckInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SaveAccessoryCheckInfoCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://hemodialysis.org/BodySurfaceDisinfectionRecordInfoOperation", RequestNamespace="http://hemodialysis.org/", ResponseNamespace="http://hemodialysis.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void BodySurfaceDisinfectionRecordInfoOperation(string strUserID, string strJson, string strOperationType) {
            this.Invoke("BodySurfaceDisinfectionRecordInfoOperation", new object[] {
                        strUserID,
                        strJson,
                        strOperationType});
        }
        
        /// <remarks/>
        public void BodySurfaceDisinfectionRecordInfoOperationAsync(string strUserID, string strJson, string strOperationType) {
            this.BodySurfaceDisinfectionRecordInfoOperationAsync(strUserID, strJson, strOperationType, null);
        }
        
        /// <remarks/>
        public void BodySurfaceDisinfectionRecordInfoOperationAsync(string strUserID, string strJson, string strOperationType, object userState) {
            if ((this.BodySurfaceDisinfectionRecordInfoOperationOperationCompleted == null)) {
                this.BodySurfaceDisinfectionRecordInfoOperationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnBodySurfaceDisinfectionRecordInfoOperationOperationCompleted);
            }
            this.InvokeAsync("BodySurfaceDisinfectionRecordInfoOperation", new object[] {
                        strUserID,
                        strJson,
                        strOperationType}, this.BodySurfaceDisinfectionRecordInfoOperationOperationCompleted, userState);
        }
        
        private void OnBodySurfaceDisinfectionRecordInfoOperationOperationCompleted(object arg) {
            if ((this.BodySurfaceDisinfectionRecordInfoOperationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.BodySurfaceDisinfectionRecordInfoOperationCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://hemodialysis.org/DialysisMachineRunningRecordOperation", RequestNamespace="http://hemodialysis.org/", ResponseNamespace="http://hemodialysis.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DialysisMachineRunningRecordOperation(string strUserID, string strJson, string strOperationType) {
            this.Invoke("DialysisMachineRunningRecordOperation", new object[] {
                        strUserID,
                        strJson,
                        strOperationType});
        }
        
        /// <remarks/>
        public void DialysisMachineRunningRecordOperationAsync(string strUserID, string strJson, string strOperationType) {
            this.DialysisMachineRunningRecordOperationAsync(strUserID, strJson, strOperationType, null);
        }
        
        /// <remarks/>
        public void DialysisMachineRunningRecordOperationAsync(string strUserID, string strJson, string strOperationType, object userState) {
            if ((this.DialysisMachineRunningRecordOperationOperationCompleted == null)) {
                this.DialysisMachineRunningRecordOperationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDialysisMachineRunningRecordOperationOperationCompleted);
            }
            this.InvokeAsync("DialysisMachineRunningRecordOperation", new object[] {
                        strUserID,
                        strJson,
                        strOperationType}, this.DialysisMachineRunningRecordOperationOperationCompleted, userState);
        }
        
        private void OnDialysisMachineRunningRecordOperationOperationCompleted(object arg) {
            if ((this.DialysisMachineRunningRecordOperationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DialysisMachineRunningRecordOperationCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://hemodialysis.org/CancelArchive", RequestNamespace="http://hemodialysis.org/", ResponseNamespace="http://hemodialysis.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void CancelArchive(string vsUserID, string vsRecordNo, string vsModifyTime) {
            this.Invoke("CancelArchive", new object[] {
                        vsUserID,
                        vsRecordNo,
                        vsModifyTime});
        }
        
        /// <remarks/>
        public void CancelArchiveAsync(string vsUserID, string vsRecordNo, string vsModifyTime) {
            this.CancelArchiveAsync(vsUserID, vsRecordNo, vsModifyTime, null);
        }
        
        /// <remarks/>
        public void CancelArchiveAsync(string vsUserID, string vsRecordNo, string vsModifyTime, object userState) {
            if ((this.CancelArchiveOperationCompleted == null)) {
                this.CancelArchiveOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCancelArchiveOperationCompleted);
            }
            this.InvokeAsync("CancelArchive", new object[] {
                        vsUserID,
                        vsRecordNo,
                        vsModifyTime}, this.CancelArchiveOperationCompleted, userState);
        }
        
        private void OnCancelArchiveOperationCompleted(object arg) {
            if ((this.CancelArchiveCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CancelArchiveCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://hemodialysis.org/StopLongTermDialyseAdviceRecord", RequestNamespace="http://hemodialysis.org/", ResponseNamespace="http://hemodialysis.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void StopLongTermDialyseAdviceRecord(string vsUserId, string LongTermDialyseAdviceID, string stopTime) {
            this.Invoke("StopLongTermDialyseAdviceRecord", new object[] {
                        vsUserId,
                        LongTermDialyseAdviceID,
                        stopTime});
        }
        
        /// <remarks/>
        public void StopLongTermDialyseAdviceRecordAsync(string vsUserId, string LongTermDialyseAdviceID, string stopTime) {
            this.StopLongTermDialyseAdviceRecordAsync(vsUserId, LongTermDialyseAdviceID, stopTime, null);
        }
        
        /// <remarks/>
        public void StopLongTermDialyseAdviceRecordAsync(string vsUserId, string LongTermDialyseAdviceID, string stopTime, object userState) {
            if ((this.StopLongTermDialyseAdviceRecordOperationCompleted == null)) {
                this.StopLongTermDialyseAdviceRecordOperationCompleted = new System.Threading.SendOrPostCallback(this.OnStopLongTermDialyseAdviceRecordOperationCompleted);
            }
            this.InvokeAsync("StopLongTermDialyseAdviceRecord", new object[] {
                        vsUserId,
                        LongTermDialyseAdviceID,
                        stopTime}, this.StopLongTermDialyseAdviceRecordOperationCompleted, userState);
        }
        
        private void OnStopLongTermDialyseAdviceRecordOperationCompleted(object arg) {
            if ((this.StopLongTermDialyseAdviceRecordCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.StopLongTermDialyseAdviceRecordCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://hemodialysis.org/RunDoctorAdvice", RequestNamespace="http://hemodialysis.org/", ResponseNamespace="http://hemodialysis.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void RunDoctorAdvice(string vsUserId, string vsRecordNo, string vsRelevantSubjectID, string vsUserName, string vsNurserName, string vsDate, string vsModifyTime) {
            this.Invoke("RunDoctorAdvice", new object[] {
                        vsUserId,
                        vsRecordNo,
                        vsRelevantSubjectID,
                        vsUserName,
                        vsNurserName,
                        vsDate,
                        vsModifyTime});
        }
        
        /// <remarks/>
        public void RunDoctorAdviceAsync(string vsUserId, string vsRecordNo, string vsRelevantSubjectID, string vsUserName, string vsNurserName, string vsDate, string vsModifyTime) {
            this.RunDoctorAdviceAsync(vsUserId, vsRecordNo, vsRelevantSubjectID, vsUserName, vsNurserName, vsDate, vsModifyTime, null);
        }
        
        /// <remarks/>
        public void RunDoctorAdviceAsync(string vsUserId, string vsRecordNo, string vsRelevantSubjectID, string vsUserName, string vsNurserName, string vsDate, string vsModifyTime, object userState) {
            if ((this.RunDoctorAdviceOperationCompleted == null)) {
                this.RunDoctorAdviceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRunDoctorAdviceOperationCompleted);
            }
            this.InvokeAsync("RunDoctorAdvice", new object[] {
                        vsUserId,
                        vsRecordNo,
                        vsRelevantSubjectID,
                        vsUserName,
                        vsNurserName,
                        vsDate,
                        vsModifyTime}, this.RunDoctorAdviceOperationCompleted, userState);
        }
        
        private void OnRunDoctorAdviceOperationCompleted(object arg) {
            if ((this.RunDoctorAdviceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RunDoctorAdviceCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://hemodialysis.org/RunDoctorAdviceByCodeID", RequestNamespace="http://hemodialysis.org/", ResponseNamespace="http://hemodialysis.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void RunDoctorAdviceByCodeID(string strUserID, string strRecordNo, string strCodeID, string strNurserName, string strDate, string strModifyTime) {
            this.Invoke("RunDoctorAdviceByCodeID", new object[] {
                        strUserID,
                        strRecordNo,
                        strCodeID,
                        strNurserName,
                        strDate,
                        strModifyTime});
        }
        
        /// <remarks/>
        public void RunDoctorAdviceByCodeIDAsync(string strUserID, string strRecordNo, string strCodeID, string strNurserName, string strDate, string strModifyTime) {
            this.RunDoctorAdviceByCodeIDAsync(strUserID, strRecordNo, strCodeID, strNurserName, strDate, strModifyTime, null);
        }
        
        /// <remarks/>
        public void RunDoctorAdviceByCodeIDAsync(string strUserID, string strRecordNo, string strCodeID, string strNurserName, string strDate, string strModifyTime, object userState) {
            if ((this.RunDoctorAdviceByCodeIDOperationCompleted == null)) {
                this.RunDoctorAdviceByCodeIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRunDoctorAdviceByCodeIDOperationCompleted);
            }
            this.InvokeAsync("RunDoctorAdviceByCodeID", new object[] {
                        strUserID,
                        strRecordNo,
                        strCodeID,
                        strNurserName,
                        strDate,
                        strModifyTime}, this.RunDoctorAdviceByCodeIDOperationCompleted, userState);
        }
        
        private void OnRunDoctorAdviceByCodeIDOperationCompleted(object arg) {
            if ((this.RunDoctorAdviceByCodeIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RunDoctorAdviceByCodeIDCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://hemodialysis.org/CancelDoctorAdvice", RequestNamespace="http://hemodialysis.org/", ResponseNamespace="http://hemodialysis.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void CancelDoctorAdvice(string vsUserId, string vsRelevantSubjectID, string vsRecordNo, string vsModifyTime) {
            this.Invoke("CancelDoctorAdvice", new object[] {
                        vsUserId,
                        vsRelevantSubjectID,
                        vsRecordNo,
                        vsModifyTime});
        }
        
        /// <remarks/>
        public void CancelDoctorAdviceAsync(string vsUserId, string vsRelevantSubjectID, string vsRecordNo, string vsModifyTime) {
            this.CancelDoctorAdviceAsync(vsUserId, vsRelevantSubjectID, vsRecordNo, vsModifyTime, null);
        }
        
        /// <remarks/>
        public void CancelDoctorAdviceAsync(string vsUserId, string vsRelevantSubjectID, string vsRecordNo, string vsModifyTime, object userState) {
            if ((this.CancelDoctorAdviceOperationCompleted == null)) {
                this.CancelDoctorAdviceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCancelDoctorAdviceOperationCompleted);
            }
            this.InvokeAsync("CancelDoctorAdvice", new object[] {
                        vsUserId,
                        vsRelevantSubjectID,
                        vsRecordNo,
                        vsModifyTime}, this.CancelDoctorAdviceOperationCompleted, userState);
        }
        
        private void OnCancelDoctorAdviceOperationCompleted(object arg) {
            if ((this.CancelDoctorAdviceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CancelDoctorAdviceCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://hemodialysis.org/GetAdviceUpdateNotify", RequestNamespace="http://hemodialysis.org/", ResponseNamespace="http://hemodialysis.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void GetAdviceUpdateNotify(string vsUserId) {
            this.Invoke("GetAdviceUpdateNotify", new object[] {
                        vsUserId});
        }
        
        /// <remarks/>
        public void GetAdviceUpdateNotifyAsync(string vsUserId) {
            this.GetAdviceUpdateNotifyAsync(vsUserId, null);
        }
        
        /// <remarks/>
        public void GetAdviceUpdateNotifyAsync(string vsUserId, object userState) {
            if ((this.GetAdviceUpdateNotifyOperationCompleted == null)) {
                this.GetAdviceUpdateNotifyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAdviceUpdateNotifyOperationCompleted);
            }
            this.InvokeAsync("GetAdviceUpdateNotify", new object[] {
                        vsUserId}, this.GetAdviceUpdateNotifyOperationCompleted, userState);
        }
        
        private void OnGetAdviceUpdateNotifyOperationCompleted(object arg) {
            if ((this.GetAdviceUpdateNotifyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAdviceUpdateNotifyCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://hemodialysis.org/CancelAdviceUpdate", RequestNamespace="http://hemodialysis.org/", ResponseNamespace="http://hemodialysis.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void CancelAdviceUpdate(string vsUserId, string vsRecordNo, string vsAdviceId) {
            this.Invoke("CancelAdviceUpdate", new object[] {
                        vsUserId,
                        vsRecordNo,
                        vsAdviceId});
        }
        
        /// <remarks/>
        public void CancelAdviceUpdateAsync(string vsUserId, string vsRecordNo, string vsAdviceId) {
            this.CancelAdviceUpdateAsync(vsUserId, vsRecordNo, vsAdviceId, null);
        }
        
        /// <remarks/>
        public void CancelAdviceUpdateAsync(string vsUserId, string vsRecordNo, string vsAdviceId, object userState) {
            if ((this.CancelAdviceUpdateOperationCompleted == null)) {
                this.CancelAdviceUpdateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCancelAdviceUpdateOperationCompleted);
            }
            this.InvokeAsync("CancelAdviceUpdate", new object[] {
                        vsUserId,
                        vsRecordNo,
                        vsAdviceId}, this.CancelAdviceUpdateOperationCompleted, userState);
        }
        
        private void OnCancelAdviceUpdateOperationCompleted(object arg) {
            if ((this.CancelAdviceUpdateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CancelAdviceUpdateCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://hemodialysis.org/SaveMonthlySettlement", RequestNamespace="http://hemodialysis.org/", ResponseNamespace="http://hemodialysis.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SaveMonthlySettlement(string strUserId, string strJson) {
            this.Invoke("SaveMonthlySettlement", new object[] {
                        strUserId,
                        strJson});
        }
        
        /// <remarks/>
        public void SaveMonthlySettlementAsync(string strUserId, string strJson) {
            this.SaveMonthlySettlementAsync(strUserId, strJson, null);
        }
        
        /// <remarks/>
        public void SaveMonthlySettlementAsync(string strUserId, string strJson, object userState) {
            if ((this.SaveMonthlySettlementOperationCompleted == null)) {
                this.SaveMonthlySettlementOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSaveMonthlySettlementOperationCompleted);
            }
            this.InvokeAsync("SaveMonthlySettlement", new object[] {
                        strUserId,
                        strJson}, this.SaveMonthlySettlementOperationCompleted, userState);
        }
        
        private void OnSaveMonthlySettlementOperationCompleted(object arg) {
            if ((this.SaveMonthlySettlementCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SaveMonthlySettlementCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://hemodialysis.org/StopDialyseScheme", RequestNamespace="http://hemodialysis.org/", ResponseNamespace="http://hemodialysis.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void StopDialyseScheme(string strUserID, string strID, string strModifyTime) {
            this.Invoke("StopDialyseScheme", new object[] {
                        strUserID,
                        strID,
                        strModifyTime});
        }
        
        /// <remarks/>
        public void StopDialyseSchemeAsync(string strUserID, string strID, string strModifyTime) {
            this.StopDialyseSchemeAsync(strUserID, strID, strModifyTime, null);
        }
        
        /// <remarks/>
        public void StopDialyseSchemeAsync(string strUserID, string strID, string strModifyTime, object userState) {
            if ((this.StopDialyseSchemeOperationCompleted == null)) {
                this.StopDialyseSchemeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnStopDialyseSchemeOperationCompleted);
            }
            this.InvokeAsync("StopDialyseScheme", new object[] {
                        strUserID,
                        strID,
                        strModifyTime}, this.StopDialyseSchemeOperationCompleted, userState);
        }
        
        private void OnStopDialyseSchemeOperationCompleted(object arg) {
            if ((this.StopDialyseSchemeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.StopDialyseSchemeCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://hemodialysis.org/CallForwarding", RequestNamespace="http://hemodialysis.org/", ResponseNamespace="http://hemodialysis.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void CallForwarding(string strUserID, string strJson) {
            this.Invoke("CallForwarding", new object[] {
                        strUserID,
                        strJson});
        }
        
        /// <remarks/>
        public void CallForwardingAsync(string strUserID, string strJson) {
            this.CallForwardingAsync(strUserID, strJson, null);
        }
        
        /// <remarks/>
        public void CallForwardingAsync(string strUserID, string strJson, object userState) {
            if ((this.CallForwardingOperationCompleted == null)) {
                this.CallForwardingOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCallForwardingOperationCompleted);
            }
            this.InvokeAsync("CallForwarding", new object[] {
                        strUserID,
                        strJson}, this.CallForwardingOperationCompleted, userState);
        }
        
        private void OnCallForwardingOperationCompleted(object arg) {
            if ((this.CallForwardingCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CallForwardingCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://hemodialysis.org/AutomaticallyUploadPdf", RequestNamespace="http://hemodialysis.org/", ResponseNamespace="http://hemodialysis.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string AutomaticallyUploadPdf(string vsUserId, string strRecordNo) {
            object[] results = this.Invoke("AutomaticallyUploadPdf", new object[] {
                        vsUserId,
                        strRecordNo});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void AutomaticallyUploadPdfAsync(string vsUserId, string strRecordNo) {
            this.AutomaticallyUploadPdfAsync(vsUserId, strRecordNo, null);
        }
        
        /// <remarks/>
        public void AutomaticallyUploadPdfAsync(string vsUserId, string strRecordNo, object userState) {
            if ((this.AutomaticallyUploadPdfOperationCompleted == null)) {
                this.AutomaticallyUploadPdfOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAutomaticallyUploadPdfOperationCompleted);
            }
            this.InvokeAsync("AutomaticallyUploadPdf", new object[] {
                        vsUserId,
                        strRecordNo}, this.AutomaticallyUploadPdfOperationCompleted, userState);
        }
        
        private void OnAutomaticallyUploadPdfOperationCompleted(object arg) {
            if ((this.AutomaticallyUploadPdfCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AutomaticallyUploadPdfCompleted(this, new AutomaticallyUploadPdfCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://hemodialysis.org/GetThrombolysisPatientList", RequestNamespace="http://hemodialysis.org/", ResponseNamespace="http://hemodialysis.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void GetThrombolysisPatientList(string strUserID, string strDate) {
            this.Invoke("GetThrombolysisPatientList", new object[] {
                        strUserID,
                        strDate});
        }
        
        /// <remarks/>
        public void GetThrombolysisPatientListAsync(string strUserID, string strDate) {
            this.GetThrombolysisPatientListAsync(strUserID, strDate, null);
        }
        
        /// <remarks/>
        public void GetThrombolysisPatientListAsync(string strUserID, string strDate, object userState) {
            if ((this.GetThrombolysisPatientListOperationCompleted == null)) {
                this.GetThrombolysisPatientListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetThrombolysisPatientListOperationCompleted);
            }
            this.InvokeAsync("GetThrombolysisPatientList", new object[] {
                        strUserID,
                        strDate}, this.GetThrombolysisPatientListOperationCompleted, userState);
        }
        
        private void OnGetThrombolysisPatientListOperationCompleted(object arg) {
            if ((this.GetThrombolysisPatientListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetThrombolysisPatientListCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://hemodialysis.org/GetNoThrombolysisPatientList", RequestNamespace="http://hemodialysis.org/", ResponseNamespace="http://hemodialysis.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void GetNoThrombolysisPatientList(string strUserID, string strDate, string strPatientName, string strPatientCaseNo) {
            this.Invoke("GetNoThrombolysisPatientList", new object[] {
                        strUserID,
                        strDate,
                        strPatientName,
                        strPatientCaseNo});
        }
        
        /// <remarks/>
        public void GetNoThrombolysisPatientListAsync(string strUserID, string strDate, string strPatientName, string strPatientCaseNo) {
            this.GetNoThrombolysisPatientListAsync(strUserID, strDate, strPatientName, strPatientCaseNo, null);
        }
        
        /// <remarks/>
        public void GetNoThrombolysisPatientListAsync(string strUserID, string strDate, string strPatientName, string strPatientCaseNo, object userState) {
            if ((this.GetNoThrombolysisPatientListOperationCompleted == null)) {
                this.GetNoThrombolysisPatientListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetNoThrombolysisPatientListOperationCompleted);
            }
            this.InvokeAsync("GetNoThrombolysisPatientList", new object[] {
                        strUserID,
                        strDate,
                        strPatientName,
                        strPatientCaseNo}, this.GetNoThrombolysisPatientListOperationCompleted, userState);
        }
        
        private void OnGetNoThrombolysisPatientListOperationCompleted(object arg) {
            if ((this.GetNoThrombolysisPatientListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetNoThrombolysisPatientListCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://hemodialysis.org/GetDefaultThrombolysisDataByQrcode", RequestNamespace="http://hemodialysis.org/", ResponseNamespace="http://hemodialysis.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void GetDefaultThrombolysisDataByQrcode(string strUserID, string strDate, string strCardNo) {
            this.Invoke("GetDefaultThrombolysisDataByQrcode", new object[] {
                        strUserID,
                        strDate,
                        strCardNo});
        }
        
        /// <remarks/>
        public void GetDefaultThrombolysisDataByQrcodeAsync(string strUserID, string strDate, string strCardNo) {
            this.GetDefaultThrombolysisDataByQrcodeAsync(strUserID, strDate, strCardNo, null);
        }
        
        /// <remarks/>
        public void GetDefaultThrombolysisDataByQrcodeAsync(string strUserID, string strDate, string strCardNo, object userState) {
            if ((this.GetDefaultThrombolysisDataByQrcodeOperationCompleted == null)) {
                this.GetDefaultThrombolysisDataByQrcodeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDefaultThrombolysisDataByQrcodeOperationCompleted);
            }
            this.InvokeAsync("GetDefaultThrombolysisDataByQrcode", new object[] {
                        strUserID,
                        strDate,
                        strCardNo}, this.GetDefaultThrombolysisDataByQrcodeOperationCompleted, userState);
        }
        
        private void OnGetDefaultThrombolysisDataByQrcodeOperationCompleted(object arg) {
            if ((this.GetDefaultThrombolysisDataByQrcodeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDefaultThrombolysisDataByQrcodeCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://hemodialysis.org/GetDefaultThrombolysisData", RequestNamespace="http://hemodialysis.org/", ResponseNamespace="http://hemodialysis.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void GetDefaultThrombolysisData(string strUserID, string strPatientID, string strDate) {
            this.Invoke("GetDefaultThrombolysisData", new object[] {
                        strUserID,
                        strPatientID,
                        strDate});
        }
        
        /// <remarks/>
        public void GetDefaultThrombolysisDataAsync(string strUserID, string strPatientID, string strDate) {
            this.GetDefaultThrombolysisDataAsync(strUserID, strPatientID, strDate, null);
        }
        
        /// <remarks/>
        public void GetDefaultThrombolysisDataAsync(string strUserID, string strPatientID, string strDate, object userState) {
            if ((this.GetDefaultThrombolysisDataOperationCompleted == null)) {
                this.GetDefaultThrombolysisDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDefaultThrombolysisDataOperationCompleted);
            }
            this.InvokeAsync("GetDefaultThrombolysisData", new object[] {
                        strUserID,
                        strPatientID,
                        strDate}, this.GetDefaultThrombolysisDataOperationCompleted, userState);
        }
        
        private void OnGetDefaultThrombolysisDataOperationCompleted(object arg) {
            if ((this.GetDefaultThrombolysisDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDefaultThrombolysisDataCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://hemodialysis.org/GetspecifiedThrombolysisData", RequestNamespace="http://hemodialysis.org/", ResponseNamespace="http://hemodialysis.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void GetspecifiedThrombolysisData(string strUserID, string strPatientID, string strDate, string strThrombolysisNo) {
            this.Invoke("GetspecifiedThrombolysisData", new object[] {
                        strUserID,
                        strPatientID,
                        strDate,
                        strThrombolysisNo});
        }
        
        /// <remarks/>
        public void GetspecifiedThrombolysisDataAsync(string strUserID, string strPatientID, string strDate, string strThrombolysisNo) {
            this.GetspecifiedThrombolysisDataAsync(strUserID, strPatientID, strDate, strThrombolysisNo, null);
        }
        
        /// <remarks/>
        public void GetspecifiedThrombolysisDataAsync(string strUserID, string strPatientID, string strDate, string strThrombolysisNo, object userState) {
            if ((this.GetspecifiedThrombolysisDataOperationCompleted == null)) {
                this.GetspecifiedThrombolysisDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetspecifiedThrombolysisDataOperationCompleted);
            }
            this.InvokeAsync("GetspecifiedThrombolysisData", new object[] {
                        strUserID,
                        strPatientID,
                        strDate,
                        strThrombolysisNo}, this.GetspecifiedThrombolysisDataOperationCompleted, userState);
        }
        
        private void OnGetspecifiedThrombolysisDataOperationCompleted(object arg) {
            if ((this.GetspecifiedThrombolysisDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetspecifiedThrombolysisDataCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://hemodialysis.org/InsertAddThrombolysisData", RequestNamespace="http://hemodialysis.org/", ResponseNamespace="http://hemodialysis.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void InsertAddThrombolysisData(string strUserID, string strPatientID, string strDate) {
            this.Invoke("InsertAddThrombolysisData", new object[] {
                        strUserID,
                        strPatientID,
                        strDate});
        }
        
        /// <remarks/>
        public void InsertAddThrombolysisDataAsync(string strUserID, string strPatientID, string strDate) {
            this.InsertAddThrombolysisDataAsync(strUserID, strPatientID, strDate, null);
        }
        
        /// <remarks/>
        public void InsertAddThrombolysisDataAsync(string strUserID, string strPatientID, string strDate, object userState) {
            if ((this.InsertAddThrombolysisDataOperationCompleted == null)) {
                this.InsertAddThrombolysisDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertAddThrombolysisDataOperationCompleted);
            }
            this.InvokeAsync("InsertAddThrombolysisData", new object[] {
                        strUserID,
                        strPatientID,
                        strDate}, this.InsertAddThrombolysisDataOperationCompleted, userState);
        }
        
        private void OnInsertAddThrombolysisDataOperationCompleted(object arg) {
            if ((this.InsertAddThrombolysisDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertAddThrombolysisDataCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://hemodialysis.org/UpdateThrombolysisRecordInfo", RequestNamespace="http://hemodialysis.org/", ResponseNamespace="http://hemodialysis.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpdateThrombolysisRecordInfo(string strUserID, string strJson) {
            this.Invoke("UpdateThrombolysisRecordInfo", new object[] {
                        strUserID,
                        strJson});
        }
        
        /// <remarks/>
        public void UpdateThrombolysisRecordInfoAsync(string strUserID, string strJson) {
            this.UpdateThrombolysisRecordInfoAsync(strUserID, strJson, null);
        }
        
        /// <remarks/>
        public void UpdateThrombolysisRecordInfoAsync(string strUserID, string strJson, object userState) {
            if ((this.UpdateThrombolysisRecordInfoOperationCompleted == null)) {
                this.UpdateThrombolysisRecordInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateThrombolysisRecordInfoOperationCompleted);
            }
            this.InvokeAsync("UpdateThrombolysisRecordInfo", new object[] {
                        strUserID,
                        strJson}, this.UpdateThrombolysisRecordInfoOperationCompleted, userState);
        }
        
        private void OnUpdateThrombolysisRecordInfoOperationCompleted(object arg) {
            if ((this.UpdateThrombolysisRecordInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateThrombolysisRecordInfoCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://hemodialysis.org/DeleteAllThrombolysisInfo", RequestNamespace="http://hemodialysis.org/", ResponseNamespace="http://hemodialysis.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteAllThrombolysisInfo(string strUserId, string strThrombolysisNo, string strModifyTime) {
            this.Invoke("DeleteAllThrombolysisInfo", new object[] {
                        strUserId,
                        strThrombolysisNo,
                        strModifyTime});
        }
        
        /// <remarks/>
        public void DeleteAllThrombolysisInfoAsync(string strUserId, string strThrombolysisNo, string strModifyTime) {
            this.DeleteAllThrombolysisInfoAsync(strUserId, strThrombolysisNo, strModifyTime, null);
        }
        
        /// <remarks/>
        public void DeleteAllThrombolysisInfoAsync(string strUserId, string strThrombolysisNo, string strModifyTime, object userState) {
            if ((this.DeleteAllThrombolysisInfoOperationCompleted == null)) {
                this.DeleteAllThrombolysisInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteAllThrombolysisInfoOperationCompleted);
            }
            this.InvokeAsync("DeleteAllThrombolysisInfo", new object[] {
                        strUserId,
                        strThrombolysisNo,
                        strModifyTime}, this.DeleteAllThrombolysisInfoOperationCompleted, userState);
        }
        
        private void OnDeleteAllThrombolysisInfoOperationCompleted(object arg) {
            if ((this.DeleteAllThrombolysisInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteAllThrombolysisInfoCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://hemodialysis.org/CancelThrombolysisArchive", RequestNamespace="http://hemodialysis.org/", ResponseNamespace="http://hemodialysis.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void CancelThrombolysisArchive(string strUserID, string strThrombolysisNo, string strModifyTime) {
            this.Invoke("CancelThrombolysisArchive", new object[] {
                        strUserID,
                        strThrombolysisNo,
                        strModifyTime});
        }
        
        /// <remarks/>
        public void CancelThrombolysisArchiveAsync(string strUserID, string strThrombolysisNo, string strModifyTime) {
            this.CancelThrombolysisArchiveAsync(strUserID, strThrombolysisNo, strModifyTime, null);
        }
        
        /// <remarks/>
        public void CancelThrombolysisArchiveAsync(string strUserID, string strThrombolysisNo, string strModifyTime, object userState) {
            if ((this.CancelThrombolysisArchiveOperationCompleted == null)) {
                this.CancelThrombolysisArchiveOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCancelThrombolysisArchiveOperationCompleted);
            }
            this.InvokeAsync("CancelThrombolysisArchive", new object[] {
                        strUserID,
                        strThrombolysisNo,
                        strModifyTime}, this.CancelThrombolysisArchiveOperationCompleted, userState);
        }
        
        private void OnCancelThrombolysisArchiveOperationCompleted(object arg) {
            if ((this.CancelThrombolysisArchiveCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CancelThrombolysisArchiveCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://hemodialysis.org/InsertThrombolysisAdvice", RequestNamespace="http://hemodialysis.org/", ResponseNamespace="http://hemodialysis.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void InsertThrombolysisAdvice(string strUserID, string strJson, string strModifyTime) {
            this.Invoke("InsertThrombolysisAdvice", new object[] {
                        strUserID,
                        strJson,
                        strModifyTime});
        }
        
        /// <remarks/>
        public void InsertThrombolysisAdviceAsync(string strUserID, string strJson, string strModifyTime) {
            this.InsertThrombolysisAdviceAsync(strUserID, strJson, strModifyTime, null);
        }
        
        /// <remarks/>
        public void InsertThrombolysisAdviceAsync(string strUserID, string strJson, string strModifyTime, object userState) {
            if ((this.InsertThrombolysisAdviceOperationCompleted == null)) {
                this.InsertThrombolysisAdviceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertThrombolysisAdviceOperationCompleted);
            }
            this.InvokeAsync("InsertThrombolysisAdvice", new object[] {
                        strUserID,
                        strJson,
                        strModifyTime}, this.InsertThrombolysisAdviceOperationCompleted, userState);
        }
        
        private void OnInsertThrombolysisAdviceOperationCompleted(object arg) {
            if ((this.InsertThrombolysisAdviceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertThrombolysisAdviceCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://hemodialysis.org/UpThrombolysisAdvice", RequestNamespace="http://hemodialysis.org/", ResponseNamespace="http://hemodialysis.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpThrombolysisAdvice(string strUserID, string strJson, string strModifyTime) {
            this.Invoke("UpThrombolysisAdvice", new object[] {
                        strUserID,
                        strJson,
                        strModifyTime});
        }
        
        /// <remarks/>
        public void UpThrombolysisAdviceAsync(string strUserID, string strJson, string strModifyTime) {
            this.UpThrombolysisAdviceAsync(strUserID, strJson, strModifyTime, null);
        }
        
        /// <remarks/>
        public void UpThrombolysisAdviceAsync(string strUserID, string strJson, string strModifyTime, object userState) {
            if ((this.UpThrombolysisAdviceOperationCompleted == null)) {
                this.UpThrombolysisAdviceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpThrombolysisAdviceOperationCompleted);
            }
            this.InvokeAsync("UpThrombolysisAdvice", new object[] {
                        strUserID,
                        strJson,
                        strModifyTime}, this.UpThrombolysisAdviceOperationCompleted, userState);
        }
        
        private void OnUpThrombolysisAdviceOperationCompleted(object arg) {
            if ((this.UpThrombolysisAdviceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpThrombolysisAdviceCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://hemodialysis.org/DelThrombolysisAdvice", RequestNamespace="http://hemodialysis.org/", ResponseNamespace="http://hemodialysis.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DelThrombolysisAdvice(string strUserID, string strThrombolysisNo, string strSub1ID, string strModifyTime) {
            this.Invoke("DelThrombolysisAdvice", new object[] {
                        strUserID,
                        strThrombolysisNo,
                        strSub1ID,
                        strModifyTime});
        }
        
        /// <remarks/>
        public void DelThrombolysisAdviceAsync(string strUserID, string strThrombolysisNo, string strSub1ID, string strModifyTime) {
            this.DelThrombolysisAdviceAsync(strUserID, strThrombolysisNo, strSub1ID, strModifyTime, null);
        }
        
        /// <remarks/>
        public void DelThrombolysisAdviceAsync(string strUserID, string strThrombolysisNo, string strSub1ID, string strModifyTime, object userState) {
            if ((this.DelThrombolysisAdviceOperationCompleted == null)) {
                this.DelThrombolysisAdviceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDelThrombolysisAdviceOperationCompleted);
            }
            this.InvokeAsync("DelThrombolysisAdvice", new object[] {
                        strUserID,
                        strThrombolysisNo,
                        strSub1ID,
                        strModifyTime}, this.DelThrombolysisAdviceOperationCompleted, userState);
        }
        
        private void OnDelThrombolysisAdviceOperationCompleted(object arg) {
            if ((this.DelThrombolysisAdviceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DelThrombolysisAdviceCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void RunThrombolysisAdviceCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void CancelThrombolysisAdviceCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void UpdateSignatureForAllAdviceCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void InsertThromRecordCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void UpdateThromRecordCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void DelThromRecordCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void InsertThromMaterialCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void UpdateThromMaterialCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void DelThromMaterialCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void GetPlasmapheresisPatientListCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void GetNoPlasmapheresisPatientListCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void GetDefaultPlasmapheresisDataByQrcodeCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void GetDefaultPlasmapheresisDataCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void GetspecifiedPlasmapheresisDataCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void InsertAddPlasmapheresisDataCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void UpdatePlasmapheresisRecordInfoCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void DeleteAllPlasmapheresisInfoCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void CancelPlasmapheresisArchiveCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void InsertPlasmapheresisAdviceCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void UpPlasmapheresisAdviceCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void DelPlasmapheresisAdviceCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void RunPlasmapheresisAdviceCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void CancelPlasmapheresisAdviceCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void UpdateSignatureForAllPlasmapheresisAdviceCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void InsertPlasmapheresisRecordCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void UpdatePlasmapheresisRecordCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void DelPlasmapheresisRecordCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void InsertPlasmapheresisMaterialCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void UpdatePlasmapheresisMaterialCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void DelPlasmapheresisMaterialCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void UploadFilesCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void UploadFilesForPCUpgradingCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void UploadCommonFilesCompletedEventHandler(object sender, UploadCommonFilesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UploadCommonFilesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UploadCommonFilesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void UploadLogFileFromAndroidCompletedEventHandler(object sender, UploadLogFileFromAndroidCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UploadLogFileFromAndroidCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UploadLogFileFromAndroidCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void UploadLogFromAndroidCompletedEventHandler(object sender, UploadLogFromAndroidCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UploadLogFromAndroidCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UploadLogFromAndroidCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void GetApkVersionsCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void GetApkVersionsByApktoolCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void GetPCVersionsCompletedEventHandler(object sender, GetPCVersionsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPCVersionsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPCVersionsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void CheckFileMD5CompletedEventHandler(object sender, CheckFileMD5CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckFileMD5CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckFileMD5CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void CheckFileMD5ForPCCompletedEventHandler(object sender, CheckFileMD5ForPCCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckFileMD5ForPCCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckFileMD5ForPCCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void UploadPatientImageCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void UploadVesselRoutePictureCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void UploadDocumentFileCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void UploadCommonPictureCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void UploadCommonPictureForPCCompletedEventHandler(object sender, UploadCommonPictureForPCCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UploadCommonPictureForPCCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UploadCommonPictureForPCCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void UploadProductUserSignatureImageCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void GetCurrentWebServiceVersionCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void GetCurrentWebServiceVersionForPCCompletedEventHandler(object sender, GetCurrentWebServiceVersionForPCCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCurrentWebServiceVersionForPCCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCurrentWebServiceVersionForPCCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void UploadPartFilesForPCUpgradingCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void UploadDocumentFileWithReturnCompletedEventHandler(object sender, UploadDocumentFileWithReturnCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UploadDocumentFileWithReturnCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UploadDocumentFileWithReturnCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void UploadLogFromPCCompletedEventHandler(object sender, UploadLogFromPCCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UploadLogFromPCCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UploadLogFromPCCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void GetServerFileNamesCompletedEventHandler(object sender, GetServerFileNamesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetServerFileNamesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetServerFileNamesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void UploadCommonAudioCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void GetFlagForUpdateConfigFileCompletedEventHandler(object sender, GetFlagForUpdateConfigFileCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFlagForUpdateConfigFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFlagForUpdateConfigFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void UpdateConfigFileCompletedEventHandler(object sender, UpdateConfigFileCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateConfigFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateConfigFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void OnlineSessionStartCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void OnlineSessionStopCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void OnlineGetCurrentOnlineDataCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void DoCalcCompletedEventHandler(object sender, DoCalcCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DoCalcCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DoCalcCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void GetDateTimeNowCompletedEventHandler(object sender, GetDateTimeNowCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDateTimeNowCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDateTimeNowCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void GetDateTimeNow2CompletedEventHandler(object sender, GetDateTimeNow2CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDateTimeNow2CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDateTimeNow2CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void xxlCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void CheckProductUserCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void CheckProductUserForSchemeCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void CheckProductUserByUserNameCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void CheckUserForNursingCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void CheckUserForHeadNurseCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void CheckProductUserPasswordCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void GetProductUserForModifySchemeCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void GetPatientBeforeTodayCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void GetPatientCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void GetPatientListByNameCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void GetThrombolysisPatientCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void GetDialyseDataCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void GetDialyseDataByQrcodeCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void GetDictionaryDataCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void GetEquipmentListCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void GetSpecifiedDialyseRecordCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void GetTestInfoCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void GetLastTestInfoCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void GetBPInfoCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void GetDialysisCostsInfoCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void GetDetailDialysisCostsInfoCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void GetDialyseSchemeCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void GetSpecifiedDialyseDataCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void GetDeepVeinCatheterizationCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void GetScoreAssessmentInfoCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void GetPublicityAndEducationContentCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void GetAssessFeverCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void GetDialyseRecordHistoryListCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void GetPublicityAndEducationByPatientIDCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void GetPublicityAndEducationHistoryListCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void GetDisinfectionRecordInfoCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void GetDisinfectionRecordEndTimeCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void GetPatientInfoCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void GetHtmlInfoCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void GetShiftInfoCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void QueryShiftInfoCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void GetPatientMedicineStockCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void GetAccessoryCheckInfoCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void UploadAccessoryCheckImageCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void GetVesselRoutePictureListCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void GetProgressNoteListCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void GetProgressNoteInfoCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void GetBodySurfaceDisinfectionRecordInfoCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void GetedicalUserInfoStatisticsInfoCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void GetPatMonthSummaryInfoCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void GetPatMonthSummaryhtmlInfoCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void GetDialysisMachineRunningRecordInfoCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void GetDialysisPrepareInfoCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void GetNurseScheduleInfoCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void GetNurseScheduleInfoCallCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void GetDialysisReportListCompletedEventHandler(object sender, GetDialysisReportListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDialysisReportListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDialysisReportListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void GetPatientEquipmentStockInfoCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void GetDialyseRecordRemindCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void GetSub2PictureListCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void GetSub2AudioListCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void GetLaboratoryInfoLisCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void GetLaboratorySmallInfoLisCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void DelDoctorAdviceCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void DelLongTermDialyseAdviceRecordCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void DelDialyseInfoCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void DelAllDialyseDataCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void DelDialyseMaterialCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void DelDialyseMaterialDetailCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void DeleteAccessoryCheckImageCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void DeleteAccessoryCheckInfoCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void DeleteExecutionPublicityAndEducationCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void DeleteSub2DetailCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void InsertDialyseAdviceRecordCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void InsertLongTermDialyseAdviceRecordCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void InsertDialyseTimeRecordCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void InsertDialyseMaterialCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void InsertDialyseMaterialDetailCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void InsertDialyseDataCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void AddNewGroupForPublicityAndEducationCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void SaveNurseTsjsCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void AddSub2PictureCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void AddSub2AudioCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void UpDateDialyseDataCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void UpdateSingleFieldCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void UpDateDialyseAdviceRecordCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void UpDateCollateDialyseAdviceRecordCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void UpDateDialyseTimeRecordCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void UpdateDialyseMaterialCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void UpDateDialyseMaterialDetailCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void UpDateForJietaiCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void UpDateSignatureForAllAdviceCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void UpDateSumForDialyseTimeRecordCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void UpdateDialyseMaterialForMergeCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void UpDateDialyseSchemeCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void UpDateLongTermDialyseAdviceRecordCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void UpDateAdviceRecordZXTimeCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void UpdateDeepVeinCatheterizationCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void InsertOrUpdateScoreAssessmentInfoCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void InsertOrUpdateAssessFeverCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void UpdateAssessDisinfectionFlagCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void ExecutionPublicityAndEducationCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void DisinfectionRecordInfoOperationCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void ModifyHospitalizationFlagCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void ShiftInfoOperationCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void SaveAccessoryCheckInfoCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void BodySurfaceDisinfectionRecordInfoOperationCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void DialysisMachineRunningRecordOperationCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void CancelArchiveCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void StopLongTermDialyseAdviceRecordCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void RunDoctorAdviceCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void RunDoctorAdviceByCodeIDCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void CancelDoctorAdviceCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void GetAdviceUpdateNotifyCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void CancelAdviceUpdateCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void SaveMonthlySettlementCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void StopDialyseSchemeCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void CallForwardingCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void AutomaticallyUploadPdfCompletedEventHandler(object sender, AutomaticallyUploadPdfCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AutomaticallyUploadPdfCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AutomaticallyUploadPdfCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void GetThrombolysisPatientListCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void GetNoThrombolysisPatientListCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void GetDefaultThrombolysisDataByQrcodeCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void GetDefaultThrombolysisDataCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void GetspecifiedThrombolysisDataCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void InsertAddThrombolysisDataCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void UpdateThrombolysisRecordInfoCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void DeleteAllThrombolysisInfoCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void CancelThrombolysisArchiveCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void InsertThrombolysisAdviceCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void UpThrombolysisAdviceCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1055.0")]
    public delegate void DelThrombolysisAdviceCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
}

#pragma warning restore 1591